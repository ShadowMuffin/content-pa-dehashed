args:
- default: true
  description: The hash value(s) to check.
  name: hash
  required: true
comment: Find the rule state for a hash value in CBEP/Bit9.
commonfields:
  id: CBPFindRule
  version: -1
dependson:
  must:
  - cbp-fileRule-search
name: CBPFindRule
script: "STATES = { 1: \"Unapproved\", 2: \"Approved\", 3: \"Banned\" }\nres = []\n\
  found = []\nmd = ''\nt = []\nlimit = demisto.args()[\"limit\"] if \"limit\" in demisto.args()\
  \ else \"10\"\nhashes = argToList(demisto.args()[\"hash\"])\nfor h in hashes:\n\
  \    resSearch = demisto.executeCommand(\"cbp-fileRule-search\", { \"query\": \"\
  hash:\" + h })\n    for entry in resSearch:\n        if isError(entry):\n      \
  \      res.append(entry)\n        else:\n            for rule in entry[\"Contents\"\
  ]:\n                t.append(rule)\n                found.append(rule[\"hash\"])\n\
  \                md += \"Hash \" + rule[\"hash\"] + \" is in state **\" + STATES[rule[\"\
  fileState\"]] + \"**\\n\"\nif found:\n    appendContext('found_hashes', ','.join(found),\
  \ dedup=True)\nres.append({ \"Type\" : entryTypes[\"note\"], \"ContentsFormat\"\
  \ : formats[\"markdown\"], \"Contents\" : md })\nres.append({ \"Type\" : entryTypes[\"\
  note\"], \"ContentsFormat\" : formats[\"table\"], \"Contents\" : t })\ndemisto.results(res)\n"
scripttarget: 0
subtype: python2
system: true
tags:
- carbon-black-protection
- bit9
- enhancement
timeout: 0s
toversion: 4.1.9
type: python
