args:
- default: true
  description: Name of the non-whitelist SSH server instance
  name: SSHValidationServer
  required: true
comment: "Get all sites from Incapsula.\nFor each site, the script, through a ssh\
  \ server (one that should NOT be in the whitelist), make sure the site is compliant\
  \ ( whitelist is being enforced ).\n If not, a warning mail will be sent to the\
  \ domain owner. "
commonfields:
  id: IncapWhitelistCompliance
  version: -1
dependson:
  must:
  - incap-get-domain-approver-email
  - SendEmail
  - incap-list-sites
  - RemoteExec
name: IncapWhitelistCompliance
script: "import re\n\n#############Consts\nCOMPLIANCE_LABEL = \"Compliance\"\nCURL_GET_COMMAND\
  \ = 'curl --insecure -L -I -m 1 http://{0} | grep -C 1 \"200 OK\"'\nHTTP_OK = \"\
  200 OK\"\nMAIL_TO_RECIPIENT = \"IncapsulaUpdates@demisto.com\"\nINCAPSULA_WARNING\
  \ = \"****Incapsula Warning****\"\nBASIC_WARNING_MAIL = '''\nWARNING\nYour Site\
  \ {0} is not compliant to the Incapsula whitelist policy\nplease update your settings\n\
  \n--DBot\n'''\nADVANCE_WARNING_MAIL = '''\nWARNING\nYour Site {0} is not compliant\
  \ to the Incapsula whitelist policy\nplease update your settings as soon as possible!\n\
  \n--DBot\n'''\nURL_REGEX = '(?i)(?:\\\\([-A-Z0-9+&@#\\\\/%=~_|$?!:,.]*\\\\)|[-A-Z0-9+&@#\\\
  \\/%=~_|$?!:,.])*(?:\\\\([-A-Z0-9+&@#\\\\/%=~_|$?!:,.]*\\\\)|[A-Z0-9+&@#\\\\/%=~_|$])'\n\
  \nres = []\nres_errors = []\n\nctx = demisto.context()\ncompliance_table = demisto.get(ctx,\
  \ COMPLIANCE_LABEL)\nif not compliance_table:\n    compliance_table = {}\n\ndArgs\
  \ = {\"ssh_server\" : demisto.args()[\"SSHValidationServer\"]}\n\n# Calling a command\
  \ - returns a list of one or more entries\nresp = demisto.executeCommand(\"incap-list-sites\"\
  , {})\n\ndef sendMail(to, subject, body=\"\", bcc=\"\"):\n    return demisto.executeCommand(\"\
  SendEmail\", {'to':to, 'subject':subject, 'body':body, 'bcc':bcc})\n\ndef escalation(url,\
  \ severity, owner_mail):\n    if isinstance(owner_mail,list):\n        owner_mail\
  \ = ''.join(map(lambda (x):str(x)+', ',owner_mail[:-1])+[str(owner_mail[-1])])\n\
  \n    if severity == 0:\n        return None\n    elif severity < 4:\n        return\
  \ sendMail(MAIL_TO_RECIPIENT, INCAPSULA_WARNING, BASIC_WARNING_MAIL.format(url),\
  \ owner_mail)\n    else:\n        return sendMail(MAIL_TO_RECIPIENT, INCAPSULA_WARNING,\
  \ BASIC_WARNING_MAIL.format(url), owner_mail)\nif isError(resp[0]):\n    demisto.results(resp)\n\
  else:\n    data = demisto.get(resp[0], \"Contents.sites\")\n    for site in data:\n\
  \        domain = site['domain']\n        if not re.match(URL_REGEX, str(domain)):\n\
  \            res_errors.append(str(domain) + ' - is not a valid url')\n        else:\n\
  \            site_id = site['site_id']\n\n            temp_res = demisto.executeCommand(\"\
  RemoteExec\", {'cmd' : CURL_GET_COMMAND.format(str(domain)), 'system': dArgs[\"\
  ssh_server\"]})\n            if not isError(temp_res[0]):\n                temp_data\
  \ = demisto.get(temp_res[0], \"Contents\")\n                if temp_data.find(HTTP_OK)\
  \ == -1:\n                    #remove from non copliance table\n               \
  \     if compliance_table.has_key(domain):\n                        compliance_key.pop(domain)\n\
  \                else:\n                    if compliance_table.has_key(domain):\n\
  \                        compliance_table[domain] += 1\n                    else:\n\
  \                        compliance_table[domain] = 1\n                    temp_res\
  \ = demisto.executeCommand(\"incap-get-domain-approver-email\",{'domain':domain})\n\
  \                    if isError(temp_res[0]):\n                        res_errors.append(str(temp_res))\n\
  \                    else:\n                        emails = demisto.get(temp_res[0],\
  \ \"Contents.domain_emails\")\n                        if emails:\n            \
  \                temp_res = escalation(domain, compliance_table[domain], emails)\n\
  \                            if isError(temp_res[0]):\n                        \
  \        res_errors.append(str(temp_res))\n                        else:\n     \
  \                       res_errors.append(str(temp_res[0]))\n\n    demisto.setContext(COMPLIANCE_LABEL,\
  \ compliance_table)\n\n    markdownString = '## Incapsula Whitelist Compliance -\
  \ validation results\\n'\n    markdownString += tblToMd(\"Non-Compliant Sites -\
  \ number of days not compliant\", [compliance_table])\n\n    res.append({'ContentsFormat':\
  \ formats['markdown'], 'Type': entryTypes['note'], 'Contents': markdownString})\n\
  \ndemisto.results(res)"
scripttarget: 0
subtype: python2
system: true
tags:
- Incapsula
tests:
- No test - old script
timeout: 0s
toversion: 4.1.9
type: python
