args:
- default: true
  description: The query expressions in AQL
  name: query_expression
  required: true
- description: Fields to filter in
  name: fields
- description: Timeout in seconds. Default is 10 minutes.
  name: timeout
- description: Interval to poll for results. Default is 10 seconds.
  name: interval
- description: Number of results in return
  name: range
- description: Table headers
  name: headers
comment: This Script runs a QRadar query and return its results to the war-room.
commonfields:
  id: QRadarFullSearch
  version: -1
dependson:
  must:
  - qradar-searches
  - qradar-get-search
  - qradar-get-search-results
deprecated: true
name: QRadarFullSearch
script: "res = [];\n\nvar search_done = false;\nvar error = false;\n\nvar timeout\
  \ = ('timeout' in args) ? parseInt(args.timeout) : 600;\nvar interval = ('interval'\
  \ in args) ? parseInt(args.interval) : 10;\n\nvar search_args = {};\nif ('query_expression'\
  \ in args) {\n    search_args.query_expression = args.query_expression;\n}\nif ('fields'\
  \ in args) {\n    search_args.fields = args.fields;\n}\nif ('range' in args) {\n\
  \    search_args.range = args.range;\n}\n\nif ('headers' in args) {\n    search_args.headers\
  \ = args.headers;\n}\n\n//submit query, retrive  search_id\nvar query_res = executeCommand(\"\
  qradar-searches\", search_args);\n\nif (isError(query_res[0])) {\n    return query_res;\n\
  } else {\n    search_id = dq(query_res[0], \"Contents.search_id\");\n    search_args.search_id\
  \ = search_id;\n\n    //polling stage\n    var sec = 0;\n    while ((sec < timeout)\
  \ && !error) {\n        status_res = executeCommand(\"qradar-get-search\", search_args);\n\
  \        if (isError(status_res[0])) {\n            return status_res;\n       \
  \ }\n\n        var q_status = dq(status_res[0], \"Contents.status\");\n\n      \
  \  if (q_status && ['WAIT', 'EXECUTE', 'SORTING'].indexOf(q_status) !== -1) {\n\
  \            // Not finished\n        } else if (q_status && q_status == 'COMPLETED')\
  \ {\n            search_done = true;\n        } else {\n            error = true;\n\
  \            return {\"Type\" : entryTypes.error, \"ContentsFormat\" : formats.text,\
  \ \"Contents\" : 'An Error occurred during the search process. search status={0}.'.format(q_status)};\n\
  \        }\n\n        if (search_done) {\n            break;\n        }\n\n    \
  \    sec += interval;\n        wait(interval);\n    }\n\n    if (sec >= timeout)\
  \ {\n        return {\"Type\" : entryTypes.error, \"ContentsFormat\" : formats.text,\
  \ \"Contents\" : 'Timeout reached. waited for {0} seconds'.format(timeout)};\n \
  \   }\n\n    // get results\n    if (search_done) {\n        return executeCommand(\"\
  qradar-get-search-results\", search_args);\n    } else {\n        return {\"Type\"\
  \ : entryTypes.error, \"ContentsFormat\" : formats.text, \"Contents\" : 'Unexpected\
  \ error occurred'};\n    }\n}"
scripttarget: 0
system: true
tags:
- QRadar
tests:
- No test
toversion: 4.1.9
type: javascript
