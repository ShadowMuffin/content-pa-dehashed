args:
- default: true
  description: Incident ID to get tasks from
  name: incidentId
  required: true
- description: 'Comma separated list of states. Possible values: New, InProgress,
    Completed, Waiting, Error, Skipped, Blocked (leave empty to get all tasks)'
  name: states
comment: Get all tasks for specific incident by the given state.
commonfields:
  id: DemistoGetIncidentTasksByState
  version: -1
enabled: true
name: DemistoGetIncidentTasksByState
outputs:
- contextPath: Tasks
  description: The entire task object
- contextPath: Tasks.id
  description: Task ID
  type: string
- contextPath: Tasks.name
  description: Task name
  type: string
- contextPath: Tasks.type
  description: The type of the task (regular, condition, title, playbook, start)
  type: string
- contextPath: Tasks.owner
  description: Task owner
  type: string
- contextPath: Tasks.state
  description: Task state (inprogress, Completed, WillNotBeExecuted, Error, Waiting,
    Blocked, and empty string for not started)
  type: string
- contextPath: Tasks.scriptId
  description: Task related script (empty if manual)
  type: string
- contextPath: Tasks.startDate
  description: Task start date
  type: unknown
- contextPath: Tasks.completedDate
  description: Task completed date
  type: unknown
- contextPath: Tasks.dueDate
  description: Task due date (SLA)
  type: unknown
- contextPath: Tasks.parentPlaybookID
  description: Task parent playbook ID (in case the task is part of sub-playbook)
  type: unknown
- contextPath: Tasks.completedBy
  description: Task completed by (username)
  type: string
runonce: false
script: "var taskStates = {\n    new: '',\n    inprogress: 'inprogress',\n    completed:\
  \ 'Completed',\n    waiting: 'Waiting',\n    error: 'Error',\n    skipped: 'WillNotBeExecuted',\n\
  \    blocked: 'Blocked'\n};\n\nfunction mapToArray(m) {\n    var arr = [];\n   \
  \ for (var k in m) {\n        arr.push(m[k]);\n    }\n    return arr;\n}\n\nfunction\
  \ getSubPlaybookTasks(tasks) {\n  var readyTasks = [];\n  arinks = [];\n  (tasks\
  \ || []).forEach(function (task) {\n    if (task.type === 'playbook' && task.subPlaybook)\
  \ {\n      readyTasks = readyTasks.concat(getSubPlaybookTasks(mapToArray(task.subPlaybook.tasks)));\n\
  \    }\n    readyTasks.push(task);\n  });\n\n  return readyTasks;\n}\n\nfunction\
  \ getAllPlaybookTasks(tasks) {\n  if (!tasks || tasks.length === 0) {\n    return\
  \ [];\n  }\n  return getSubPlaybookTasks(tasks);\n}\n\nfunction getStates(states)\
  \ {\n    var readyStates = {};\n    var splittedStates = states.split(\",\").forEach(function(state)\
  \ {\n        var systemState = taskStates[state.trim().toLowerCase()];\n       \
  \ if (systemState !== null && systemState !== undefined) {\n         readyStates[systemState]\
  \ = true;\n        }\n    });\n\n    if (Object.keys(readyStates).length === 0)\
  \ {\n        Object.keys(taskStates).forEach(function(k) {\n            readyStates[taskStates[k]]\
  \ = true;\n        });\n    }\n\n    return readyStates;\n}\n\nvar states = getStates(args.states\
  \ || '');\nvar incidentId = args.incidentId;\nvar res = executeCommand('demisto-api-get',\
  \ {'uri': '/investigation/' + incidentId + '/workplan'});\nif (isError(res[0]))\
  \ {\n    return res;\n}\n\nvar workplan = dq(res[0],'Contents.response.invPlaybook');\n\
  \nif (!workplan || !workplan.tasks || workplan.tasks.length === 0) {\n    return\
  \ 'Workplan for incident ' + incidentId + ', has no tasks.';\n}\n\nvar tasks = mapToArray(workplan.tasks);\n\
  var allTasks = getAllPlaybookTasks(tasks);\n\nvar res = [];\nfor (var id in allTasks)\
  \ {\n    var task = allTasks[id];\n    if (states[task.state] !== null && states[task.state]\
  \ !== undefined) {\n        res.push({\n            id: task.id,\n            name:\
  \ task.task.name,\n            type: task.type,\n            owner: task.assignee,\n\
  \            state: task.state,\n            scriptId: task.task.scriptId,\n   \
  \         startDate: task.startDate,\n            dueDate: task.dueDate,\n     \
  \       completedDate: task.completedDate,\n            parentPlaybookID: task.parentPlaybookID,\n\
  \            completedBy: task.completedBy\n        });\n    }\n}\n\nentry = {\n\
  \    Type: entryTypes.note,\n    Contents: res,\n    ContentsFormat: formats.json,\n\
  \    ReadableContentsFormat: formats.markdown,\n    HumanReadable: tableToMarkdown('Tasks\
  \ with states ' + args.states + ' (Incident #' + incidentId + ')', res, ['id', 'name',\
  \ 'state', 'owner', 'scriptId']),\n    EntryContext: {\n        Tasks: res\n   \
  \ }\n};\n\nreturn entry;"
scripttarget: 0
sensitive: true
tags:
- Utility
tests:
- No test
toversion: 4.1.9
type: javascript
