comment: Generates 1000 random emails and batches them into a large string. Returns
  the time it takes to execute `extractIndicators` on the big batch of indicators.
commonfields:
  id: FormattingPerformance
  version: -1
dockerimage: demisto/faker3:1.0.0.247
enabled: true
name: FormattingPerformance
outputs:
- contextPath: Formatting.Time
  description: The time in seconds it took to execute formatting scripts on a string
    with 1000 indicators in it.
  type: Number
runas: DBotWeakRole
runonce: false
script: "'''IMPORTS'''\nimport time\nimport random\nfrom faker import Faker\nfrom\
  \ faker.providers import internet\n\ntry:\n    '''SETUP'''\n    fake = Faker()\n\
  \    fake.add_provider(internet)\n\n    indicators_count = 1000\n    per_batch =\
  \ 1000\n    executions = int(indicators_count / per_batch)\n\n    indicator_types\
  \ = [fake.email, fake.ipv4, fake.url, fake.ipv6]\n\n    indicators = []\n    for\
  \ i in range(indicators_count):\n        idx = random.randint(0, len(indicator_types)\
  \ - 1)\n        indicator = indicator_types[idx]().replace('.', '[.]') if idx !=\
  \ 0 else indicator_types[idx]()\n        if idx == 2:\n            indicator = indicator.replace('http',\
  \ 'hxxp')\n        indicators.append(indicator)\n\n    indicators_texts = []\n \
  \   for i in range(1, executions + 1):\n        text = '\\n'.join(indicators[(i\
  \ - 1) * per_batch: i * per_batch])\n        indicators_texts.append(text)\n\n \
  \   '''EXECUTION'''\n    start_time = time.perf_counter()\n    for indicators_text\
  \ in indicators_texts:\n        res = demisto.executeCommand('extractIndicators',\
  \ {'text': indicators_text})\n    end_time = time.perf_counter()\n    delta = end_time\
  \ - start_time\n    performance_msg = 'Formatting scripts execution time for a total\
  \ of {} '.format(indicators_count)\n    performance_msg += 'indicators in batches\
  \ of {} for a total of {}'.format(per_batch, executions)\n    performance_msg +=\
  \ ' executions: {}'.format(delta)\n    entry_context = {'Formatting.Time': delta}\n\
  \    return_outputs(readable_output=performance_msg, outputs=entry_context, raw_response=res)\n\
  except Exception as e:\n    return_error(str(e))"
subtype: python3
system: false
tags:
- indicator-format
- analytics
- autoextract
timeout: "3\xB5s"
toversion: 4.1.9
type: python
