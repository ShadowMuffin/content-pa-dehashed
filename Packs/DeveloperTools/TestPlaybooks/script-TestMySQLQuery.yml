args: []
comment: Test script to test mysql query integration
commonfields:
  id: TestMysqlQuery
  version: -1
dependson:
  must:
  - mysql|||query
enabled: true
name: TestMysqlQuery
outputs: []
runas: DBotWeakRole
runonce: false
script: "# Script to testout various mysql queries\ndef main():\n    res = demisto.executeCommand(\"\
  query\", {'query': 'select user()', 'using-brand': 'mysql'})\n    if not res[0]['Contents'][0].get('user()'):\n\
  \        raise Exception('user response not found: {}'.format(res[0]))\n    res\
  \ = demisto.executeCommand(\"query\", {'query': 'select * from city', 'using-brand':\
  \ 'mysql'})\n    size = len(res[0]['Contents'])\n    if size != 100:\n        raise\
  \ Exception('Response size of {} is not 100: {}'.format(size, res[0]))\n    #check\
  \ large limnit (city table has over 4000 rows\n    res = demisto.executeCommand(\"\
  query\", {'query': 'select * from city', 'limit': 4000, 'using-brand': 'mysql'})\n\
  \    size = len(res[0]['Contents'])\n    if size != 4000:\n        raise Exception('Response\
  \ size of {} is not 4000: {}'.format(size, res[0]))\n    res = demisto.executeCommand(\"\
  query\", {'query': \"select * from city where Name like 'Albany'\", 'using-brand':\
  \ 'mysql'})\n    size = len(res[0]['Contents'])\n    if size != 1 or res[0]['Contents'][0]['Name']\
  \ != 'Albany':\n        raise Exception('Search for Albany failed. Size: {} res:\
  \ {}'.format(size, res[0]))\n    res = demisto.executeCommand(\"query\", {'query':\
  \ \"select * from city where Name like 'Tel Aviv'\", 'using-brand': 'mysql'})\n\
  \    #Tel Aviv is not in the DB should return 0 results\n    size = len(res[0]['Contents'])\n\
  \    if size != 0 or res[0]['Type'] != entryTypes['note']:\n        raise Exception('Search\
  \ for Tel Aviv returned invalid result. Size: {} res: {}'.format(size, res[0]))\n\
  \    demisto.results({\n        'Type': entryTypes['note'],\n        'ContentsFormat':\
  \ formats['text'],\n        'Contents': 'All is good'\n    })\n\n\ntry:\n    main()\n\
  except Exception as e:\n    import traceback\n    LOG('{}: {}'.format(type(e), str(e)))\n\
  \    LOG.print_log()\n\n    demisto.results({\n        'Type': entryTypes['error'],\n\
  \        'ContentsFormat': formats['text'],\n        'Contents': 'error has ocurred:\
  \ {}'.format(str(e)) + \"\\n\\nTrace:\\n\" + str(traceback.format_exc()),\n    \
  \    })"
subtype: python2
system: false
tags: []
timeout: '0'
toversion: 4.1.9
type: python
