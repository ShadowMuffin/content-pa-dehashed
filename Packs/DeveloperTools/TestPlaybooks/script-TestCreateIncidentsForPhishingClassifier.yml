args:
- defaultValue: '20'
  description: Number of incidents to create for each label
  name: numberOfIncidents
- defaultValue: test_phishing_historic_data
  description: ''
  name: historicListName
comment: ''
commonfields:
  id: TestCreateIncidentsForPhishingClassifier
  version: -1
dockerimage: demisto/python:2.7.18.9326
enabled: true
name: TestCreateIncidentsForPhishingClassifier
outputs:
- contextPath: EmailSujbectKey
  description: EmailSujbectKey
- contextPath: EmailBodyKey
  description: EmailBodyKey
- contextPath: EmailTagKey
  description: EmailTagKey
- contextPath: IncidentsQuery
  description: IncidentsQuery
runas: DBotWeakRole
runonce: false
script: "import random, base64, pickle\nNUMBER_OF_INCIDENTS = int(demisto.args()['numberOfIncidents'])\n\
  words_tag1 = [\"closed\", \"church\", \"squeamish\", \"friction\", \"moaning\",\
  \ \"gratis\", \"angle\", \"smash\", \"kiss\", \"desk\", \"icky\", \"aunt\"]\nwords_tag2\
  \ = [\"ntidy\",\"boy\",\"substance\",\"faulty\",\"friction\",\"waves\",\"type\"\
  ,\"boat\",\"argument\",\"metal\",\"legal\",\"marked\"]\nwords_tag3 = [\"suspend\"\
  ,\"trucks\",\"aboriginal\",\"thread\",\"succeed\",\"gray\",\"collar\",\"fall\",\"\
  last\",\"volatile\",\"exotic\",\"chief\"]\n\nincident1_template = {\n    'type':\
  \ 'Simulation',\n    'name': 'Tag1',\n}\n\nincident2_template = {\n    'type': 'Simulation',\n\
  \    'name': 'Tag2',\n}\n\nfor i in range(0, NUMBER_OF_INCIDENTS):\n    incident1_template[\"\
  details\"] = \" \".join([words_tag1[i] for i in [random.randint(0, len(words_tag1)-1)\
  \ for i in range(30)]]),\n    demisto.executeCommand(\"createNewIncident\", incident1_template)\n\
  for i in range(0, NUMBER_OF_INCIDENTS):\n    incident2_template[\"details\"] = \"\
  \ \".join([words_tag2[i] for i in [random.randint(0, len(words_tag2)-1) for i in\
  \ range(30)]]),\n    demisto.executeCommand(\"createNewIncident\", incident2_template)\n\
  \nincidents = []\nfor i in range(0, NUMBER_OF_INCIDENTS):\n    incidents.append({\n\
  \        'type': 'Simulation',\n        'name': 'Tag3',\n        'dbot_processed_text':\
  \ \" \".join([words_tag3[i] for i in [random.randint(0, len(words_tag3)-1) for i\
  \ in range(30)]])\n    })\n\nencoded_data = base64.b64encode(pickle.dumps(incidents))\n\
  res = demisto.executeCommand(\"createList\", {\"listName\": demisto.args()['historicListName'],\
  \ \"listData\": encoded_data})\ndemisto.results(res)\n\ndemisto.results({\n    'Contents':\
  \ 'Done crete incidents',\n    'ContentsFormat': formats['text'],\n    'EntryContext':\
  \ {\n        'EmailSujbectKey': 'name',\n        'EmailBodyKey': 'details',\n  \
  \      'EmailTagKey': 'name',\n        'IncidentsQuery': 'type:Simulation'\n   \
  \ }\n})\n\n"
scripttarget: 0
subtype: python2
tags: []
toversion: 4.1.9
type: python
