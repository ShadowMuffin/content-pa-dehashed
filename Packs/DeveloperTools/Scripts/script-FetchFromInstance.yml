args:
- description: The name of the instance you want to fetch from
  name: instance_name
- defaultValue: 'true'
  description: Whether to expect data to return from the fetch
  name: expect_data
- description: The name of the brand you want to fetch from
  name: brand_name
- auto: PREDEFINED
  defaultValue: 'false'
  description: Add the raw JSON of incidents to context
  name: add_to_context
  predefined:
  - 'true'
  - 'false'
- defaultValue: Error
  description: If this error message appears in the contents of the fetched incidents,
    will return error
  name: error_msg_in_incident
comment: Execute FetchIncident for a given instance
commonfields:
  id: FetchFromInstance
  version: -1
deprecated: false
enabled: true
fromversion: 4.0.0
name: FetchFromInstance
outputs:
- contextPath: FetchedIncidents
  description: All incidents entries (raw JSON)
runonce: false
script: "import re\nfrom distutils.util import strtobool\n\nincidents_context = []\n\
  context = {}\nadd_to_context = bool(strtobool(demisto.args().get('add_to_context')))\n\
  res = []\nbrand_name = demisto.args().get(\"brand_name\")\ninstance_name = None\n\
  if brand_name:\n    context_modules = demisto.getModules()\n    for module_name,\
  \ module in context_modules.iteritems():\n        if module.get(\"brand\") == brand_name\
  \ and module.get('state') == 'active':\n            instance_name = module_name.replace('\
  \ ', '_')\n            break\nelif demisto.args().get(\"instance_name\"):\n    instance_name\
  \ = demisto.args()[\"instance_name\"]\nif not instance_name:\n    raise Exception(\"\
  No instance name was found\")\nexpect_data = False if demisto.args()[\"expect_data\"\
  ] == 'false' else True\ninstance_name = instance_name.replace(\" \",\"_\")\ncommand\
  \ = '!{0}-fetch'.format(instance_name)\n\nresponse = demisto.executeCommand(command,\
  \ {})\n\ntry:\n    if not response and expect_data:\n        raise Exception(\"\
  Error occurred while fetching incidents from {}\".format(instance_name))\n\n   \
  \ for inc in response:\n        contents = inc.get('Contents', '')\n        error_msg_in_incident\
  \ = demisto.args().get('error_msg_in_incident')\n        if error_msg_in_incident\
  \ and error_msg_in_incident in str(contents):\n            return_error(\"Error\
  \ message '{0}' encountered while fetching incidents from {1}: {2}\".format(error_msg_in_incident,\
  \ instance_name, str(contents)))\n        if re.match(\"invalid character \\'[a-zA-Z]\\\
  ' looking for beginning of value\", str(contents), re.IGNORECASE):\n           \
  \ return_error(\"Error occurred while fetching incidents from {0}: {1}\".format(instance_name,\
  \ str(contents)))\n        if add_to_context:\n            try:\n              \
  \  for entry in contents:\n                    raw_json = ''\n                 \
  \   if isinstance(entry, dict):\n                        raw_json = entry.get('rawJSON')\n\
  \                    if raw_json:\n                        incidents_context.append(json.loads(raw_json))\n\
  \            except TypeError:\n                return_error('Could not retrieve\
  \ JSON data from the response contents')\n\n    if not response and not expect_data:\n\
  \        response = \"No data returned\"\n\n    context['FetchedIncidents'] = incidents_context\n\
  \    res.append({\"Type\": entryTypes[\"note\"], \"ContentsFormat\": formats[\"\
  json\"], \"Contents\": response, \"EntryContext\": context})\n\nexcept Exception\
  \ as ex:\n    res.append({\"Type\": entryTypes[\"error\"], \"ContentsFormat\": formats[\"\
  text\"], \"Contents\": str(ex)})\n\ndemisto.results(res)"
scripttarget: 0
subtype: python2
tags: []
tests:
- No test - cannot create a dummy integration inorder to test that
toversion: 4.1.9
type: python
