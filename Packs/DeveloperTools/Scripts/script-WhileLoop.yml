args:
- default: true
  description: Command or Automation script to execute each while loop iteration
  name: cmdToRun
  required: true
- description: 'comma separated list of command/automation arguments and values to
    run: key=val,key=val,key=val'
  name: cmdArguments
  required: true
- description: watch this key, if it is equal to value argument (${key}==value) then
    exit while loop, otherwise continue to next loop iteration (will run command again)
  name: keyToWatch
  required: true
- description: the value that keyToWatch needs to be equal to
  name: value
  required: true
- description: max numbers of iteration loop to preform (default is 100)
  name: maxIterations
- description: time to sleep/wait between iterations in seconds (default is 10)
  name: sleepTime
comment: 'While loop is utility script, to do while loops on specific commands or
  scripts, it will allow you to loop over until some condition is fulfilled (${keyToWatch}
  == value).

  Please make sure timeout of the script also sufficient for the loop.

  '
commonfields:
  id: WhileLoop
  version: -1
deprecated: true
enabled: true
name: WhileLoop
script: "var val = invContext.keyToWatch;\nvar expectedValue = args.value;\nvar argumentsVal\
  \ = args.cmdArguments;\nvar argsArr = argumentsVal.split(\",\");\nvar maxIterations\
  \ = 100;\nvar lastEntry = {};\n\nif ((args.maxIterations) && (args.maxIterations.length\
  \ > 0)) {\n    maxIterations = parseInt(args.maxIterations);\n}\nsleepTime = 10;\n\
  if ((args.sleepTime) && (args.sleepTime.length > 0)) {\n    sleepTime = parseInt(args.sleepTime);\n\
  }\n\nvar argsToCmd = {};\nfor (i = 0; i < argsArr.length ; i++) {\n    var keyval\
  \ = argsArr[i].split(\"=\");\n    if (keyval.length == 2) {\n        argsToCmd[keyval[0]]\
  \ = keyval[1];\n    }\n}\nfor (i = 0; i < maxIterations && (val != expectedValue);\
  \ i++) {\n    lastEntry = executeCommand(args.cmdToRun, argsToCmd );\n    val =\
  \ lastEntry[0].EntryContext[args.keyToWatch];\n    var expectedValueArrived = false;\n\
  \    if (Array.isArray(val)){ // handle case where there is an array of results\
  \ in val, will check each one\n        for (i = 0; i < val.length ; i++) {\n   \
  \         if (val[i]===expectedValue){\n                expectedValueArrived = true;\n\
  \            }\n        }\n    }\n    if (expectedValueArrived) {\n        break;\n\
  \    }\n    wait(sleepTime);\n}\nreturn lastEntry;\n"
scripttarget: 0
tags:
- Utility
timeout: 900ns
toversion: 4.1.9
type: javascript
