args:
- default: true
  description: The System to remote execute on, can be a list of systems
  name: system
  required: true
- description: The osquery query to execute on remote system
  name: query
  required: true
comment: 'Returns the results from a basic OSQuery query on a remote Linux machine.

  For more information read documentation at https://osquery.readthedocs.io/'
commonfields:
  id: OSQueryBasicQuery
  version: -1
dependson:
  must:
  - RemoteExec
name: OSQueryBasicQuery
script: "import json\n\n## ssh command to run, json format, param = query to execute\n\
  COMMAND = 'osqueryi --json \"{0}\"'\n\nsystems = argToList(demisto.args()['system'])\n\
  query = demisto.get(demisto.args(), 'query')\n\nres = []\nerror_res = []\n\nif query\
  \ and systems:\n    for system in systems:\n        temp_res = demisto.executeCommand(\"\
  RemoteExec\", {'cmd' : COMMAND.format(str(query)), 'system': system})\n        if\
  \ isError(temp_res[0]):\n            error_res += [{\"Type\" : entryTypes[\"error\"\
  ], \"ContentsFormat\" : formats[\"text\"], \"Contents\" : 'An Error occurred on\
  \ remote system:\\\"{0}\\\". Error={1}.'.format(system,temp_res[0]['Contents'])}]\n\
  \        else:\n            data = json.loads(temp_res[0]['Contents'])\n       \
  \     res += [{'ContentsFormat': formats['markdown'], 'Type': entryTypes['note'],\
  \ \"Contents\": tblToMd(\"{0} results:\".format(system),data)}]\n\ndemisto.results(res\
  \ + error_res)"
scripttarget: 0
subtype: python2
system: true
tags:
- OSQuery
timeout: 0s
toversion: 4.1.9
type: python
