args:
- default: true
  description: Display a specific watchlist by watchlist ID (numeric)
  name: id
comment: Display all watchlists and their details, queries, etc.
commonfields:
  id: CBWatchlists
  version: -1
dependson:
  must:
  - cb-watchlist-get
name: CBWatchlists
script: "# args: id - Optional - only show the watchlist with this specific ID\ncols\
  \ = ['name','search_query','id','enabled','search_timestamp','last_hit','last_hit_count','total_hits']\n\
  fullcols = ['alliance_id', 'date_added', 'enabled', 'from_alliance', 'group_id',\
  \ 'id', 'index_type', 'last_hit', 'last_hit_count', 'name', 'readonly', 'search_query',\
  \ 'search_timestamp', 'total_hits', 'total_tags']\nres = []\nresCmd1 = demisto.executeCommand(\"\
  cb-watchlist-get\", {\"watchlist-id\" : demisto.args()[\"id\"]} if \"id\" in demisto.args()\
  \ else {})\nfor entry in resCmd1:\n    if isError(entry):\n        res.append(entry)\n\
  \    else:\n        matches = entry[\"Contents\"]\n        if matches:\n       \
  \     if type(matches)==dict:\n                matches = [matches]\n           \
  \ filtered_matches = [{ k: m[k] for k in cols if k in m } for m in matches]\n  \
  \          res.append(  { \"Type\" : entryTypes[\"note\"], \"ContentsFormat\" :\
  \ formats[\"table\"], \"Contents\" : filtered_matches } )\n        else:\n     \
  \       res.append(  { \"Type\" : entryTypes[\"note\"], \"ContentsFormat\" : formats[\"\
  text\"], \"Contents\" : \"No matches.\" } )\ndemisto.results(res)"
scripttarget: 0
subtype: python2
system: true
tags:
- carbon-black
timeout: 0s
toversion: 4.1.9
type: python
