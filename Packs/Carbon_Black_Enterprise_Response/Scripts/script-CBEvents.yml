args:
- default: true
  description: Query to match against events
  name: query
  required: true
comment: Returns all events associated with a process query
commonfields:
  id: CBEvents
  version: -1
dependson:
  must:
  - cb-process
  - process-events
name: CBEvents
script: "//Searches for all processes with a given query - and lists events associated\
  \ with processes.\n//Args - process search query\nvar output = [];\nfunction formatEvents(header,\
  \ pname, pid, segid, arr) {\n    var entry = [];\n    if (typeof (arr) !== 'undefined')\
  \ {\n        for (var i = 0; i < arr.length; i++) {\n            var items = arr[i].split(\"\
  |\");\n            var row = {};\n            row[\"name\"]=pname;\n           \
  \ row[\"pid\"]=pid;\n            row[\"segid\"]=segid;\n            for (var k =\
  \ 0; k < items.length; k++){\n                row[header[k]]=items[k];\n       \
  \     }\n            entry.push(row);\n        }\n        output.push({ContentsFormat:\
  \ formats.table, Type: entryTypes.note, Contents: entry});\n    }\n}\nvar res =\
  \ executeCommand(\"cb-process\", {session: args.sessionid, query: args.query});\n\
  if (res.length > 0) {\n    var list = res[0].Contents.results;\n    if (typeof (list)\
  \ !== 'undefined') {\n        if (list.length === 0) {\n            output.push({ContentsFormat:\
  \ formats.text, Type: entryTypes.note, Contents: \"No results\"});\n        }\n\
  \        for (var i = 0; i < list.length; i++) {\n            var process = list[i];\n\
  \            var res1 = executeCommand(\"process-events\", {pid: process.id.toString(),\
  \ segid: process.segment_id.toString()});\n            var pevent = res1[0].Contents;\n\
  \            formatEvents([\"time\",\"md5\",\"path\"],pevent.process.process_name,process.id,\
  \ process.segment_id, pevent.process.modload_complete);\n            formatEvents([\"\
  type\",\"time\",\"reg path\"],pevent.process.process_name,process.id, process.segment_id,\
  \ pevent.process.regmod_complete);\n            formatEvents([\"type\",\"time\"\
  ,\"file path\",\"last md5\",\"file type\",\"tamper\"],pevent.process.process_name,process.id,\
  \ process.segment_id, pevent.process.filemod_complete);\n            formatEvents([\"\
  time\",\"remote ip\",\"remote port\",\"proto\",\"dns name\",\"outbound\"],pevent.process.process_name,process.id,\
  \ process.segment_id, pevent.process.netconn_complete);\n            formatEvents([\"\
  time\",\"uid\",\"md5\",\"path\",\"pid\",\"started\",\"tamper\"],pevent.process.process_name,process.id,\
  \ process.segment_id, pevent.process.childproc_complete);\n            formatEvents([\"\
  type\",\"time\",\"uid\",\"md5\",\"path\",\"sub-type\",\"access\",\"tamper\"],pevent.process.process_name,process.id,\
  \ process.segment_id, pevent.process.crossproc_complete);\n        }\n    } else\
  \ {\n        output.push(res);\n    }\n}\nreturn output;"
scripttarget: 0
system: true
tags:
- carbon-black
- endpoint
- enhancement
timeout: 0s
toversion: 4.1.9
type: javascript
