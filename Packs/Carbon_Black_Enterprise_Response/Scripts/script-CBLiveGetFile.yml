args:
- default: true
  description: hostname of a Carbon Black sensor
  name: hostname
- description: path to file on system
  name: path
  required: true
- description: ip of a Carbon Black sensor
  name: ip
comment: Use Carbon black Response Live session to retrieve a file from an endpoint.
  Endpoint needs to have a CbResponse sensor deployed.
commonfields:
  id: CBLiveGetFile
  version: -1
dependson:
  must:
  - cb-sensor-info
  - cb-list-sessions
  - cb-session-create
  - cb-session-info
  - cb-command-create
  - cb-command-info
  - cb-file-get
name: CBLiveGetFile
script: "import time\nsecTimeout = 120\n\n# find sensor ID\nif not demisto.get(demisto.args(),\
  \ 'ip') and not demisto.get(demisto.args(), 'hostname'):\n    demisto.results({\
  \ 'Type' : entryTypes['error'], 'ContentsFormat' : formats['text'], 'Contents' :\
  \ 'You must provide ip or hostname for Cb sensor.'})\n    sys.exit()\nelse:\n  \
  \  dArgs = {'ip': demisto.args()['ip']} if demisto.get(demisto.args(), 'ip') else\
  \ {'hostname': demisto.args()['hostname']}\n    resFind = demisto.executeCommand(\
  \ 'cb-sensor-info', dArgs )\n    if isError(resFind[0]):\n        demisto.results(resFind)\n\
  \        sys.exit()\n    else:\n        matches = resFind[0]['Contents']\n     \
  \   if matches:\n            if len(matches) == 1:\n                sensorId = str(matches[0]['id'])\n\
  \            else:\n                demisto.results({ 'Type' : entryTypes['error'],\
  \ 'ContentsFormat' : formats['text'], 'Contents' : 'More than one sensor returned.\\\
  nResult:\\n' + str(matches)})\n                sys.exit()\n        else:\n     \
  \       demisto.results({ 'Type' : entryTypes['error'], 'ContentsFormat' : formats['text'],\
  \ 'Contents' : 'Sensor not found.'})\n            sys.exit()\ndemisto.log('[*] Located\
  \ sensor ID ' + sensorId)\n# Get a live session to the endpoint\nresSessions = demisto.executeCommand(\
  \ 'cb-list-sessions', {} )\nif isError(resSessions[0]):\n    demisto.results(resSessions)\n\
  \    sys.exit()\nelse:\n    existingSessions = [s for s in resSessions[0]['Contents']\
  \ if str(s['sensor_id']) == sensorId and s['status'] in ['pending', 'active']]\n\
  \    if not existingSessions:\n        resSessionCreate = demisto.executeCommand(\
  \ 'cb-session-create', {'sensor': sensorId} )\n        if isError(resSessionCreate[0]):\n\
  \            demisto.results(resSessionCreate + [{ 'Type' : entryTypes['error'],\
  \ 'ContentsFormat' : formats['text'], 'Contents' : 'Error while trying to create\
  \ session.'}])\n            sys.exit()\n        else:\n            sessionId = str(resSessionCreate[0]['Contents']['id'])\n\
  \            demisto.log('[*] Created session ' + sessionId + ' for sensor ' + sensorId\
  \ + '. Waiting for session to become active.')\n    else:\n        es = existingSessions[0]\n\
  \        demisto.log('[*] Found existing %s session %d..' %(es['status'],es['id']))\n\
  \        sessionId = str(es['id'])\n\n    session = {'status':'pending'}\n    resSessionInfo\
  \ = []\n    while session['status'] == 'pending':\n        resSessionInfo = demisto.executeCommand(\
  \ 'cb-session-info', { 'session' : sessionId } )\n        if isError(resSessionInfo[0]):\n\
  \            demisto.results(resSessionInfo + [{ 'Type' : entryTypes['error'], 'ContentsFormat'\
  \ : formats['text'], 'Contents' : 'Error while polling for session status.'}])\n\
  \            sys.exit()\n        else:\n            session = resSessionInfo[0]['Contents']\n\
  \        time.sleep(3)\n    if not session['status'] == 'active':\n        demisto.results(resSessionInfo\
  \ + [{ 'Type' : entryTypes['error'], 'ContentsFormat' : formats['text'], 'Contents'\
  \ : 'Finished polling but session is not in active state.'}])\n        sys.exit()\n\
  \    else:\n        demisto.log('[*] Session ' + sessionId + ' active.')\n\n\n\n\
  \n# Create async command\nresCreate = demisto.executeCommand( 'cb-command-create',\
  \ { 'session' : sessionId, 'name' : 'get file', 'object' : demisto.args()['path']\
  \ } )\n\nif not isError( resCreate[0] ):\n    if len( resCreate ) == 1:\n      \
  \  # Get command id from response\n        cmdID = demisto.get( resCreate[0], 'Contents.id'\
  \ )\n    else:\n        demisto.results( { 'Type' : entryTypes['error'], 'ContentsFormat'\
  \ : formats['text'], 'Contents' : 'Unexpected output returned from command-create.'\
  \ } )\n        sys.exit(0)\nelse:\n    demisto.results(resCreate)\n    sys.exit(0)\n\
  \n# Poll for command completion\nsecRemaining = secTimeout\nwhile secRemaining:\n\
  \    resInfo = demisto.executeCommand( 'cb-command-info', { 'session' : sessionId,\
  \ 'command' : str(cmdID) } )\n    if not isError( resInfo[0] ):\n        if len(\
  \ resInfo ) == 1:\n            status = demisto.get( resInfo[0], 'Contents.status'\
  \ )\n            # If still working\n            if 'pending' == status:\n     \
  \           secRemaining -= 1\n                time.sleep(1)\n            elif 'error'\
  \ == status:\n                demisto.results( { 'Type' : entryTypes['error'], 'ContentsFormat'\
  \ : formats['text'], 'Contents' : 'Command \"get file\" returned error: [Type:'\
  \ + str(demisto.get( resInfo[0], 'Contents.result_type' )) + ' , Code:' + str(int(demisto.get(\
  \ resInfo[0], 'Contents.result_code' ))) + ' , Desc:' + str(demisto.get( resInfo[0],\
  \ 'Contents.result_desc' )) + ' ]' } )\n                sys.exit(0)\n          \
  \  elif 'complete' == status:\n                # Get FileID from command info response\n\
  \                fileID = demisto.get( resInfo[0], 'Contents.file_id' )\n      \
  \          resFileGet = demisto.executeCommand( 'cb-file-get', { 'session' : sessionId,\
  \ 'file-id' : str(fileID) } )\n                if not isError( resFileGet[0] ):\n\
  \                    if len( resFileGet ) == 1:\n                        demisto.results(resFileGet)\n\
  \                        sys.exit(0)\n                    else:\n              \
  \          demisto.results( { 'Type' : entryTypes['error'], 'ContentsFormat' : formats['text'],\
  \ 'Contents' : 'Unexpected output returned from file-get command.' } )\n       \
  \                 sys.exit(0)\n                else:\n                    demisto.results(resFileGet)\n\
  \                    sys.exit(0)\n            else:\n                demisto.results(\
  \ { 'Type' : entryTypes['error'], 'ContentsFormat' : formats['text'], 'Contents'\
  \ : 'Unexpected status \"' + status + '\" returned from command-info.' } )\n   \
  \             sys.exit(0)\n        else:\n            demisto.results( { 'Type'\
  \ : entryTypes['error'], 'ContentsFormat' : formats['text'], 'Contents' : 'Unexpected\
  \ output returned from command-create command.' } )\n            sys.exit(0)\n \
  \   else:\n        demisto.results(resInfo)\n        sys.exit(0)\n\nelse:\n    demisto.results(\
  \ { 'Type' : entryTypes['error'], 'ContentsFormat' : formats['text'], 'Contents'\
  \ : 'Command timed out after %d seconds' % secTimeout } )\n    sys.exit(0)"
scripttarget: 0
subtype: python2
system: true
tags:
- carbon-black
- endpoint
timeout: 300ns
toversion: 4.1.9
type: python
