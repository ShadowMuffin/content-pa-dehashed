args:
- default: true
  description: The text to extract ip from. If object will convert to JSON.
  name: text
  required: true
comment: Deprecated - We recommend using extractIndicators command instead. Extract
  IPs from the given text and place them both as output and in the context of a playbook.
commonfields:
  id: ExtractIP
  version: -1
deprecated: true
enabled: true
name: ExtractIP
outputs:
- contextPath: IP.Address
  description: Extracted IPs
script: "var text = args.text;\nif (typeof text !== 'string') {\n    text = JSON.stringify(args.text).replace(/\\\
  \\n/g,' '); // need to replace \\n\n}\nvar matches = {}, found;\nvar ipStringRegex\
  \ = ipRegex.toString().substring(1,(ipRegex.toString().length - 1));\nvar gm = 'gm';\n\
  var reg = new RegExp(ipStringRegex, gm);\nvar whitelist = getCSVListAsArray('Indicators\
  \ Whitelist');\nwhile (found = reg.exec(text)) {\n    matches[found[0]] = true;\n\
  \    for (var i = 0 ; i < whitelist.length; i++) {\n        if (isIPInSubnet(found[0],whitelist[i]))\
  \ {\n            delete matches[found[0]];\n            break;\n        }\n    }\n\
  }\nvar ec = {};\nec[outputPaths.ip] = []\nvar uniqueMatches = Object.keys(matches);\n\
  var md = '### Extract IP\\n';\nfor (var i=0; i < uniqueMatches.length; i++) {\n\
  \    if (isValidIP(uniqueMatches[i])) {\n        ec[outputPaths.ip].push({Address:\
  \ uniqueMatches[i]});\n        md += '- ' + uniqueMatches[i] + '\\n';\n    }\n}\n\
  return {Type: entryTypes.note, Contents: ec[outputPaths.ip], ContentsFormat: formats.json,\
  \ HumanReadable: md, EntryContext: ec};"
scripttarget: 0
system: true
tags:
- Utility
toversion: 4.1.9
type: javascript
