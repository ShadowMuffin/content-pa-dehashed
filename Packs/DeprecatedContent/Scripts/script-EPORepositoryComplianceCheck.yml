args:
- default: true
  description: Numeric DAT version, e.g. "8260"
  name: requireddatversion
  required: true
- description: comma-separated ePO instance names
  name: repostocheck
comment: Check a list of ePO servers to see if they are up to date.
commonfields:
  id: EPORepositoryComplianceCheck
  version: -1
dependson:
  must:
  - epo-command
deprecated: true
name: EPORepositoryComplianceCheck
script: "def generateText(tbl):\n    return '\\n\\n'.join(['\\n'.join([k + ': ' +\
  \ row[k] for k in row]) for row in tbl])\n\ndef generateHtml(cols, tbl):\n    html\
  \ = \"\"\n    if tbl and isinstance(tbl, list) and len(tbl) > 0:\n        html =\
  \ \"\"\"<style type=\"text/css\">\n.tg  {border-collapse:collapse;border-spacing:0;border-color:#bbb;}\n\
  .tg td{font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:#888;color:#594F4F;}\n\
  .tg th{font-family:Arial, sans-serif;font-size:14px;font-weight:normal;padding:5px\
  \ 15px 5px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:#888;color:#493F3F;}\n\
  .tg .tg-9zxc{vertical-align:top;text-align:left; }\n.tg .tg-x1ca{background-color:#dfdfdf;vertical-align:top;text-align:center;font-weight:bold;}\n\
  </style>\n<table class=\"tg\">\n  <tr>\"\"\"\n        for colName in cols:\n   \
  \         html += '<th class=\"tg-x1ca\">' + colName + '</th>'\n        html +=\
  \ '</tr>'\n        for row in tbl:\n            html += '<tr>'\n            for\
  \ colName in cols:\n                html += '<th class=\"tg-9zxc\">' + flattenCell(row[colName]).replace('\\\
  n','<br/>') + '</th>'\n            html += '</tr>'\n        html += '</table>'\n\
  \    return html\n\nFAULTY_THRESHOLD = 2.0\nres = []\nrepos = demisto.get(demisto.args(),\
  \ 'repostocheck')\nif not repos:\n    res.append({\"Type\": entryTypes[\"error\"\
  ], \"ContentsFormat\": formats[\"text\"], \"Contents\": \"Received empty repository\
  \ list!\"})\nelse:\n    repos = ','.join(repos) if isinstance(repos, list) else\
  \ repos\n    reqDat = demisto.get(demisto.args(), 'requireddatversion')\n    # Find\
  \ the VSCANDAT1000 Package\n    dArgs = {\"using\": repos,\n             \"command\"\
  : \"repository.findPackages\",\n             \"params\": \"searchText=VSCANDAT1000\"\
  \n            }\n    noncompliant = []\n    faulty = {}\n    tbl = []\n    resCmdName\
  \ = demisto.executeCommand('epo-command', dArgs)\n    try:\n        for entry in\
  \ resCmdName:\n            if isError(entry):\n                res = resCmdName\n\
  \                break\n            else:\n                repoName = entry['ModuleName']\n\
  \                myData = demisto.get(entry, 'Contents.response')[0]['productDetectionProductVersion']\n\
  \                if float(myData)<float(reqDat):\n                    if (float(reqDat)\
  \ - float(myData)) >= FAULTY_THRESHOLD:\n                        status = \"Faulty\"\
  \n                        faulty[repoName] = str(myData)\n                    else:\n\
  \                        status = \"Not compliant\"\n                    noncompliant.append(repoName)\n\
  \                    #demisto.log(repoName + ' is noncompliant - using DAT version\
  \ ' + myData)\n                else:\n                    status = \"OK\"\n    \
  \                #demisto.log(repoName + ' is OK - using DAT version ' + myData)\n\
  \                tbl.append({'Repository': repoName, 'Version of DAT': myData, 'Status':\
  \ status })\n    except Exception as ex:\n        res.append({\"Type\": entryTypes[\"\
  error\"], \"ContentsFormat\": formats[\"text\"],\n                    \"Contents\"\
  : \"Error occurred while parsing output from command. Exception info:\\n\" + str(ex)\
  \ + \"\\n\\nInvalid output:\\n\" + str(resCmdName)})\n\n    demisto.setContext('olddatrepos',\
  \ noncompliant)\n    demisto.setContext('faultyrepos', faulty.keys())\n    demisto.setContext('faultyrepostext',\
  \ \"The following repositories were found to be faulty with old DAT versions:\\\
  n\" + '\\n'.join([k + ': DAT version ' + faulty[k] for k in faulty]))\n    demisto.setContext('repocomplianceresultshtml',\
  \ generateHtml(('Repository', 'Version of DAT', 'Status'), tbl))\n    demisto.setContext('repocomplianceresultstext',\
  \ generateText(tbl))\n    res.append({\"Type\": entryTypes[\"note\"], \"ContentsFormat\"\
  : formats[\"table\"], \"Contents\": tbl})\n    answer = \"yes\" if noncompliant\
  \ else \"no\"\n    res.append({\"Type\": entryTypes[\"note\"], \"ContentsFormat\"\
  : formats[\"text\"], \"Contents\": answer})\ndemisto.results(res)\n"
scripttarget: 0
subtype: python2
system: true
tags:
- epo
timeout: 0s
toversion: 4.1.9
type: python
