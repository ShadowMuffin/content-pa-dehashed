args:
- default: true
  description: The event ID, or list of IDs (will return PCAP Info for each)
  name: eventId
  required: true
comment: Retrieve information about a PCAP related to the specified event.
commonfields:
  id: PWEventPcapInfo
  version: -1
dependson:
  must:
  - ProtectWise|||event-pcap-info
deprecated: true
name: PWEventPcapInfo
script: "res = []\ndArgs = demisto.args()\ndArgs[\"using-brand\"] = \"ProtectWise\"\
  \neventids = argToList(demisto.get(dArgs, 'eventId'))\ninfos = []\nfor eid in eventids:\n\
  \    dArgs['eventId'] = eid\n    resCmd = demisto.executeCommand(\"event-pcap-info\"\
  , dArgs)\n    try:\n        for entry in resCmd:\n            if isError(entry):\n\
  \                res = resCmd\n                break\n            else:\n      \
  \          myData = demisto.get(entry, 'Contents')\n                if myData and\
  \ isinstance(myData, dict):\n                    for field in myData:\n        \
  \                myData[field] = formatCell(myData[field])\n                   \
  \ infos += [myData]\n                else:\n                    res.append({\"Type\"\
  : entryTypes[\"error\"], \"ContentsFormat\": formats[\"text\"],\n              \
  \                  \"Contents\": \"Could not extract result list from response:\
  \ \" + json.dumps(entry[\"Contents\"], indent=4)})\n    except Exception as ex:\n\
  \        res.append({\"Type\": entryTypes[\"error\"], \"ContentsFormat\": formats[\"\
  text\"],\n                    \"Contents\": \"Error occurred while parsing output\
  \ from command. Exception info:\\n\" + str(ex) + \"\\n\\nInvalid output:\\n\" +\
  \ str(resCmd)})\nres.append({\"Type\": entryTypes[\"note\"], \"ContentsFormat\"\
  : formats[\"table\"], \"Contents\": infos})\ndemisto.results(res)\n"
scripttarget: 0
subtype: python2
system: true
tags:
- protectwise
timeout: 0s
toversion: 4.1.9
type: python
