args:
- default: true
  description: userKey - Identifies the user in the API request. The value can be
    the user's primary email address, alias email address, or unique user ID.
  name: userKey
- description: 'What subset of fields to fetch for this user, Acceptable values are:
    "basic": Do not include any custom fields for the user. (default), "custom": Include
    custom fields from schemas requested in customFieldMask, "full": Include all fields
    associated with this user.'
  name: projection
- auto: PREDEFINED
  description: Whether to fetch the administrator-only or domain-wide public view
    of the user, will use admin_view(Results include both administrator-only and domain-public
    fields for the user) by default, if true will use "domain_public"(Results only
    include fields for the user that are publicly visible to other users in the domain)
  name: viewTypePublicDomain
- description: A comma-separated list of schema names. All fields from these schemas
    are fetched. This should only be set when projection=custom.
  name: customFieldMask
comment: Fetch info on specific user
commonfields:
  id: GoogleappsGetUser
  version: -1
dependson:
  must:
  - googleapps-get-user
deprecated: true
name: GoogleappsGetUser
script: "import re\n\nargs = demisto.args()\nfor key in args.keys():\n    args[re.sub(r'([A-Z])',lambda\
  \ x:'-'+x.group(1).lower(),key)] = args.pop(key)\n\nresp = demisto.executeCommand(\"\
  googleapps-get-user\", args)\n\nif isError(resp[0]):\n    demisto.results(resp)\n\
  else:\n    data = demisto.get(resp[0], \"Contents\")\n    if data:\n        data\
  \ = data if isinstance(data, list) else [data]\n        data = [{k: formatCell(row[k])\
  \ for k in row} for row in data]\n        demisto.results({\"ContentsFormat\": formats[\"\
  table\"], \"Type\": entryTypes[\"note\"], \"Contents\": data} )\n    else:\n   \
  \     demisto.results(\"No results.\")\n"
scripttarget: 0
subtype: python2
system: true
tags:
- google apps
timeout: 0s
toversion: 4.1.9
type: python
