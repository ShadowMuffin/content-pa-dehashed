args:
- default: true
  description: md5 hash(es) to find (comma-separated)
  name: md5
  required: true
comment: Search Carbon Black for connection to specified md5 hash(es).
commonfields:
  id: CBFindHash
  version: -1
dependson:
  must:
  - cb-binary
deprecated: true
name: CBFindHash
script: "import json\nres = []\nt = []\nfound = []\nfileData = {}\nmd5s = argToList(demisto.args()['md5'])\n\
  for md5 in md5s:\n    for e in demisto.executeCommand('cb-binary',{'query': 'md5:'\
  \ + md5}):\n        if isError(e):\n            res.append(e)\n        else:\n \
  \           myData = demisto.get(e, 'Contents')\n            if myData:\n      \
  \          found.append(md5)\n                myData = json.loads(myData)\n    \
  \            fileData[md5] = (myData[0]['observed_filename'][0], myData[0]['endpoint'][0].split('|')[0])\n\
  \                t += [{k: formatCell(row[k]) for k in row} for row in myData]\n\
  if t:\n    appendContext(\"found_hashes\", ','.join(found), dedup=True)\n    demisto.setContext(\"\
  found_file_locations\", json.dumps(fileData))\n    demisto.results( {'ContentsFormat':\
  \ formats['table'], 'Type': entryTypes['note'], 'Contents': t} )\nelse:\n    demisto.results(\
  \ {'ContentsFormat': formats['text'], 'Type': entryTypes['note'], 'Contents': 'No\
  \ results.'} )\ndemisto.results(res)"
scripttarget: 0
subtype: python2
system: true
tags:
- carbon-black
- endpoint
- enhancement
tests:
- No test
timeout: 0s
toversion: 4.1.9
type: python
