args:
- default: true
  description: Names of packages to approve
  name: approvedpackages
  required: true
comment: Approve all pending actions using the specified package names.
commonfields:
  id: TaniumApprovePendingActions
  version: -1
dependson:
  must:
  - tn-add-object
  - tn-get-object
deprecated: true
name: TaniumApprovePendingActions
outputs:
- contextPath: Tanium.Action.Approve.Name
  description: Action name
- contextPath: Tanium.Action.State
  description: Action state
- contextPath: Tanium.Action.Comment
  description: Tanium comment
- contextPath: Tanium.Action.PackageName
  description: Tanium package name
- contextPath: Tanium.Action.PackageID
  description: Tanium package id
script: "//var approvedPackageNames = [\"Disable Java Auto Update\"];\nvar approvedPackageNames\
  \ = args.approvedpackages.split(',');\nvar fieldsToDisplay = [\"name\", \"package_spec\"\
  ,\"comment\"]; //, \"approver\"];\n\nvar requestPendingObjects = \"<object_list>\\\
  \n                <saved_actions/>\\\n            </object_list>\\\n           \
  \ <options>\\\n                <row_start>0</row_start>\\\n                <row_count>200</row_count>\\\
  \n                <cache_expiration>300</cache_expiration>\\\n                <cache_sort_fields>name,-id</cache_sort_fields>\\\
  \n                <include_user_details>1</include_user_details>\\\n           \
  \     <use_json>1</use_json>\\\n                <cache_filters>\\\n            \
  \        <filter>\\\n                        <field>approved_flag</field>\\\n  \
  \                      <value>0</value>\\\n                        <type>Numeric</type>\\\
  \n                        <operator>eq</operator>\\\n                    </filter>\\\
  \n                </cache_filters>\\\n            </options>\";\n\n\nvar requestActionApproval\
  \ = \"<object_list> \\\n                <saved_action_approval>\\\n            \
  \        <id>{0}</id>\\\n                    <approved_flag>1</approved_flag>\\\n\
  \                </saved_action_approval>\\\n            </object_list>\\\n    \
  \        <options>\\\n                <include_user_details>1</include_user_details>\\\
  \n                <use_json>1</use_json>\\\n            </options>\";\n\n// Send\
  \ a request to Tanium to approve the given action\nfunction approveAction(savedAction)\
  \ {\n    var addObjArgs = {};\n    addObjArgs[\"object-data\"] = requestActionApproval.replace('{0}',savedAction.id);\n\
  \    var res = executeCommand('tn-add-object', addObjArgs);\n    if (1 < res.length)\n\
  \        return \"Error, tn-add-object returned more than one entry! Returned: \"\
  \ + JSON.stringify(res) + '\\n';\n    else\n        return res[0];\n}\n\n// Format\
  \ a saved action as a table row, filtering unwanted fields.\nfunction formatAsRow(jsonSavedAction,fieldsToDisplay)\
  \ {\n  d = {};\n  for (var k in jsonSavedAction)\n    if (fieldsToDisplay.indexOf(k)>-1)\n\
  \      d[k] = jsonSavedAction[k];\n  return d;\n}\n\nvar getObjArgs = {};\ngetObjArgs[\"\
  object-data\"] = requestPendingObjects;\n\nvar res = executeCommand('tn-get-object',\
  \ getObjArgs);\nvar entry = {\n    Type: 1,\n    ContentsFormat: 'json',\n    Contents:\
  \ [],\n    ReadableContentsFormat: formats.markdown,\n    HumanReadable: \"\"\n\
  };\n\nresponseData = res[0].Contents.Envelope.Body.return.result_object;\nrespObj\
  \ = JSON.parse(responseData);\nvar savedActions = [];\nnResultObjects = respObj.result_objects.length;\n\
  for (var i=0; i < nResultObjects; i++) {\n    resultObj = respObj.result_objects[i];\n\
  \    nItems = resultObj.saved_actions.length;\n\n    for (var j=0; j < nItems; j++)\
  \ {\n        // Skip any items not named saved_actions - e.g. skip cache_info item\n\
  \        if (\"saved_action\" in resultObj.saved_actions[j] ) {\n            savedActions.push(resultObj.saved_actions[j].saved_action);\n\
  \        }\n    }\n}\n\nvar approvedSummary=[];\nfor (var i=0; i < savedActions.length;\
  \ i++) {\n    if (approvedPackageNames.indexOf(savedActions[i].package_spec.name)\
  \ > -1) {\n        approvalResult = approveAction(savedActions[i]);\n        //\
  \ Check the response - if we received saved_action_approval with approved_flag==1\n\
  \        // and the correct id (matches the task we wanted to approve), then add\
  \ the action to the list as successfully approved\n        var objList = approvalResult.Contents.Envelope.Body.return.object_list;\n\
  \        if (Object.keys(objList).indexOf('saved_action_approval')>-1 &&\n     \
  \       objList.saved_action_approval.approved_flag == 1 &&\n            objList.saved_action_approval.id\
  \ == savedActions[i].id)\n\n            approvedSummary.push(savedActions[i]);\n\
  \        else\n            log(\"Failed to approve action:\\n\" + JSON.stringify(savedActions[i])\
  \ + \"\\nResults returned:\\n\" + JSON.stringify(approvalResult) + \"\\n\");\n \
  \   }\n}\n\nif (0 === approvedSummary.length)\n    return \"No actions were approved.\"\
  ;\nelse {\n    for (var i=0; i < approvedSummary.length; i++)\n        entry.Contents.push(formatAsRow(approvedSummary[i],fieldsToDisplay));\n\
  \n    entry.HumanReadable = tableToMarkdown(\"Tanium approve pending actions\",\
  \ entry.Contents, null);\n    var savedActions = cleanObject(entry.Contents);\n\
  \    if (!(entry.Contents instanceof Array)) {\n      savedActions = [savedActions];\n\
  \    }\n    var actionsForContext = [];\n    for (var s in savedActions) {\n   \
  \   actionsForContext.push({\n        State: \"Pending\",\n        Name: savedActions[s].name,\n\
  \        Comment: savedActions[s].comment,\n        AvailableTime: savedActions[s].package_spec.available_time,\n\
  \        ID: savedActions[s].package_spec.id,\n        PackageName: savedActions[s].package_spec.name\n\
  \      });\n    }\n    entry.EntryContext = {\n              'Tanium.Action(val.ID\
  \ == obj.ID)': actionsForContext\n          };\n    return entry;\n}\n"
scripttarget: 0
tags:
- tanium
timeout: 0s
toversion: 4.1.9
type: javascript
