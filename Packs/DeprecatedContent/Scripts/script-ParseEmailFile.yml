args:
- default: true
  description: Entry ID with the Email as a file in msg or eml format
  name: entryid
  required: true
comment: Parse an email from an eml or msg file and populate all relevant context
  data to investigate the email. Also extracts inner attachments and returns them
  to the war room. The incident labels themselves are preserved and not modified -
  only the "Label/x" context items that originated from the labels, and the best practice
  is to rely on these for the remainder of the playbook. Requires pip and access to
  python repository to install "olefile" package. This script is deprecated, use ParseEmailFiles.
commonfields:
  id: ParseEmailFile
  version: -1
deprecated: true
name: ParseEmailFile
runas: DBotWeakRole
runonce: false
script: "#\n# DEPRECATED: Replaced by ParseEmailFiles\n#\n# -*- coding: utf-8 -*-\n\
  # !/usr/bin/env python\nfrom email import message_from_string\nfrom email.header\
  \ import decode_header\nfrom base64 import b64decode\n\nimport sys\nimport email.utils\n\
  from email.parser import HeaderParser\n\n\n# Based on MS-OXMSG protocol specification\n\
  # ref:https://blogs.msdn.microsoft.com/openspecification/2010/06/20/msg-file-format-rights-managed-email-message-part-2/\n\
  # ref:https://msdn.microsoft.com/en-us/library/cc463912(v=EXCHG.80).aspx\nimport\
  \ email\nimport re\nimport codecs\nimport os\nimport unicodedata\nfrom email import\
  \ encoders\nfrom email.header import Header\nfrom email.mime.audio import MIMEAudio\n\
  from email.mime.base import MIMEBase\nfrom email.mime.image import MIMEImage\nfrom\
  \ email.mime.multipart import MIMEMultipart\nfrom email.mime.text import MIMEText\n\
  \nfrom olefile import OleFileIO, isOleFile\n\n# coding=utf-8\nfrom datetime import\
  \ datetime, timedelta\nfrom struct import unpack\n\nreload(sys)\nsys.setdefaultencoding('utf8')\n\
  \n\"\"\"\nhttps://github.com/vikramarsid/msg_parser\n\nCopyright (c) 2009-2018 Vikram\
  \ Arsid <vikramarsid@gmail.com>\n\nRedistribution and use in source and binary forms,\
  \ with or without modification, are\npermitted provided that the following conditions\
  \ are met:\n\n   1. Redistributions of source code must retain the above copyright\
  \ notice, this list of\n      conditions and the following disclaimer.\n\n   2.\
  \ Redistributions in binary form must reproduce the above copyright notice, this\
  \ list\n   of conditions and the following disclaimer in the documentation and/or\
  \ other materials\n   provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED\
  \ BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS\nOR IMPLIED\
  \ WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\nMERCHANTABILITY\
  \ AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE\nCOPYRIGHT\
  \ HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n\
  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT\
  \ OF SUBSTITUTE\nGOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\
  \ HOWEVER CAUSED\nAND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\
  \ OR TORT (INCLUDING\nNEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\
  \ OF THIS SOFTWARE, EVEN IF ADVISED\nOF THE POSSIBILITY OF SUCH DAMAGE.\n\n\"\"\"\
  \n\nDATA_TYPE_MAP = {\n    \"0x0000\": \"PtypUnspecified\",\n    \"0x0001\": \"\
  PtypNull\",\n    \"0x0002\": \"PtypInteger16\",\n    \"0x0003\": \"PtypInteger32\"\
  ,\n    \"0x0004\": \"PtypFloating32\",\n    \"0x0005\": \"PtypFloating64\",\n  \
  \  \"0x0006\": \"PtypCurrency\",\n    \"0x0007\": \"PtypFloatingTime\",\n    \"\
  0x000A\": \"PtypErrorCode\",\n    \"0x000B\": \"PtypBoolean\",\n    \"0x000D\":\
  \ \"PtypObject\",\n    \"0x0014\": \"PtypInteger64\",\n    \"0x001E\": \"PtypString8\"\
  ,\n    \"0x001F\": \"PtypString\",\n    \"0x0040\": \"PtypTime\",\n    \"0x0048\"\
  : \"PtypGuid\",\n    \"0x00FB\": \"PtypServerId\",\n    \"0x00FD\": \"PtypRestriction\"\
  ,\n    \"0x00FE\": \"PtypRuleAction\",\n    \"0x0102\": \"PtypBinary\",\n    \"\
  0x1002\": \"PtypMultipleInteger16\",\n    \"0x1003\": \"PtypMultipleInteger32\"\
  ,\n    \"0x1004\": \"PtypMultipleFloating32\",\n    \"0x1005\": \"PtypMultipleFloating64\"\
  ,\n    \"0x1006\": \"PtypMultipleCurrency\",\n    \"0x1007\": \"PtypMultipleFloatingTime\"\
  ,\n    \"0x1014\": \"PtypMultipleInteger64\",\n    \"0x101F\": \"PtypMultipleString\"\
  ,\n    \"0x101E\": \"PtypMultipleString8\",\n    \"0x1040\": \"PtypMultipleTime\"\
  ,\n    \"0x1048\": \"PtypMultipleGuid\",\n    \"0x1102\": \"PtypMultipleBinary\"\
  \n}\n\n\nclass DataModel(object):\n\n    def __init__(self):\n        self.data_type_name\
  \ = None\n\n    @staticmethod\n    def lookup_data_type_name(data_type):\n     \
  \   return DATA_TYPE_MAP.get(data_type)\n\n    def get_value(self, data_value, data_type_name=None,\
  \ data_type=None):\n\n        if data_type_name:\n            self.data_type_name\
  \ = data_type_name\n        elif data_type:\n            self.data_type_name = self.lookup_data_type_name(data_type)\n\
  \        else:\n            raise Exception(\"required arguments not provided to\
  \ the constructor of the class.\")\n\n        if not hasattr(self, self.data_type_name):\n\
  \            return None\n        value = getattr(self, self.data_type_name)(data_value)\n\
  \        return value\n\n    @staticmethod\n    def PtypUnspecified(data_value):\n\
  \        return data_value\n\n    @staticmethod\n    def PtypNull(data_value):\n\
  \        return None\n\n    @staticmethod\n    def PtypInteger16(data_value):\n\
  \        return int(data_value.encode('hex'), 16)\n\n    @staticmethod\n    def\
  \ PtypInteger32(data_value):\n        return int(data_value.encode('hex'), 32)\n\
  \n    @staticmethod\n    def PtypFloating32(data_value):\n        return unpack('f',\
  \ data_value)[0]\n\n    @staticmethod\n    def PtypFloating64(data_value):\n   \
  \     return unpack('d', data_value)[0]\n\n    @staticmethod\n    def PtypCurrency(data_value):\n\
  \        return data_value\n\n    @staticmethod\n    def PtypFloatingTime(data_value):\n\
  \        return data_value\n\n    @staticmethod\n    def PtypErrorCode(data_value):\n\
  \        return unpack('I', data_value)[0]\n\n    @staticmethod\n    def PtypBoolean(data_value):\n\
  \        return unpack('B', data_value[0])[0] != 0\n\n    @staticmethod\n    def\
  \ PtypObject(data_value):\n        if data_value and '\\x00' in data_value:\n  \
  \          pass\n            # data_value = data_value.replace('\\x00', '')\n  \
  \      return data_value\n\n    @staticmethod\n    def PtypInteger64(data_value):\n\
  \        return unpack('q', data_value)[0]\n\n    @staticmethod\n    def PtypString8(data_value):\n\
  \        if data_value and '\\x00' in data_value:\n            data_value = data_value.replace('\\\
  x00', '')\n        return data_value\n\n    @staticmethod\n    def PtypString(data_value):\n\
  \        if data_value:\n            try:\n                data_value = data_value.decode('ascii').replace('\\\
  x00', '')\n            except UnicodeDecodeError:\n                data_value =\
  \ data_value.decode(\"utf-16-le\", errors=\"ignore\").replace('\\x00', '')\n\n \
  \       return data_value\n\n    @staticmethod\n    def PtypTime(data_value):\n\
  \        return get_time(data_value)\n\n    @staticmethod\n    def PtypGuid(data_value):\n\
  \        return data_value\n\n    @staticmethod\n    def PtypServerId(data_value):\n\
  \        return data_value\n\n    @staticmethod\n    def PtypRestriction(data_value):\n\
  \        return data_value\n\n    @staticmethod\n    def PtypRuleAction(data_value):\n\
  \        return data_value\n\n    @staticmethod\n    def PtypBinary(data_value):\n\
  \        if data_value and '\\x00' in data_value:\n            data_value = data_value.replace('\\\
  x00', '')\n        return data_value\n\n    @staticmethod\n    def PtypMultipleInteger16(data_value):\n\
  \        entry_count = len(data_value) / 2\n        return [unpack('h', bytes[i\
  \ * 2:(i + 1) * 2])[0] for i in range(entry_count)]\n\n    @staticmethod\n    def\
  \ PtypMultipleInteger32(data_value):\n        entry_count = len(data_value) / 4\n\
  \        return [unpack('i', bytes[i * 4:(i + 1) * 4])[0] for i in range(entry_count)]\n\
  \n    @staticmethod\n    def PtypMultipleFloating32(data_value):\n        entry_count\
  \ = len(data_value) / 4\n        return [unpack('f', bytes[i * 4:(i + 1) * 4])[0]\
  \ for i in range(entry_count)]\n\n    @staticmethod\n    def PtypMultipleFloating64(data_value):\n\
  \        entry_count = len(data_value) / 8\n        return [unpack('d', bytes[i\
  \ * 8:(i + 1) * 8])[0] for i in range(entry_count)]\n\n    @staticmethod\n    def\
  \ PtypMultipleCurrency(data_value):\n        return data_value\n\n    @staticmethod\n\
  \    def PtypMultipleFloatingTime(data_value):\n        entry_count = len(data_value)\
  \ / 8\n        return [get_floating_time(bytes[i * 8:(i + 1) * 8]) for i in range(entry_count)]\n\
  \n    @staticmethod\n    def PtypMultipleInteger64(data_value):\n        entry_count\
  \ = len(data_value) / 8\n        return [unpack('q', bytes[i * 8:(i + 1) * 8])[0]\
  \ for i in range(entry_count)]\n\n    @staticmethod\n    def PtypMultipleString(data_value):\n\
  \        # string_list = []\n        # for item_bytes in data_value:\n        #\
  \     if item_bytes and '\\x00' in item_bytes:\n        #         item_bytes = item_bytes.replace('\\\
  x00', '')\n        #     string_list.append(item_bytes.decode('utf-16-le'))\n  \
  \      return data_value\n\n    @staticmethod\n    def PtypMultipleString8(data_value):\n\
  \        return data_value\n\n    @staticmethod\n    def PtypMultipleTime(data_value):\n\
  \        entry_count = len(data_value) / 8\n        return [get_time(bytes[i * 8:(i\
  \ + 1) * 8]) for i in range(entry_count)]\n\n    @staticmethod\n    def PtypMultipleGuid(data_value):\n\
  \        entry_count = len(data_value) / 16\n        return [bytes[i * 16:(i + 1)\
  \ * 16] for i in range(entry_count)]\n\n    @staticmethod\n    def PtypMultipleBinary(data_value):\n\
  \        return data_value\n\n\ndef get_floating_time(data_value):\n    return datetime(\n\
  \        year=1899, month=12, day=30\n    ) + timedelta(\n        days=unpack('d',\
  \ data_value)[0]\n    )\n\n\ndef get_time(data_value):\n    return datetime(\n \
  \       year=1601, month=1, day=1\n    ) + timedelta(\n        microseconds=unpack('q',\
  \ data_value)[0] / 10.0\n    )\n\n\ndef get_multi_value_offsets(data_value):\n \
  \   ul_count = unpack('I', data_value[:4])[0]\n\n    if ul_count == 1:\n       \
  \ rgul_data_offsets = [8]\n    else:\n        rgul_data_offsets = [unpack('Q', bytes[4\
  \ + i * 8:4 + (i + 1) * 8])[0] for i in range(ul_count)]\n\n    rgul_data_offsets.append(len(data_value))\n\
  \n    return ul_count, rgul_data_offsets\n\n\nclass EmailFormatter(object):\n  \
  \  def __init__(self, msg_object):\n        self.msg_obj = msg_object\n        self.message\
  \ = MIMEMultipart()\n        self.message.set_charset('utf-8')\n\n    def build_email(self):\n\
  \n        # Setting Message ID\n        self.message.set_param(\"Message-ID\", self.msg_obj.message_id)\n\
  \n        # Encoding for unicode subject\n        self.message['Subject'] = Header(self.msg_obj.subject,\
  \ charset='UTF-8')\n\n        # Setting Date Time\n        # Returns a date string\
  \ as specified by RFC 2822, e.g.: Fri, 09 Nov 2001 01:08:47 -0000\n        self.message['Date']\
  \ = str(self.msg_obj.sent_date)\n\n        # At least one recipient is required\n\
  \        # Required fromAddress\n        from_address = flatten_list(self.msg_obj.sender)\n\
  \        if from_address:\n            self.message['From'] = from_address\n\n \
  \       to_address = flatten_list(self.msg_obj.header_dict.get(\"To\"))\n      \
  \  if to_address:\n            self.message['To'] = to_address\n\n        cc_address\
  \ = flatten_list(self.msg_obj.header_dict.get(\"CC\"))\n        if cc_address:\n\
  \            self.message['CC'] = cc_address\n\n        bcc_address = flatten_list(self.msg_obj.header_dict.get(\"\
  BCC\"))\n        if bcc_address:\n            self.message['BCC'] = bcc_address\n\
  \n        # Add reply-to\n        reply_to = flatten_list(self.msg_obj.reply_to)\n\
  \        if reply_to:\n            self.message.add_header('reply-to', reply_to)\n\
  \        else:\n            self.message.add_header('reply-to', from_address)\n\n\
  \        # Required Email body content\n        body_content = self.msg_obj.body\n\
  \        if body_content:\n            if \"<html>\" in body_content:\n        \
  \        body_type = 'html'\n            else:\n                body_type = 'plain'\n\
  \n            body = MIMEText(_text=body_content, _subtype=body_type, _charset=\"\
  UTF-8\")\n            self.message.attach(body)\n        else:\n            raise\
  \ KeyError(\"Missing email body\")\n\n        # Add message preamble\n        self.message.preamble\
  \ = 'You will not see this in a MIME-aware mail reader.\\n'\n\n        # Optional\
  \ attachments\n        attachments = self.msg_obj.attachments\n        if attachments:\n\
  \            self._process_attachments(self.msg_obj.attachments)\n\n        # composed\
  \ email\n        composed = self.message.as_string()\n\n        return composed\n\
  \n    def save_file(self, file_path):\n\n        eml_content = self.build_email()\n\
  \n        file_name = str(self.message['Subject']) + \".eml\"\n\n        eml_file_path\
  \ = os.path.join(file_path, file_name)\n\n        with codecs.open(eml_file_path,\
  \ mode=\"wb+\", encoding=\"utf-8\") as eml_file:\n            eml_file.write(eml_content.decode(\"\
  utf-8\"))\n\n        return eml_file_path\n\n    def _process_attachments(self,\
  \ attachments):\n        for attachment in attachments:\n            ctype = attachment.AttachMimeTag\n\
  \            data = attachment.data\n            filename = attachment.DisplayName\n\
  \            maintype, subtype = ctype.split('/', 1)\n\n            if maintype\
  \ == 'text' or \"message\" in maintype:\n                attach = MIMEText(data,\
  \ _subtype=subtype)\n            elif maintype == 'image':\n                attach\
  \ = MIMEImage(data, _subtype=subtype)\n            elif maintype == 'audio':\n \
  \               attach = MIMEAudio(data, _subtype=subtype)\n            else:\n\
  \                attach = MIMEBase(maintype, subtype)\n                attach.set_payload(data)\n\
  \n                # Encode the payload using Base64\n                encoders.encode_base64(attach)\n\
  \            # Set the filename parameter\n            base_filename = os.path.basename(filename)\n\
  \            attach.add_header('Content-ID', '<{}>'.format(base_filename))\n   \
  \         attach.add_header('Content-Disposition', 'attachment', filename=base_filename)\n\
  \            self.message.attach(attach)\n\n\ndef flatten_list(string_list):\n \
  \   if string_list and isinstance(string_list, list):\n        string = \",\".join(string_list)\n\
  \        return string\n    return None\n\n\ndef normalize(input_str):\n    if not\
  \ input_str:\n        return input_str\n    try:\n        if isinstance(input_str,\
  \ list):\n            input_str = [s.decode('ascii') for s in input_str]\n     \
  \   else:\n            input_str.decode('ascii')\n        return input_str\n   \
  \ except UnicodeError:\n        if not isinstance(input_str, unicode):\n       \
  \     input_str = str(input_str).decode(\"utf-8\", \"replace\")\n        normalized\
  \ = unicodedata.normalize('NFKD', input_str)\n        if not normalized.strip():\n\
  \            normalized = input_str.encode('unicode-escape').decode('utf-8')\n\n\
  \        return normalized\n\n\n# coding=utf-8\n# autogenerated using ms_props_generator.py\n\
  PROPS_ID_MAP = {\n    \"0x0001\": {\n        \"data_type\": \"0x0102\",\n      \
  \  \"name\": \"TemplateData\"\n    },\n    \"0x0002\": {\n        \"data_type\"\
  : \"0x000B\",\n        \"name\": \"AlternateRecipientAllowed\"\n    },\n    \"0x0004\"\
  : {\n        \"data_type\": \"0x0102\",\n        \"name\": \"ScriptData\"\n    },\n\
  \    \"0x0005\": {\n        \"data_type\": \"0x000B\",\n        \"name\": \"AutoForwarded\"\
  \n    },\n    \"0x000F\": {\n        \"data_type\": \"0x0040\",\n        \"name\"\
  : \"DeferredDeliveryTime\"\n    },\n    \"0x0010\": {\n        \"data_type\": \"\
  0x0040\",\n        \"name\": \"DeliverTime\"\n    },\n    \"0x0015\": {\n      \
  \  \"data_type\": \"0x0040\",\n        \"name\": \"ExpiryTime\"\n    },\n    \"\
  0x0017\": {\n        \"data_type\": \"0x0003\",\n        \"name\": \"Importance\"\
  \n    },\n    \"0x001A\": {\n        \"data_type\": \"0x001F\",\n        \"name\"\
  : \"MessageClass\"\n    },\n    \"0x0023\": {\n        \"data_type\": \"0x000B\"\
  ,\n        \"name\": \"OriginatorDeliveryReportRequested\"\n    },\n    \"0x0025\"\
  : {\n        \"data_type\": \"0x0102\",\n        \"name\": \"ParentKey\"\n    },\n\
  \    \"0x0026\": {\n        \"data_type\": \"0x0003\",\n        \"name\": \"Priority\"\
  \n    },\n    \"0x0029\": {\n        \"data_type\": \"0x000B\",\n        \"name\"\
  : \"ReadReceiptRequested\"\n    },\n    \"0x002A\": {\n        \"data_type\": \"\
  0x0040\",\n        \"name\": \"ReceiptTime\"\n    },\n    \"0x002B\": {\n      \
  \  \"data_type\": \"0x000B\",\n        \"name\": \"RecipientReassignmentProhibited\"\
  \n    },\n    \"0x002E\": {\n        \"data_type\": \"0x0003\",\n        \"name\"\
  : \"OriginalSensitivity\"\n    },\n    \"0x0030\": {\n        \"data_type\": \"\
  0x0040\",\n        \"name\": \"ReplyTime\"\n    },\n    \"0x0031\": {\n        \"\
  data_type\": \"0x0102\",\n        \"name\": \"ReportTag\"\n    },\n    \"0x0032\"\
  : {\n        \"data_type\": \"0x0040\",\n        \"name\": \"ReportTime\"\n    },\n\
  \    \"0x0036\": {\n        \"data_type\": \"0x0003\",\n        \"name\": \"Sensitivity\"\
  \n    },\n    \"0x0037\": {\n        \"data_type\": \"0x001F\",\n        \"name\"\
  : \"Subject\"\n    },\n    \"0x0039\": {\n        \"data_type\": \"0x0040\",\n \
  \       \"name\": \"ClientSubmitTime\"\n    },\n    \"0x003A\": {\n        \"data_type\"\
  : \"0x001F\",\n        \"name\": \"ReportName\"\n    },\n    \"0x003B\": {\n   \
  \     \"data_type\": \"0x0102\",\n        \"name\": \"SentRepresentingSearchKey\"\
  \n    },\n    \"0x003D\": {\n        \"data_type\": \"0x001F\",\n        \"name\"\
  : \"SubjectPrefix\"\n    },\n    \"0x003F\": {\n        \"data_type\": \"0x0102\"\
  ,\n        \"name\": \"ReceivedByEntryId\"\n    },\n    \"0x0040\": {\n        \"\
  data_type\": \"0x001F\",\n        \"name\": \"ReceivedByName\"\n    },\n    \"0x0041\"\
  : {\n        \"data_type\": \"0x0102\",\n        \"name\": \"SentRepresentingEntryId\"\
  \n    },\n    \"0x0042\": {\n        \"data_type\": \"0x001F\",\n        \"name\"\
  : \"SentRepresentingName\"\n    },\n    \"0x0043\": {\n        \"data_type\": \"\
  0x0102\",\n        \"name\": \"ReceivedRepresentingEntryId\"\n    },\n    \"0x0044\"\
  : {\n        \"data_type\": \"0x001F\",\n        \"name\": \"ReceivedRepresentingName\"\
  \n    },\n    \"0x0045\": {\n        \"data_type\": \"0x0102\",\n        \"name\"\
  : \"ReportEntryId\"\n    },\n    \"0x0046\": {\n        \"data_type\": \"0x0102\"\
  ,\n        \"name\": \"ReadReceiptEntryId\"\n    },\n    \"0x0047\": {\n       \
  \ \"data_type\": \"0x0102\",\n        \"name\": \"MessageSubmissionId\"\n    },\n\
  \    \"0x0049\": {\n        \"data_type\": \"0x001F\",\n        \"name\": \"OriginalSubject\"\
  \n    },\n    \"0x004B\": {\n        \"data_type\": \"0x001F\",\n        \"name\"\
  : \"OriginalMessageClass\"\n    },\n    \"0x004C\": {\n        \"data_type\": \"\
  0x0102\",\n        \"name\": \"OriginalAuthorEntryId\"\n    },\n    \"0x004D\":\
  \ {\n        \"data_type\": \"0x001F\",\n        \"name\": \"OriginalAuthorName\"\
  \n    },\n    \"0x004E\": {\n        \"data_type\": \"0x0040\",\n        \"name\"\
  : \"OriginalSubmitTime\"\n    },\n    \"0x004F\": {\n        \"data_type\": \"0x0102\"\
  ,\n        \"name\": \"ReplyRecipientEntries\"\n    },\n    \"0x0050\": {\n    \
  \    \"data_type\": \"0x001F\",\n        \"name\": \"ReplyRecipientNames\"\n   \
  \ },\n    \"0x0051\": {\n        \"data_type\": \"0x0102\",\n        \"name\": \"\
  ReceivedBySearchKey\"\n    },\n    \"0x0052\": {\n        \"data_type\": \"0x0102\"\
  ,\n        \"name\": \"ReceivedRepresentingSearchKey\"\n    },\n    \"0x0053\":\
  \ {\n        \"data_type\": \"0x0102\",\n        \"name\": \"ReadReceiptSearchKey\"\
  \n    },\n    \"0x0054\": {\n        \"data_type\": \"0x0102\",\n        \"name\"\
  : \"ReportSearchKey\"\n    },\n    \"0x0055\": {\n        \"data_type\": \"0x0040\"\
  ,\n        \"name\": \"OriginalDeliveryTime\"\n    },\n    \"0x0057\": {\n     \
  \   \"data_type\": \"0x000B\",\n        \"name\": \"MessageToMe\"\n    },\n    \"\
  0x0058\": {\n        \"data_type\": \"0x000B\",\n        \"name\": \"MessageCcMe\"\
  \n    },\n    \"0x0059\": {\n        \"data_type\": \"0x000B\",\n        \"name\"\
  : \"MessageRecipientMe\"\n    },\n    \"0x005A\": {\n        \"data_type\": \"0x001F\"\
  ,\n        \"name\": \"OriginalSenderName\"\n    },\n    \"0x005B\": {\n       \
  \ \"data_type\": \"0x0102\",\n        \"name\": \"OriginalSenderEntryId\"\n    },\n\
  \    \"0x005C\": {\n        \"data_type\": \"0x0102\",\n        \"name\": \"OriginalSenderSearchKey\"\
  \n    },\n    \"0x005D\": {\n        \"data_type\": \"0x001F\",\n        \"name\"\
  : \"OriginalSentRepresentingName\"\n    },\n    \"0x005E\": {\n        \"data_type\"\
  : \"0x0102\",\n        \"name\": \"OriginalSentRepresentingEntryId\"\n    },\n \
  \   \"0x005F\": {\n        \"data_type\": \"0x0102\",\n        \"name\": \"OriginalSentRepresentingSearchKey\"\
  \n    },\n    \"0x0060\": {\n        \"data_type\": \"0x0040\",\n        \"name\"\
  : \"StartDate\"\n    },\n    \"0x0061\": {\n        \"data_type\": \"0x0040\",\n\
  \        \"name\": \"EndDate\"\n    },\n    \"0x0062\": {\n        \"data_type\"\
  : \"0x0003\",\n        \"name\": \"OwnerAppointmentId\"\n    },\n    \"0x0063\"\
  : {\n        \"data_type\": \"0x000B\",\n        \"name\": \"ResponseRequested\"\
  \n    },\n    \"0x0064\": {\n        \"data_type\": \"0x001F\",\n        \"name\"\
  : \"SentRepresentingAddressType\"\n    },\n    \"0x0065\": {\n        \"data_type\"\
  : \"0x001F\",\n        \"name\": \"SentRepresentingEmailAddress\"\n    },\n    \"\
  0x0066\": {\n        \"data_type\": \"0x001F\",\n        \"name\": \"OriginalSenderAddressType\"\
  \n    },\n    \"0x0067\": {\n        \"data_type\": \"0x001F\",\n        \"name\"\
  : \"OriginalSenderEmailAddress\"\n    },\n    \"0x0068\": {\n        \"data_type\"\
  : \"0x001F\",\n        \"name\": \"OriginalSentRepresentingAddressType\"\n    },\n\
  \    \"0x0069\": {\n        \"data_type\": \"0x001F\",\n        \"name\": \"OriginalSentRepresentingEmailAddress\"\
  \n    },\n    \"0x0070\": {\n        \"data_type\": \"0x001F\",\n        \"name\"\
  : \"ConversationTopic\"\n    },\n    \"0x0071\": {\n        \"data_type\": \"0x0102\"\
  ,\n        \"name\": \"ConversationIndex\"\n    },\n    \"0x0072\": {\n        \"\
  data_type\": \"0x001F\",\n        \"name\": \"OriginalDisplayBcc\"\n    },\n   \
  \ \"0x0073\": {\n        \"data_type\": \"0x001F\",\n        \"name\": \"OriginalDisplayCc\"\
  \n    },\n    \"0x0074\": {\n        \"data_type\": \"0x001F\",\n        \"name\"\
  : \"OriginalDisplayTo\"\n    },\n    \"0x0075\": {\n        \"data_type\": \"0x001F\"\
  ,\n        \"name\": \"ReceivedByAddressType\"\n    },\n    \"0x0076\": {\n    \
  \    \"data_type\": \"0x001F\",\n        \"name\": \"ReceivedByEmailAddress\"\n\
  \    },\n    \"0x0077\": {\n        \"data_type\": \"0x001F\",\n        \"name\"\
  : \"ReceivedRepresentingAddressType\"\n    },\n    \"0x0078\": {\n        \"data_type\"\
  : \"0x001F\",\n        \"name\": \"ReceivedRepresentingEmailAddress\"\n    },\n\
  \    \"0x007D\": {\n        \"data_type\": \"0x001F\",\n        \"name\": \"TransportMessageHeaders\"\
  \n    },\n    \"0x007F\": {\n        \"data_type\": \"0x0102\",\n        \"name\"\
  : \"TnefCorrelationKey\"\n    },\n    \"0x0080\": {\n        \"data_type\": \"0x001F\"\
  ,\n        \"name\": \"ReportDisposition\"\n    },\n    \"0x0081\": {\n        \"\
  data_type\": \"0x001F\",\n        \"name\": \"ReportDispositionMode\"\n    },\n\
  \    \"0x0807\": {\n        \"data_type\": \"0x0003\",\n        \"name\": \"AddressBookRoomCapacity\"\
  \n    },\n    \"0x0809\": {\n        \"data_type\": \"0x001F\",\n        \"name\"\
  : \"AddressBookRoomDescription\"\n    },\n    \"0x0C04\": {\n        \"data_type\"\
  : \"0x0003\",\n        \"name\": \"NonDeliveryReportReasonCode\"\n    },\n    \"\
  0x0C05\": {\n        \"data_type\": \"0x0003\",\n        \"name\": \"NonDeliveryReportDiagCode\"\
  \n    },\n    \"0x0C06\": {\n        \"data_type\": \"0x000B\",\n        \"name\"\
  : \"NonReceiptNotificationRequested\"\n    },\n    \"0x0C08\": {\n        \"data_type\"\
  : \"0x000B\",\n        \"name\": \"OriginatorNonDeliveryReportRequested\"\n    },\n\
  \    \"0x0C15\": {\n        \"data_type\": \"0x0003\",\n        \"name\": \"RecipientType\"\
  \n    },\n    \"0x0C17\": {\n        \"data_type\": \"0x000B\",\n        \"name\"\
  : \"ReplyRequested\"\n    },\n    \"0x0C19\": {\n        \"data_type\": \"0x0102\"\
  ,\n        \"name\": \"SenderEntryId\"\n    },\n    \"0x0C1A\": {\n        \"data_type\"\
  : \"0x001F\",\n        \"name\": \"SenderName\"\n    },\n    \"0x0C1B\": {\n   \
  \     \"data_type\": \"0x001F\",\n        \"name\": \"SupplementaryInfo\"\n    },\n\
  \    \"0x0C1D\": {\n        \"data_type\": \"0x0102\",\n        \"name\": \"SenderSearchKey\"\
  \n    },\n    \"0x0C1E\": {\n        \"data_type\": \"0x001F\",\n        \"name\"\
  : \"SenderAddressType\"\n    },\n    \"0x0C1F\": {\n        \"data_type\": \"0x001F\"\
  ,\n        \"name\": \"SenderEmailAddress\"\n    },\n    \"0x0C21\": {\n       \
  \ \"data_type\": \"0x001F\",\n        \"name\": \"RemoteMessageTransferAgent\"\n\
  \    },\n    \"0x0E01\": {\n        \"data_type\": \"0x000B\",\n        \"name\"\
  : \"DeleteAfterSubmit\"\n    },\n    \"0x0E02\": {\n        \"data_type\": \"0x001F\"\
  ,\n        \"name\": \"DisplayBcc\"\n    },\n    \"0x0E03\": {\n        \"data_type\"\
  : \"0x001F\",\n        \"name\": \"DisplayCc\"\n    },\n    \"0x0E04\": {\n    \
  \    \"data_type\": \"0x001F\",\n        \"name\": \"DisplayTo\"\n    },\n    \"\
  0x0E06\": {\n        \"data_type\": \"0x0040\",\n        \"name\": \"MessageDeliveryTime\"\
  \n    },\n    \"0x0E07\": {\n        \"data_type\": \"0x0003\",\n        \"name\"\
  : \"MessageFlags\"\n    },\n    \"0x0E08\": {\n        \"data_type\": \"0x0014\"\
  ,\n        \"name\": \"MessageSizeExtended\"\n    },\n    \"0x0E09\": {\n      \
  \  \"data_type\": \"0x0102\",\n        \"name\": \"ParentEntryId\"\n    },\n   \
  \ \"0x0E0F\": {\n        \"data_type\": \"0x000B\",\n        \"name\": \"Responsibility\"\
  \n    },\n    \"0x0E12\": {\n        \"data_type\": \"0x000D\",\n        \"name\"\
  : \"MessageRecipients\"\n    },\n    \"0x0E13\": {\n        \"data_type\": \"0x000D\"\
  ,\n        \"name\": \"MessageAttachments\"\n    },\n    \"0x0E17\": {\n       \
  \ \"data_type\": \"0x0003\",\n        \"name\": \"MessageStatus\"\n    },\n    \"\
  0x0E1B\": {\n        \"data_type\": \"0x000B\",\n        \"name\": \"HasAttachments\"\
  \n    },\n    \"0x0E1D\": {\n        \"data_type\": \"0x001F\",\n        \"name\"\
  : \"NormalizedSubject\"\n    },\n    \"0x0E1F\": {\n        \"data_type\": \"0x000B\"\
  ,\n        \"name\": \"RtfInSync\"\n    },\n    \"0x0E20\": {\n        \"data_type\"\
  : \"0x0003\",\n        \"name\": \"AttachSize\"\n    },\n    \"0x0E21\": {\n   \
  \     \"data_type\": \"0x0003\",\n        \"name\": \"AttachNumber\"\n    },\n \
  \   \"0x0E28\": {\n        \"data_type\": \"0x001F\",\n        \"name\": \"PrimarySendAccount\"\
  \n    },\n    \"0x0E29\": {\n        \"data_type\": \"0x001F\",\n        \"name\"\
  : \"NextSendAcct\"\n    },\n    \"0x0E2B\": {\n        \"data_type\": \"0x0003\"\
  ,\n        \"name\": \"ToDoItemFlags\"\n    },\n    \"0x0E2C\": {\n        \"data_type\"\
  : \"0x0102\",\n        \"name\": \"SwappedToDoStore\"\n    },\n    \"0x0E2D\": {\n\
  \        \"data_type\": \"0x0102\",\n        \"name\": \"SwappedToDoData\"\n   \
  \ },\n    \"0x0E69\": {\n        \"data_type\": \"0x000B\",\n        \"name\": \"\
  Read\"\n    },\n    \"0x0E6A\": {\n        \"data_type\": \"0x001F\",\n        \"\
  name\": \"SecurityDescriptorAsXml\"\n    },\n    \"0x0E79\": {\n        \"data_type\"\
  : \"0x0003\",\n        \"name\": \"TrustSender\"\n    },\n    \"0x0E84\": {\n  \
  \      \"data_type\": \"0x0102\",\n        \"name\": \"ExchangeNTSecurityDescriptor\"\
  \n    },\n    \"0x0E99\": {\n        \"data_type\": \"0x0102\",\n        \"name\"\
  : \"ExtendedRuleMessageActions\"\n    },\n    \"0x0E9A\": {\n        \"data_type\"\
  : \"0x0102\",\n        \"name\": \"ExtendedRuleMessageCondition\"\n    },\n    \"\
  0x0E9B\": {\n        \"data_type\": \"0x0003\",\n        \"name\": \"ExtendedRuleSizeLimit\"\
  \n    },\n    \"0x0FF4\": {\n        \"data_type\": \"0x0003\",\n        \"name\"\
  : \"Access\"\n    },\n    \"0x0FF5\": {\n        \"data_type\": \"0x0003\",\n  \
  \      \"name\": \"RowType\"\n    },\n    \"0x0FF6\": {\n        \"data_type\":\
  \ \"0x0102\",\n        \"name\": \"InstanceKey\"\n    },\n    \"0x0FF7\": {\n  \
  \      \"data_type\": \"0x0003\",\n        \"name\": \"AccessLevel\"\n    },\n \
  \   \"0x0FF8\": {\n        \"data_type\": \"0x0102\",\n        \"name\": \"MappingSignature\"\
  \n    },\n    \"0x0FF9\": {\n        \"data_type\": \"0x0102\",\n        \"name\"\
  : \"RecordKey\"\n    },\n    \"0x0FFB\": {\n        \"data_type\": \"0x0102\",\n\
  \        \"name\": \"StoreEntryId\"\n    },\n    \"0x0FFE\": {\n        \"data_type\"\
  : \"0x0003\",\n        \"name\": \"ObjectType\"\n    },\n    \"0x0FFF\": {\n   \
  \     \"data_type\": \"0x0102\",\n        \"name\": \"EntryId\"\n    },\n    \"\
  0x1000\": {\n        \"data_type\": \"0x001F\",\n        \"name\": \"Body\"\n  \
  \  },\n    \"0x1001\": {\n        \"data_type\": \"0x001F\",\n        \"name\":\
  \ \"ReportText\"\n    },\n    \"0x1009\": {\n        \"data_type\": \"0x0102\",\n\
  \        \"name\": \"RtfCompressed\"\n    },\n    \"0x1013\": {\n        \"data_type\"\
  : \"0x0102\",\n        \"name\": \"Html\"\n    },\n    \"0x1014\": {\n        \"\
  data_type\": \"0x001F\",\n        \"name\": \"BodyContentLocation\"\n    },\n  \
  \  \"0x1015\": {\n        \"data_type\": \"0x001F\",\n        \"name\": \"BodyContentId\"\
  \n    },\n    \"0x1016\": {\n        \"data_type\": \"0x0003\",\n        \"name\"\
  : \"NativeBody\"\n    },\n    \"0x1035\": {\n        \"data_type\": \"0x001F\",\n\
  \        \"name\": \"InternetMessageId\"\n    },\n    \"0x1039\": {\n        \"\
  data_type\": \"0x001F\",\n        \"name\": \"InternetReferences\"\n    },\n   \
  \ \"0x1042\": {\n        \"data_type\": \"0x001F\",\n        \"name\": \"InReplyToId\"\
  \n    },\n    \"0x1043\": {\n        \"data_type\": \"0x001F\",\n        \"name\"\
  : \"ListHelp\"\n    },\n    \"0x1044\": {\n        \"data_type\": \"0x001F\",\n\
  \        \"name\": \"ListSubscribe\"\n    },\n    \"0x1045\": {\n        \"data_type\"\
  : \"0x001F\",\n        \"name\": \"ListUnsubscribe\"\n    },\n    \"0x1046\": {\n\
  \        \"data_type\": \"0x001F\",\n        \"name\": \"OriginalMessageId\"\n \
  \   },\n    \"0x1080\": {\n        \"data_type\": \"0x0003\",\n        \"name\"\
  : \"IconIndex\"\n    },\n    \"0x1081\": {\n        \"data_type\": \"0x0003\",\n\
  \        \"name\": \"LastVerbExecuted\"\n    },\n    \"0x1082\": {\n        \"data_type\"\
  : \"0x0040\",\n        \"name\": \"LastVerbExecutionTime\"\n    },\n    \"0x1090\"\
  : {\n        \"data_type\": \"0x0003\",\n        \"name\": \"FlagStatus\"\n    },\n\
  \    \"0x1091\": {\n        \"data_type\": \"0x0040\",\n        \"name\": \"FlagCompleteTime\"\
  \n    },\n    \"0x1095\": {\n        \"data_type\": \"0x0003\",\n        \"name\"\
  : \"FollowupIcon\"\n    },\n    \"0x1096\": {\n        \"data_type\": \"0x0003\"\
  ,\n        \"name\": \"BlockStatus\"\n    },\n    \"0x10C3\": {\n        \"data_type\"\
  : \"0x0040\",\n        \"name\": \"ICalendarStartTime\"\n    },\n    \"0x10C4\"\
  : {\n        \"data_type\": \"0x0040\",\n        \"name\": \"ICalendarEndTime\"\n\
  \    },\n    \"0x10C5\": {\n        \"data_type\": \"0x0040\",\n        \"name\"\
  : \"CdoRecurrenceid\"\n    },\n    \"0x10CA\": {\n        \"data_type\": \"0x0040\"\
  ,\n        \"name\": \"ICalendarReminderNextTime\"\n    },\n    \"0x10F4\": {\n\
  \        \"data_type\": \"0x000B\",\n        \"name\": \"AttributeHidden\"\n   \
  \ },\n    \"0x10F6\": {\n        \"data_type\": \"0x000B\",\n        \"name\": \"\
  AttributeReadOnly\"\n    },\n    \"0x3000\": {\n        \"data_type\": \"0x0003\"\
  ,\n        \"name\": \"Rowid\"\n    },\n    \"0x3001\": {\n        \"data_type\"\
  : \"0x001F\",\n        \"name\": \"DisplayName\"\n    },\n    \"0x3002\": {\n  \
  \      \"data_type\": \"0x001F\",\n        \"name\": \"AddressType\"\n    },\n \
  \   \"0x3003\": {\n        \"data_type\": \"0x001F\",\n        \"name\": \"EmailAddress\"\
  \n    },\n    \"0x3004\": {\n        \"data_type\": \"0x001F\",\n        \"name\"\
  : \"Comment\"\n    },\n    \"0x3005\": {\n        \"data_type\": \"0x0003\",\n \
  \       \"name\": \"Depth\"\n    },\n    \"0x3007\": {\n        \"data_type\": \"\
  0x0040\",\n        \"name\": \"CreationTime\"\n    },\n    \"0x3008\": {\n     \
  \   \"data_type\": \"0x0040\",\n        \"name\": \"LastModificationTime\"\n   \
  \ },\n    \"0x300B\": {\n        \"data_type\": \"0x0102\",\n        \"name\": \"\
  SearchKey\"\n    },\n    \"0x3010\": {\n        \"data_type\": \"0x0102\",\n   \
  \     \"name\": \"TargetEntryId\"\n    },\n    \"0x3013\": {\n        \"data_type\"\
  : \"0x0102\",\n        \"name\": \"ConversationId\"\n    },\n    \"0x3016\": {\n\
  \        \"data_type\": \"0x000B\",\n        \"name\": \"ConversationIndexTracking\"\
  \n    },\n    \"0x3018\": {\n        \"data_type\": \"0x0102\",\n        \"name\"\
  : \"ArchiveTag\"\n    },\n    \"0x3019\": {\n        \"data_type\": \"0x0102\",\n\
  \        \"name\": \"PolicyTag\"\n    },\n    \"0x301A\": {\n        \"data_type\"\
  : \"0x0003\",\n        \"name\": \"RetentionPeriod\"\n    },\n    \"0x301B\": {\n\
  \        \"data_type\": \"0x0102\",\n        \"name\": \"StartDateEtc\"\n    },\n\
  \    \"0x301C\": {\n        \"data_type\": \"0x0040\",\n        \"name\": \"RetentionDate\"\
  \n    },\n    \"0x301D\": {\n        \"data_type\": \"0x0003\",\n        \"name\"\
  : \"RetentionFlags\"\n    },\n    \"0x301E\": {\n        \"data_type\": \"0x0003\"\
  ,\n        \"name\": \"ArchivePeriod\"\n    },\n    \"0x301F\": {\n        \"data_type\"\
  : \"0x0040\",\n        \"name\": \"ArchiveDate\"\n    },\n    \"0x340D\": {\n  \
  \      \"data_type\": \"0x0003\",\n        \"name\": \"StoreSupportMask\"\n    },\n\
  \    \"0x340E\": {\n        \"data_type\": \"0x0003\",\n        \"name\": \"StoreState\"\
  \n    },\n    \"0x3600\": {\n        \"data_type\": \"0x0003\",\n        \"name\"\
  : \"ContainerFlags\"\n    },\n    \"0x3601\": {\n        \"data_type\": \"0x0003\"\
  ,\n        \"name\": \"FolderType\"\n    },\n    \"0x3602\": {\n        \"data_type\"\
  : \"0x0003\",\n        \"name\": \"ContentCount\"\n    },\n    \"0x3603\": {\n \
  \       \"data_type\": \"0x0003\",\n        \"name\": \"ContentUnreadCount\"\n \
  \   },\n    \"0x3609\": {\n        \"data_type\": \"0x000B\",\n        \"name\"\
  : \"Selectable\"\n    },\n    \"0x360A\": {\n        \"data_type\": \"0x000B\",\n\
  \        \"name\": \"Subfolders\"\n    },\n    \"0x360C\": {\n        \"data_type\"\
  : \"0x001F\",\n        \"name\": \"Anr\"\n    },\n    \"0x360E\": {\n        \"\
  data_type\": \"0x000D\",\n        \"name\": \"ContainerHierarchy\"\n    },\n   \
  \ \"0x360F\": {\n        \"data_type\": \"0x000D\",\n        \"name\": \"ContainerContents\"\
  \n    },\n    \"0x3610\": {\n        \"data_type\": \"0x000D\",\n        \"name\"\
  : \"FolderAssociatedContents\"\n    },\n    \"0x3613\": {\n        \"data_type\"\
  : \"0x001F\",\n        \"name\": \"ContainerClass\"\n    },\n    \"0x36D0\": {\n\
  \        \"data_type\": \"0x0102\",\n        \"name\": \"IpmAppointmentEntryId\"\
  \n    },\n    \"0x36D1\": {\n        \"data_type\": \"0x0102\",\n        \"name\"\
  : \"IpmContactEntryId\"\n    },\n    \"0x36D2\": {\n        \"data_type\": \"0x0102\"\
  ,\n        \"name\": \"IpmJournalEntryId\"\n    },\n    \"0x36D3\": {\n        \"\
  data_type\": \"0x0102\",\n        \"name\": \"IpmNoteEntryId\"\n    },\n    \"0x36D4\"\
  : {\n        \"data_type\": \"0x0102\",\n        \"name\": \"IpmTaskEntryId\"\n\
  \    },\n    \"0x36D5\": {\n        \"data_type\": \"0x0102\",\n        \"name\"\
  : \"RemindersOnlineEntryId\"\n    },\n    \"0x36D7\": {\n        \"data_type\":\
  \ \"0x0102\",\n        \"name\": \"IpmDraftsEntryId\"\n    },\n    \"0x36D8\": {\n\
  \        \"data_type\": \"0x1102\",\n        \"name\": \"AdditionalRenEntryIds\"\
  \n    },\n    \"0x36D9\": {\n        \"data_type\": \"0x0102\",\n        \"name\"\
  : \"AdditionalRenEntryIdsEx\"\n    },\n    \"0x36DA\": {\n        \"data_type\"\
  : \"0x0102\",\n        \"name\": \"ExtendedFolderFlags\"\n    },\n    \"0x36E2\"\
  : {\n        \"data_type\": \"0x0003\",\n        \"name\": \"OrdinalMost\"\n   \
  \ },\n    \"0x36E4\": {\n        \"data_type\": \"0x1102\",\n        \"name\": \"\
  FreeBusyEntryIds\"\n    },\n    \"0x36E5\": {\n        \"data_type\": \"0x001F\"\
  ,\n        \"name\": \"DefaultPostMessageClass\"\n    },\n    \"0x3701\": {\n  \
  \      \"data_type\": \"0x000D\",\n        \"name\": \"AttachDataObject\"\n    },\n\
  \    \"0x3702\": {\n        \"data_type\": \"0x0102\",\n        \"name\": \"AttachEncoding\"\
  \n    },\n    \"0x3703\": {\n        \"data_type\": \"0x001F\",\n        \"name\"\
  : \"AttachExtension\"\n    },\n    \"0x3704\": {\n        \"data_type\": \"0x001F\"\
  ,\n        \"name\": \"AttachFilename\"\n    },\n    \"0x3705\": {\n        \"data_type\"\
  : \"0x0003\",\n        \"name\": \"AttachMethod\"\n    },\n    \"0x3707\": {\n \
  \       \"data_type\": \"0x001F\",\n        \"name\": \"AttachLongFilename\"\n \
  \   },\n    \"0x3708\": {\n        \"data_type\": \"0x001F\",\n        \"name\"\
  : \"AttachPathname\"\n    },\n    \"0x3709\": {\n        \"data_type\": \"0x0102\"\
  ,\n        \"name\": \"AttachRendering\"\n    },\n    \"0x370A\": {\n        \"\
  data_type\": \"0x0102\",\n        \"name\": \"AttachTag\"\n    },\n    \"0x370B\"\
  : {\n        \"data_type\": \"0x0003\",\n        \"name\": \"RenderingPosition\"\
  \n    },\n    \"0x370C\": {\n        \"data_type\": \"0x001F\",\n        \"name\"\
  : \"AttachTransportName\"\n    },\n    \"0x370D\": {\n        \"data_type\": \"\
  0x001F\",\n        \"name\": \"AttachLongPathname\"\n    },\n    \"0x370E\": {\n\
  \        \"data_type\": \"0x001F\",\n        \"name\": \"AttachMimeTag\"\n    },\n\
  \    \"0x370F\": {\n        \"data_type\": \"0x0102\",\n        \"name\": \"AttachAdditionalInformation\"\
  \n    },\n    \"0x3711\": {\n        \"data_type\": \"0x001F\",\n        \"name\"\
  : \"AttachContentBase\"\n    },\n    \"0x3712\": {\n        \"data_type\": \"0x001F\"\
  ,\n        \"name\": \"AttachContentId\"\n    },\n    \"0x3713\": {\n        \"\
  data_type\": \"0x001F\",\n        \"name\": \"AttachContentLocation\"\n    },\n\
  \    \"0x3714\": {\n        \"data_type\": \"0x0003\",\n        \"name\": \"AttachFlags\"\
  \n    },\n    \"0x3719\": {\n        \"data_type\": \"0x001F\",\n        \"name\"\
  : \"AttachPayloadProviderGuidString\"\n    },\n    \"0x371A\": {\n        \"data_type\"\
  : \"0x001F\",\n        \"name\": \"AttachPayloadClass\"\n    },\n    \"0x371B\"\
  : {\n        \"data_type\": \"0x001F\",\n        \"name\": \"TextAttachmentCharset\"\
  \n    },\n    \"0x3900\": {\n        \"data_type\": \"0x0003\",\n        \"name\"\
  : \"DisplayType\"\n    },\n    \"0x3902\": {\n        \"data_type\": \"0x0102\"\
  ,\n        \"name\": \"Templateid\"\n    },\n    \"0x3905\": {\n        \"data_type\"\
  : \"0x0003\",\n        \"name\": \"DisplayTypeEx\"\n    },\n    \"0x39FE\": {\n\
  \        \"data_type\": \"0x001F\",\n        \"name\": \"SmtpAddress\"\n    },\n\
  \    \"0x39FF\": {\n        \"data_type\": \"0x001F\",\n        \"name\": \"AddressBookDisplayNamePrintable\"\
  \n    },\n    \"0x3A00\": {\n        \"data_type\": \"0x001F\",\n        \"name\"\
  : \"Account\"\n    },\n    \"0x3A02\": {\n        \"data_type\": \"0x001F\",\n \
  \       \"name\": \"CallbackTelephoneNumber\"\n    },\n    \"0x3A05\": {\n     \
  \   \"data_type\": \"0x001F\",\n        \"name\": \"Generation\"\n    },\n    \"\
  0x3A06\": {\n        \"data_type\": \"0x001F\",\n        \"name\": \"GivenName\"\
  \n    },\n    \"0x3A07\": {\n        \"data_type\": \"0x001F\",\n        \"name\"\
  : \"GovernmentIdNumber\"\n    },\n    \"0x3A08\": {\n        \"data_type\": \"0x001F\"\
  ,\n        \"name\": \"BusinessTelephoneNumber\"\n    },\n    \"0x3A09\": {\n  \
  \      \"data_type\": \"0x001F\",\n        \"name\": \"HomeTelephoneNumber\"\n \
  \   },\n    \"0x3A0A\": {\n        \"data_type\": \"0x001F\",\n        \"name\"\
  : \"Initials\"\n    },\n    \"0x3A0B\": {\n        \"data_type\": \"0x001F\",\n\
  \        \"name\": \"Keyword\"\n    },\n    \"0x3A0C\": {\n        \"data_type\"\
  : \"0x001F\",\n        \"name\": \"Language\"\n    },\n    \"0x3A0D\": {\n     \
  \   \"data_type\": \"0x001F\",\n        \"name\": \"Location\"\n    },\n    \"0x3A0F\"\
  : {\n        \"data_type\": \"0x001F\",\n        \"name\": \"MessageHandlingSystemCommonName\"\
  \n    },\n    \"0x3A10\": {\n        \"data_type\": \"0x001F\",\n        \"name\"\
  : \"OrganizationalIdNumber\"\n    },\n    \"0x3A11\": {\n        \"data_type\":\
  \ \"0x001F\",\n        \"name\": \"Surname\"\n    },\n    \"0x3A12\": {\n      \
  \  \"data_type\": \"0x0102\",\n        \"name\": \"OriginalEntryId\"\n    },\n \
  \   \"0x3A15\": {\n        \"data_type\": \"0x001F\",\n        \"name\": \"PostalAddress\"\
  \n    },\n    \"0x3A16\": {\n        \"data_type\": \"0x001F\",\n        \"name\"\
  : \"CompanyName\"\n    },\n    \"0x3A17\": {\n        \"data_type\": \"0x001F\"\
  ,\n        \"name\": \"Title\"\n    },\n    \"0x3A18\": {\n        \"data_type\"\
  : \"0x001F\",\n        \"name\": \"DepartmentName\"\n    },\n    \"0x3A19\": {\n\
  \        \"data_type\": \"0x001F\",\n        \"name\": \"OfficeLocation\"\n    },\n\
  \    \"0x3A1A\": {\n        \"data_type\": \"0x001F\",\n        \"name\": \"PrimaryTelephoneNumber\"\
  \n    },\n    \"0x3A1B\": {\n        \"data_type\": \"0x101F\",\n        \"name\"\
  : \"Business2TelephoneNumbers\"\n    },\n    \"0x3A1C\": {\n        \"data_type\"\
  : \"0x001F\",\n        \"name\": \"MobileTelephoneNumber\"\n    },\n    \"0x3A1D\"\
  : {\n        \"data_type\": \"0x001F\",\n        \"name\": \"RadioTelephoneNumber\"\
  \n    },\n    \"0x3A1E\": {\n        \"data_type\": \"0x001F\",\n        \"name\"\
  : \"CarTelephoneNumber\"\n    },\n    \"0x3A1F\": {\n        \"data_type\": \"0x001F\"\
  ,\n        \"name\": \"OtherTelephoneNumber\"\n    },\n    \"0x3A20\": {\n     \
  \   \"data_type\": \"0x001F\",\n        \"name\": \"TransmittableDisplayName\"\n\
  \    },\n    \"0x3A21\": {\n        \"data_type\": \"0x001F\",\n        \"name\"\
  : \"PagerTelephoneNumber\"\n    },\n    \"0x3A22\": {\n        \"data_type\": \"\
  0x0102\",\n        \"name\": \"UserCertificate\"\n    },\n    \"0x3A23\": {\n  \
  \      \"data_type\": \"0x001F\",\n        \"name\": \"PrimaryFaxNumber\"\n    },\n\
  \    \"0x3A24\": {\n        \"data_type\": \"0x001F\",\n        \"name\": \"BusinessFaxNumber\"\
  \n    },\n    \"0x3A25\": {\n        \"data_type\": \"0x001F\",\n        \"name\"\
  : \"HomeFaxNumber\"\n    },\n    \"0x3A26\": {\n        \"data_type\": \"0x001F\"\
  ,\n        \"name\": \"Country\"\n    },\n    \"0x3A27\": {\n        \"data_type\"\
  : \"0x001F\",\n        \"name\": \"Locality\"\n    },\n    \"0x3A28\": {\n     \
  \   \"data_type\": \"0x001F\",\n        \"name\": \"StateOrProvince\"\n    },\n\
  \    \"0x3A29\": {\n        \"data_type\": \"0x001F\",\n        \"name\": \"StreetAddress\"\
  \n    },\n    \"0x3A2A\": {\n        \"data_type\": \"0x001F\",\n        \"name\"\
  : \"PostalCode\"\n    },\n    \"0x3A2B\": {\n        \"data_type\": \"0x001F\",\n\
  \        \"name\": \"PostOfficeBox\"\n    },\n    \"0x3A2C\": {\n        \"data_type\"\
  : \"0x001F; PtypMultipleBinary, 0x1102\",\n        \"name\": \"TelexNumber\"\n \
  \   },\n    \"0x3A2D\": {\n        \"data_type\": \"0x001F\",\n        \"name\"\
  : \"IsdnNumber\"\n    },\n    \"0x3A2E\": {\n        \"data_type\": \"0x001F\",\n\
  \        \"name\": \"AssistantTelephoneNumber\"\n    },\n    \"0x3A2F\": {\n   \
  \     \"data_type\": \"0x101F\",\n        \"name\": \"Home2TelephoneNumbers\"\n\
  \    },\n    \"0x3A30\": {\n        \"data_type\": \"0x001F\",\n        \"name\"\
  : \"Assistant\"\n    },\n    \"0x3A40\": {\n        \"data_type\": \"0x000B\",\n\
  \        \"name\": \"SendRichInfo\"\n    },\n    \"0x3A41\": {\n        \"data_type\"\
  : \"0x0040\",\n        \"name\": \"WeddingAnniversary\"\n    },\n    \"0x3A42\"\
  : {\n        \"data_type\": \"0x0040\",\n        \"name\": \"Birthday\"\n    },\n\
  \    \"0x3A43\": {\n        \"data_type\": \"0x001F\",\n        \"name\": \"Hobbies\"\
  \n    },\n    \"0x3A44\": {\n        \"data_type\": \"0x001F\",\n        \"name\"\
  : \"MiddleName\"\n    },\n    \"0x3A45\": {\n        \"data_type\": \"0x001F\",\n\
  \        \"name\": \"DisplayNamePrefix\"\n    },\n    \"0x3A46\": {\n        \"\
  data_type\": \"0x001F\",\n        \"name\": \"Profession\"\n    },\n    \"0x3A47\"\
  : {\n        \"data_type\": \"0x001F\",\n        \"name\": \"ReferredByName\"\n\
  \    },\n    \"0x3A48\": {\n        \"data_type\": \"0x001F\",\n        \"name\"\
  : \"SpouseName\"\n    },\n    \"0x3A49\": {\n        \"data_type\": \"0x001F\",\n\
  \        \"name\": \"ComputerNetworkName\"\n    },\n    \"0x3A4A\": {\n        \"\
  data_type\": \"0x001F\",\n        \"name\": \"CustomerId\"\n    },\n    \"0x3A4B\"\
  : {\n        \"data_type\": \"0x001F\",\n        \"name\": \"TelecommunicationsDeviceForDeafTelephoneNumber\"\
  \n    },\n    \"0x3A4C\": {\n        \"data_type\": \"0x001F\",\n        \"name\"\
  : \"FtpSite\"\n    },\n    \"0x3A4D\": {\n        \"data_type\": \"0x0002\",\n \
  \       \"name\": \"Gender\"\n    },\n    \"0x3A4E\": {\n        \"data_type\":\
  \ \"0x001F\",\n        \"name\": \"ManagerName\"\n    },\n    \"0x3A4F\": {\n  \
  \      \"data_type\": \"0x001F\",\n        \"name\": \"Nickname\"\n    },\n    \"\
  0x3A50\": {\n        \"data_type\": \"0x001F\",\n        \"name\": \"PersonalHomePage\"\
  \n    },\n    \"0x3A51\": {\n        \"data_type\": \"0x001F\",\n        \"name\"\
  : \"BusinessHomePage\"\n    },\n    \"0x3A57\": {\n        \"data_type\": \"0x001F\"\
  ,\n        \"name\": \"CompanyMainTelephoneNumber\"\n    },\n    \"0x3A58\": {\n\
  \        \"data_type\": \"0x101F\",\n        \"name\": \"ChildrensNames\"\n    },\n\
  \    \"0x3A59\": {\n        \"data_type\": \"0x001F\",\n        \"name\": \"HomeAddressCity\"\
  \n    },\n    \"0x3A5A\": {\n        \"data_type\": \"0x001F\",\n        \"name\"\
  : \"HomeAddressCountry\"\n    },\n    \"0x3A5B\": {\n        \"data_type\": \"0x001F\"\
  ,\n        \"name\": \"HomeAddressPostalCode\"\n    },\n    \"0x3A5C\": {\n    \
  \    \"data_type\": \"0x001F\",\n        \"name\": \"HomeAddressStateOrProvince\"\
  \n    },\n    \"0x3A5D\": {\n        \"data_type\": \"0x001F\",\n        \"name\"\
  : \"HomeAddressStreet\"\n    },\n    \"0x3A5E\": {\n        \"data_type\": \"0x001F\"\
  ,\n        \"name\": \"HomeAddressPostOfficeBox\"\n    },\n    \"0x3A5F\": {\n \
  \       \"data_type\": \"0x001F\",\n        \"name\": \"OtherAddressCity\"\n   \
  \ },\n    \"0x3A60\": {\n        \"data_type\": \"0x001F\",\n        \"name\": \"\
  OtherAddressCountry\"\n    },\n    \"0x3A61\": {\n        \"data_type\": \"0x001F\"\
  ,\n        \"name\": \"OtherAddressPostalCode\"\n    },\n    \"0x3A62\": {\n   \
  \     \"data_type\": \"0x001F\",\n        \"name\": \"OtherAddressStateOrProvince\"\
  \n    },\n    \"0x3A63\": {\n        \"data_type\": \"0x001F\",\n        \"name\"\
  : \"OtherAddressStreet\"\n    },\n    \"0x3A64\": {\n        \"data_type\": \"0x001F\"\
  ,\n        \"name\": \"OtherAddressPostOfficeBox\"\n    },\n    \"0x3A70\": {\n\
  \        \"data_type\": \"0x1102\",\n        \"name\": \"UserX509Certificate\"\n\
  \    },\n    \"0x3A71\": {\n        \"data_type\": \"0x0003\",\n        \"name\"\
  : \"SendInternetEncoding\"\n    },\n    \"0x3F08\": {\n        \"data_type\": \"\
  0x0003\",\n        \"name\": \"InitialDetailsPane\"\n    },\n    \"0x3FDE\": {\n\
  \        \"data_type\": \"0x0003\",\n        \"name\": \"InternetCodepage\"\n  \
  \  },\n    \"0x3FDF\": {\n        \"data_type\": \"0x0003\",\n        \"name\":\
  \ \"AutoResponseSuppress\"\n    },\n    \"0x3FE0\": {\n        \"data_type\": \"\
  0x0102\",\n        \"name\": \"AccessControlListData\"\n    },\n    \"0x3FE3\":\
  \ {\n        \"data_type\": \"0x000B\",\n        \"name\": \"DelegatedByRule\"\n\
  \    },\n    \"0x3FE7\": {\n        \"data_type\": \"0x0003\",\n        \"name\"\
  : \"ResolveMethod\"\n    },\n    \"0x3FEA\": {\n        \"data_type\": \"0x000B\"\
  ,\n        \"name\": \"HasDeferredActionMessages\"\n    },\n    \"0x3FEB\": {\n\
  \        \"data_type\": \"0x0003\",\n        \"name\": \"DeferredSendNumber\"\n\
  \    },\n    \"0x3FEC\": {\n        \"data_type\": \"0x0003\",\n        \"name\"\
  : \"DeferredSendUnits\"\n    },\n    \"0x3FED\": {\n        \"data_type\": \"0x0003\"\
  ,\n        \"name\": \"ExpiryNumber\"\n    },\n    \"0x3FEE\": {\n        \"data_type\"\
  : \"0x0003\",\n        \"name\": \"ExpiryUnits\"\n    },\n    \"0x3FEF\": {\n  \
  \      \"data_type\": \"0x0040\",\n        \"name\": \"DeferredSendTime\"\n    },\n\
  \    \"0x3FF0\": {\n        \"data_type\": \"0x0102\",\n        \"name\": \"ConflictEntryId\"\
  \n    },\n    \"0x3FF1\": {\n        \"data_type\": \"0x0003\",\n        \"name\"\
  : \"MessageLocaleId\"\n    },\n    \"0x3FF8\": {\n        \"data_type\": \"0x001F\"\
  ,\n        \"name\": \"CreatorName\"\n    },\n    \"0x3FF9\": {\n        \"data_type\"\
  : \"0x0102\",\n        \"name\": \"CreatorEntryId\"\n    },\n    \"0x3FFA\": {\n\
  \        \"data_type\": \"0x001F\",\n        \"name\": \"LastModifierName\"\n  \
  \  },\n    \"0x3FFB\": {\n        \"data_type\": \"0x0102\",\n        \"name\":\
  \ \"LastModifierEntryId\"\n    },\n    \"0x3FFD\": {\n        \"data_type\": \"\
  0x0003\",\n        \"name\": \"MessageCodepage\"\n    },\n    \"0x401A\": {\n  \
  \      \"data_type\": \"0x0003\",\n        \"name\": \"SentRepresentingFlags\"\n\
  \    },\n    \"0x4029\": {\n        \"data_type\": \"0x001F\",\n        \"name\"\
  : \"ReadReceiptAddressType\"\n    },\n    \"0x402A\": {\n        \"data_type\":\
  \ \"0x001F\",\n        \"name\": \"ReadReceiptEmailAddress\"\n    },\n    \"0x402B\"\
  : {\n        \"data_type\": \"0x001F\",\n        \"name\": \"ReadReceiptName\"\n\
  \    },\n    \"0x4076\": {\n        \"data_type\": \"0x0003\",\n        \"name\"\
  : \"ContentFilterSpamConfidenceLevel\"\n    },\n    \"0x4079\": {\n        \"data_type\"\
  : \"0x0003\",\n        \"name\": \"SenderIdStatus\"\n    },\n    \"0x4082\": {\n\
  \        \"data_type\": \"0x0040\",\n        \"name\": \"HierRev\"\n    },\n   \
  \ \"0x4083\": {\n        \"data_type\": \"0x001F\",\n        \"name\": \"PurportedSenderDomain\"\
  \n    },\n    \"0x5902\": {\n        \"data_type\": \"0x0003\",\n        \"name\"\
  : \"InternetMailOverrideFormat\"\n    },\n    \"0x5909\": {\n        \"data_type\"\
  : \"0x0003\",\n        \"name\": \"MessageEditorFormat\"\n    },\n    \"0x5D01\"\
  : {\n        \"data_type\": \"0x001F\",\n        \"name\": \"SenderSmtpAddress\"\
  \n    },\n    \"0x5D02\": {\n        \"data_type\": \"0x001F\",\n        \"name\"\
  : \"SentRepresentingSmtpAddress\"\n    },\n    \"0x5D05\": {\n        \"data_type\"\
  : \"0x001F\",\n        \"name\": \"ReadReceiptSmtpAddress\"\n    },\n    \"0x5D07\"\
  : {\n        \"data_type\": \"0x001F\",\n        \"name\": \"ReceivedBySmtpAddress\"\
  \n    },\n    \"0x5D08\": {\n        \"data_type\": \"0x001F\",\n        \"name\"\
  : \"ReceivedRepresentingSmtpAddress\"\n    },\n    \"0x5FDF\": {\n        \"data_type\"\
  : \"0x0003\",\n        \"name\": \"RecipientOrder\"\n    },\n    \"0x5FE1\": {\n\
  \        \"data_type\": \"0x000B\",\n        \"name\": \"RecipientProposed\"\n \
  \   },\n    \"0x5FE3\": {\n        \"data_type\": \"0x0040\",\n        \"name\"\
  : \"RecipientProposedStartTime\"\n    },\n    \"0x5FE4\": {\n        \"data_type\"\
  : \"0x0040\",\n        \"name\": \"RecipientProposedEndTime\"\n    },\n    \"0x5FF6\"\
  : {\n        \"data_type\": \"0x001F\",\n        \"name\": \"RecipientDisplayName\"\
  \n    },\n    \"0x5FF7\": {\n        \"data_type\": \"0x0102\",\n        \"name\"\
  : \"RecipientEntryId\"\n    },\n    \"0x5FFB\": {\n        \"data_type\": \"0x0040\"\
  ,\n        \"name\": \"RecipientTrackStatusTime\"\n    },\n    \"0x5FFD\": {\n \
  \       \"data_type\": \"0x0003\",\n        \"name\": \"RecipientFlags\"\n    },\n\
  \    \"0x5FFF\": {\n        \"data_type\": \"0x0003\",\n        \"name\": \"RecipientTrackStatus\"\
  \n    },\n    \"0x6100\": {\n        \"data_type\": \"0x0003\",\n        \"name\"\
  : \"JunkIncludeContacts\"\n    },\n    \"0x6101\": {\n        \"data_type\": \"\
  0x0003\",\n        \"name\": \"JunkThreshold\"\n    },\n    \"0x6102\": {\n    \
  \    \"data_type\": \"0x0003\",\n        \"name\": \"JunkPermanentlyDelete\"\n \
  \   },\n    \"0x6103\": {\n        \"data_type\": \"0x0003\",\n        \"name\"\
  : \"JunkAddRecipientsToSafeSendersList\"\n    },\n    \"0x6107\": {\n        \"\
  data_type\": \"0x000B\",\n        \"name\": \"JunkPhishingEnableLinks\"\n    },\n\
  \    \"0x64F0\": {\n        \"data_type\": \"0x0102\",\n        \"name\": \"MimeSkeleton\"\
  \n    },\n    \"0x65C2\": {\n        \"data_type\": \"0x0102\",\n        \"name\"\
  : \"ReplyTemplateId\"\n    },\n    \"0x65E0\": {\n        \"data_type\": \"0x0102\"\
  ,\n        \"name\": \"SourceKey\"\n    },\n    \"0x65E1\": {\n        \"data_type\"\
  : \"0x0102\",\n        \"name\": \"ParentSourceKey\"\n    },\n    \"0x65E2\": {\n\
  \        \"data_type\": \"0x0102\",\n        \"name\": \"ChangeKey\"\n    },\n \
  \   \"0x65E3\": {\n        \"data_type\": \"0x0102\",\n        \"name\": \"PredecessorChangeList\"\
  \n    },\n    \"0x65E9\": {\n        \"data_type\": \"0x0003\",\n        \"name\"\
  : \"RuleMessageState\"\n    },\n    \"0x65EA\": {\n        \"data_type\": \"0x0003\"\
  ,\n        \"name\": \"RuleMessageUserFlags\"\n    },\n    \"0x65EB\": {\n     \
  \   \"data_type\": \"0x001F\",\n        \"name\": \"RuleMessageProvider\"\n    },\n\
  \    \"0x65EC\": {\n        \"data_type\": \"0x001F\",\n        \"name\": \"RuleMessageName\"\
  \n    },\n    \"0x65ED\": {\n        \"data_type\": \"0x0003\",\n        \"name\"\
  : \"RuleMessageLevel\"\n    },\n    \"0x65EE\": {\n        \"data_type\": \"0x0102\"\
  ,\n        \"name\": \"RuleMessageProviderData\"\n    },\n    \"0x65F3\": {\n  \
  \      \"data_type\": \"0x0003\",\n        \"name\": \"RuleMessageSequence\"\n \
  \   },\n    \"0x6619\": {\n        \"data_type\": \"0x0102\",\n        \"name\"\
  : \"UserEntryId\"\n    },\n    \"0x661B\": {\n        \"data_type\": \"0x0102\"\
  ,\n        \"name\": \"MailboxOwnerEntryId\"\n    },\n    \"0x661C\": {\n      \
  \  \"data_type\": \"0x001F\",\n        \"name\": \"MailboxOwnerName\"\n    },\n\
  \    \"0x661D\": {\n        \"data_type\": \"0x000B\",\n        \"name\": \"OutOfOfficeState\"\
  \n    },\n    \"0x6622\": {\n        \"data_type\": \"0x0102\",\n        \"name\"\
  : \"SchedulePlusFreeBusyEntryId\"\n    },\n    \"0x6638\": {\n        \"data_type\"\
  : \"0x0102\",\n        \"name\": \"SerializedReplidGuidMap\"\n    },\n    \"0x6639\"\
  : {\n        \"data_type\": \"0x0003\",\n        \"name\": \"Rights\"\n    },\n\
  \    \"0x663A\": {\n        \"data_type\": \"0x000B\",\n        \"name\": \"HasRules\"\
  \n    },\n    \"0x663B\": {\n        \"data_type\": \"0x0102\",\n        \"name\"\
  : \"AddressBookEntryId\"\n    },\n    \"0x663E\": {\n        \"data_type\": \"0x0003\"\
  ,\n        \"name\": \"HierarchyChangeNumber\"\n    },\n    \"0x6645\": {\n    \
  \    \"data_type\": \"0x0102\",\n        \"name\": \"ClientActions\"\n    },\n \
  \   \"0x6646\": {\n        \"data_type\": \"0x0102\",\n        \"name\": \"DamOriginalEntryId\"\
  \n    },\n    \"0x6647\": {\n        \"data_type\": \"0x000B\",\n        \"name\"\
  : \"DamBackPatched\"\n    },\n    \"0x6648\": {\n        \"data_type\": \"0x0003\"\
  ,\n        \"name\": \"RuleError\"\n    },\n    \"0x6649\": {\n        \"data_type\"\
  : \"0x0003\",\n        \"name\": \"RuleActionType\"\n    },\n    \"0x664A\": {\n\
  \        \"data_type\": \"0x000B\",\n        \"name\": \"HasNamedProperties\"\n\
  \    },\n    \"0x6650\": {\n        \"data_type\": \"0x0003\",\n        \"name\"\
  : \"RuleActionNumber\"\n    },\n    \"0x6651\": {\n        \"data_type\": \"0x0102\"\
  ,\n        \"name\": \"RuleFolderEntryId\"\n    },\n    \"0x666A\": {\n        \"\
  data_type\": \"0x0003\",\n        \"name\": \"ProhibitReceiveQuota\"\n    },\n \
  \   \"0x666C\": {\n        \"data_type\": \"0x000B\",\n        \"name\": \"InConflict\"\
  \n    },\n    \"0x666D\": {\n        \"data_type\": \"0x0003\",\n        \"name\"\
  : \"MaximumSubmitMessageSize\"\n    },\n    \"0x666E\": {\n        \"data_type\"\
  : \"0x0003\",\n        \"name\": \"ProhibitSendQuota\"\n    },\n    \"0x6671\":\
  \ {\n        \"data_type\": \"0x0014\",\n        \"name\": \"MemberId\"\n    },\n\
  \    \"0x6672\": {\n        \"data_type\": \"0x001F\",\n        \"name\": \"MemberName\"\
  \n    },\n    \"0x6673\": {\n        \"data_type\": \"0x0003\",\n        \"name\"\
  : \"MemberRights\"\n    },\n    \"0x6674\": {\n        \"data_type\": \"0x0014\"\
  ,\n        \"name\": \"RuleId\"\n    },\n    \"0x6675\": {\n        \"data_type\"\
  : \"0x0102\",\n        \"name\": \"RuleIds\"\n    },\n    \"0x6676\": {\n      \
  \  \"data_type\": \"0x0003\",\n        \"name\": \"RuleSequence\"\n    },\n    \"\
  0x6677\": {\n        \"data_type\": \"0x0003\",\n        \"name\": \"RuleState\"\
  \n    },\n    \"0x6678\": {\n        \"data_type\": \"0x0003\",\n        \"name\"\
  : \"RuleUserFlags\"\n    },\n    \"0x6679\": {\n        \"data_type\": \"0x00FD\"\
  ,\n        \"name\": \"RuleCondition\"\n    },\n    \"0x6680\": {\n        \"data_type\"\
  : \"0x00FE\",\n        \"name\": \"RuleActions\"\n    },\n    \"0x6681\": {\n  \
  \      \"data_type\": \"0x001F\",\n        \"name\": \"RuleProvider\"\n    },\n\
  \    \"0x6682\": {\n        \"data_type\": \"0x001F\",\n        \"name\": \"RuleName\"\
  \n    },\n    \"0x6683\": {\n        \"data_type\": \"0x0003\",\n        \"name\"\
  : \"RuleLevel\"\n    },\n    \"0x6684\": {\n        \"data_type\": \"0x0102\",\n\
  \        \"name\": \"RuleProviderData\"\n    },\n    \"0x668F\": {\n        \"data_type\"\
  : \"0x0040\",\n        \"name\": \"DeletedOn\"\n    },\n    \"0x66A1\": {\n    \
  \    \"data_type\": \"0x0003\",\n        \"name\": \"LocaleId\"\n    },\n    \"\
  0x66A8\": {\n        \"data_type\": \"0x0003\",\n        \"name\": \"FolderFlags\"\
  \n    },\n    \"0x66C3\": {\n        \"data_type\": \"0x0003\",\n        \"name\"\
  : \"CodePageId\"\n    },\n    \"0x6704\": {\n        \"data_type\": \"0x000D\",\n\
  \        \"name\": \"AddressBookManageDistributionList\"\n    },\n    \"0x6705\"\
  : {\n        \"data_type\": \"0x0003\",\n        \"name\": \"SortLocaleId\"\n  \
  \  },\n    \"0x6709\": {\n        \"data_type\": \"0x0040\",\n        \"name\":\
  \ \"LocalCommitTime\"\n    },\n    \"0x670A\": {\n        \"data_type\": \"0x0040\"\
  ,\n        \"name\": \"LocalCommitTimeMax\"\n    },\n    \"0x670B\": {\n       \
  \ \"data_type\": \"0x0003\",\n        \"name\": \"DeletedCountTotal\"\n    },\n\
  \    \"0x670E\": {\n        \"data_type\": \"0x001F\",\n        \"name\": \"FlatUrlName\"\
  \n    },\n    \"0x6740\": {\n        \"data_type\": \"0x00FB\",\n        \"name\"\
  : \"SentMailSvrEID\"\n    },\n    \"0x6741\": {\n        \"data_type\": \"0x00FB\"\
  ,\n        \"name\": \"DeferredActionMessageOriginalEntryId\"\n    },\n    \"0x6748\"\
  : {\n        \"data_type\": \"0x0014\",\n        \"name\": \"FolderId\"\n    },\n\
  \    \"0x6749\": {\n        \"data_type\": \"0x0014\",\n        \"name\": \"ParentFolderId\"\
  \n    },\n    \"0x674A\": {\n        \"data_type\": \"0x0014\",\n        \"name\"\
  : \"Mid\"\n    },\n    \"0x674D\": {\n        \"data_type\": \"0x0014\",\n     \
  \   \"name\": \"InstID\"\n    },\n    \"0x674E\": {\n        \"data_type\": \"0x0003\"\
  ,\n        \"name\": \"InstanceNum\"\n    },\n    \"0x674F\": {\n        \"data_type\"\
  : \"0x0014\",\n        \"name\": \"AddressBookMessageId\"\n    },\n    \"0x67A4\"\
  : {\n        \"data_type\": \"0x0014\",\n        \"name\": \"ChangeNumber\"\n  \
  \  },\n    \"0x67AA\": {\n        \"data_type\": \"0x000B\",\n        \"name\":\
  \ \"Associated\"\n    },\n    \"0x6800\": {\n        \"data_type\": \"0x001F\",\n\
  \        \"name\": \"OfflineAddressBookName\"\n    },\n    \"0x6801\": {\n     \
  \   \"data_type\": \"0x0003\",\n        \"name\": \"VoiceMessageDuration\"\n   \
  \ },\n    \"0x6802\": {\n        \"data_type\": \"0x001F\",\n        \"name\": \"\
  SenderTelephoneNumber\"\n    },\n    \"0x6803\": {\n        \"data_type\": \"0x001F\"\
  ,\n        \"name\": \"VoiceMessageSenderName\"\n    },\n    \"0x6804\": {\n   \
  \     \"data_type\": \"0x001E\",\n        \"name\": \"OfflineAddressBookDistinguishedName\"\
  \n    },\n    \"0x6805\": {\n        \"data_type\": \"0x001F\",\n        \"name\"\
  : \"VoiceMessageAttachmentOrder\"\n    },\n    \"0x6806\": {\n        \"data_type\"\
  : \"0x001F\",\n        \"name\": \"CallId\"\n    },\n    \"0x6820\": {\n       \
  \ \"data_type\": \"0x001F\",\n        \"name\": \"ReportingMessageTransferAgent\"\
  \n    },\n    \"0x6834\": {\n        \"data_type\": \"0x0003\",\n        \"name\"\
  : \"SearchFolderLastUsed\"\n    },\n    \"0x683A\": {\n        \"data_type\": \"\
  0x0003\",\n        \"name\": \"SearchFolderExpiration\"\n    },\n    \"0x6841\"\
  : {\n        \"data_type\": \"0x0003\",\n        \"name\": \"SearchFolderTemplateId\"\
  \n    },\n    \"0x6842\": {\n        \"data_type\": \"0x0102\",\n        \"name\"\
  : \"WlinkGroupHeaderID\"\n    },\n    \"0x6843\": {\n        \"data_type\": \"0x000B\"\
  ,\n        \"name\": \"ScheduleInfoDontMailDelegates\"\n    },\n    \"0x6844\":\
  \ {\n        \"data_type\": \"0x0102\",\n        \"name\": \"SearchFolderRecreateInfo\"\
  \n    },\n    \"0x6845\": {\n        \"data_type\": \"0x0102\",\n        \"name\"\
  : \"SearchFolderDefinition\"\n    },\n    \"0x6846\": {\n        \"data_type\":\
  \ \"0x0003\",\n        \"name\": \"SearchFolderStorageType\"\n    },\n    \"0x6847\"\
  : {\n        \"data_type\": \"0x0003\",\n        \"name\": \"WlinkSaveStamp\"\n\
  \    },\n    \"0x6848\": {\n        \"data_type\": \"0x0003\",\n        \"name\"\
  : \"SearchFolderEfpFlags\"\n    },\n    \"0x6849\": {\n        \"data_type\": \"\
  0x0003\",\n        \"name\": \"WlinkType\"\n    },\n    \"0x684A\": {\n        \"\
  data_type\": \"0x0003\",\n        \"name\": \"WlinkFlags\"\n    },\n    \"0x684B\"\
  : {\n        \"data_type\": \"0x0102\",\n        \"name\": \"WlinkOrdinal\"\n  \
  \  },\n    \"0x684C\": {\n        \"data_type\": \"0x0102\",\n        \"name\":\
  \ \"WlinkEntryId\"\n    },\n    \"0x684D\": {\n        \"data_type\": \"0x0102\"\
  ,\n        \"name\": \"WlinkRecordKey\"\n    },\n    \"0x684E\": {\n        \"data_type\"\
  : \"0x0102\",\n        \"name\": \"WlinkStoreEntryId\"\n    },\n    \"0x684F\":\
  \ {\n        \"data_type\": \"0x0102\",\n        \"name\": \"WlinkFolderType\"\n\
  \    },\n    \"0x6850\": {\n        \"data_type\": \"0x0102\",\n        \"name\"\
  : \"WlinkGroupClsid\"\n    },\n    \"0x6851\": {\n        \"data_type\": \"0x001F\"\
  ,\n        \"name\": \"WlinkGroupName\"\n    },\n    \"0x6852\": {\n        \"data_type\"\
  : \"0x0003\",\n        \"name\": \"WlinkSection\"\n    },\n    \"0x6853\": {\n \
  \       \"data_type\": \"0x0003\",\n        \"name\": \"WlinkCalendarColor\"\n \
  \   },\n    \"0x6854\": {\n        \"data_type\": \"0x0102\",\n        \"name\"\
  : \"WlinkAddressBookEID\"\n    },\n    \"0x6855\": {\n        \"data_type\": \"\
  0x1003\",\n        \"name\": \"ScheduleInfoMonthsAway\"\n    },\n    \"0x6856\"\
  : {\n        \"data_type\": \"0x1102\",\n        \"name\": \"ScheduleInfoFreeBusyAway\"\
  \n    },\n    \"0x6868\": {\n        \"data_type\": \"0x0040\",\n        \"name\"\
  : \"FreeBusyRangeTimestamp\"\n    },\n    \"0x6869\": {\n        \"data_type\":\
  \ \"0x0003\",\n        \"name\": \"FreeBusyCountMonths\"\n    },\n    \"0x686A\"\
  : {\n        \"data_type\": \"0x0102\",\n        \"name\": \"ScheduleInfoAppointmentTombstone\"\
  \n    },\n    \"0x686B\": {\n        \"data_type\": \"0x1003\",\n        \"name\"\
  : \"DelegateFlags\"\n    },\n    \"0x686C\": {\n        \"data_type\": \"0x0102\"\
  ,\n        \"name\": \"ScheduleInfoFreeBusy\"\n    },\n    \"0x686D\": {\n     \
  \   \"data_type\": \"0x000B\",\n        \"name\": \"ScheduleInfoAutoAcceptAppointments\"\
  \n    },\n    \"0x686E\": {\n        \"data_type\": \"0x000B\",\n        \"name\"\
  : \"ScheduleInfoDisallowRecurringAppts\"\n    },\n    \"0x686F\": {\n        \"\
  data_type\": \"0x000B\",\n        \"name\": \"ScheduleInfoDisallowOverlappingAppts\"\
  \n    },\n    \"0x6890\": {\n        \"data_type\": \"0x0102\",\n        \"name\"\
  : \"WlinkClientID\"\n    },\n    \"0x6891\": {\n        \"data_type\": \"0x0102\"\
  ,\n        \"name\": \"WlinkAddressBookStoreEID\"\n    },\n    \"0x6892\": {\n \
  \       \"data_type\": \"0x0003\",\n        \"name\": \"WlinkROGroupType\"\n   \
  \ },\n    \"0x7001\": {\n        \"data_type\": \"0x0102\",\n        \"name\": \"\
  ViewDescriptorBinary\"\n    },\n    \"0x7002\": {\n        \"data_type\": \"0x001F\"\
  ,\n        \"name\": \"ViewDescriptorStrings\"\n    },\n    \"0x7006\": {\n    \
  \    \"data_type\": \"0x001F\",\n        \"name\": \"ViewDescriptorName\"\n    },\n\
  \    \"0x7007\": {\n        \"data_type\": \"0x0003\",\n        \"name\": \"ViewDescriptorVersion\"\
  \n    },\n    \"0x7C06\": {\n        \"data_type\": \"0x0003\",\n        \"name\"\
  : \"RoamingDatatypes\"\n    },\n    \"0x7C07\": {\n        \"data_type\": \"0x0102\"\
  ,\n        \"name\": \"RoamingDictionary\"\n    },\n    \"0x7C08\": {\n        \"\
  data_type\": \"0x0102\",\n        \"name\": \"RoamingXmlStream\"\n    },\n    \"\
  0x7C24\": {\n        \"data_type\": \"0x000B\",\n        \"name\": \"OscSyncEnabled\"\
  \n    },\n    \"0x7D01\": {\n        \"data_type\": \"0x000B\",\n        \"name\"\
  : \"Processed\"\n    },\n    \"0x7FF9\": {\n        \"data_type\": \"0x0040\",\n\
  \        \"name\": \"ExceptionReplaceTime\"\n    },\n    \"0x7FFA\": {\n       \
  \ \"data_type\": \"0x0003\",\n        \"name\": \"AttachmentLinkId\"\n    },\n \
  \   \"0x7FFB\": {\n        \"data_type\": \"0x0040\",\n        \"name\": \"ExceptionStartTime\"\
  \n    },\n    \"0x7FFC\": {\n        \"data_type\": \"0x0040\",\n        \"name\"\
  : \"ExceptionEndTime\"\n    },\n    \"0x7FFD\": {\n        \"data_type\": \"0x0003\"\
  ,\n        \"name\": \"AttachmentFlags\"\n    },\n    \"0x7FFE\": {\n        \"\
  data_type\": \"0x000B\",\n        \"name\": \"AttachmentHidden\"\n    },\n    \"\
  0x7FFF\": {\n        \"data_type\": \"0x000B\",\n        \"name\": \"AttachmentContactPhoto\"\
  \n    },\n    \"0x8004\": {\n        \"data_type\": \"0x001F\",\n        \"name\"\
  : \"AddressBookFolderPathname\"\n    },\n    \"0x8005\": {\n        \"data_type\"\
  : \"0x001F\",\n        \"name\": \"AddressBookManagerDistinguishedName\"\n    },\n\
  \    \"0x8006\": {\n        \"data_type\": \"0x001E\",\n        \"name\": \"AddressBookHomeMessageDatabase\"\
  \n    },\n    \"0x8008\": {\n        \"data_type\": \"0x001E\",\n        \"name\"\
  : \"AddressBookIsMemberOfDistributionList\"\n    },\n    \"0x8009\": {\n       \
  \ \"data_type\": \"0x000D\",\n        \"name\": \"AddressBookMember\"\n    },\n\
  \    \"0x800C\": {\n        \"data_type\": \"0x000D\",\n        \"name\": \"AddressBookOwner\"\
  \n    },\n    \"0x800E\": {\n        \"data_type\": \"0x000D\",\n        \"name\"\
  : \"AddressBookReports\"\n    },\n    \"0x800F\": {\n        \"data_type\": \"0x101F\"\
  ,\n        \"name\": \"AddressBookProxyAddresses\"\n    },\n    \"0x8011\": {\n\
  \        \"data_type\": \"0x001F\",\n        \"name\": \"AddressBookTargetAddress\"\
  \n    },\n    \"0x8015\": {\n        \"data_type\": \"0x000D\",\n        \"name\"\
  : \"AddressBookPublicDelegates\"\n    },\n    \"0x8024\": {\n        \"data_type\"\
  : \"0x000D\",\n        \"name\": \"AddressBookOwnerBackLink\"\n    },\n    \"0x802D\"\
  : {\n        \"data_type\": \"0x001F\",\n        \"name\": \"AddressBookExtensionAttribute1\"\
  \n    },\n    \"0x802E\": {\n        \"data_type\": \"0x001F\",\n        \"name\"\
  : \"AddressBookExtensionAttribute2\"\n    },\n    \"0x802F\": {\n        \"data_type\"\
  : \"0x001F\",\n        \"name\": \"AddressBookExtensionAttribute3\"\n    },\n  \
  \  \"0x8030\": {\n        \"data_type\": \"0x001F\",\n        \"name\": \"AddressBookExtensionAttribute4\"\
  \n    },\n    \"0x8031\": {\n        \"data_type\": \"0x001F\",\n        \"name\"\
  : \"AddressBookExtensionAttribute5\"\n    },\n    \"0x8032\": {\n        \"data_type\"\
  : \"0x001F\",\n        \"name\": \"AddressBookExtensionAttribute6\"\n    },\n  \
  \  \"0x8033\": {\n        \"data_type\": \"0x001F\",\n        \"name\": \"AddressBookExtensionAttribute7\"\
  \n    },\n    \"0x8034\": {\n        \"data_type\": \"0x001F\",\n        \"name\"\
  : \"AddressBookExtensionAttribute8\"\n    },\n    \"0x8035\": {\n        \"data_type\"\
  : \"0x001F\",\n        \"name\": \"AddressBookExtensionAttribute9\"\n    },\n  \
  \  \"0x8036\": {\n        \"data_type\": \"0x001F\",\n        \"name\": \"AddressBookExtensionAttribute10\"\
  \n    },\n    \"0x803C\": {\n        \"data_type\": \"0x001F\",\n        \"name\"\
  : \"AddressBookObjectDistinguishedName\"\n    },\n    \"0x806A\": {\n        \"\
  data_type\": \"0x0003\",\n        \"name\": \"AddressBookDeliveryContentLength\"\
  \n    },\n    \"0x8073\": {\n        \"data_type\": \"0x000D\",\n        \"name\"\
  : \"AddressBookDistributionListMemberSubmitAccepted\"\n    },\n    \"0x8170\": {\n\
  \        \"data_type\": \"0x101F\",\n        \"name\": \"AddressBookNetworkAddress\"\
  \n    },\n    \"0x8C57\": {\n        \"data_type\": \"0x001F\",\n        \"name\"\
  : \"AddressBookExtensionAttribute11\"\n    },\n    \"0x8C58\": {\n        \"data_type\"\
  : \"0x001F\",\n        \"name\": \"AddressBookExtensionAttribute12\"\n    },\n \
  \   \"0x8C59\": {\n        \"data_type\": \"0x001F\",\n        \"name\": \"AddressBookExtensionAttribute13\"\
  \n    },\n    \"0x8C60\": {\n        \"data_type\": \"0x001F\",\n        \"name\"\
  : \"AddressBookExtensionAttribute14\"\n    },\n    \"0x8C61\": {\n        \"data_type\"\
  : \"0x001F\",\n        \"name\": \"AddressBookExtensionAttribute15\"\n    },\n \
  \   \"0x8C6A\": {\n        \"data_type\": \"0x1102\",\n        \"name\": \"AddressBookX509Certificate\"\
  \n    },\n    \"0x8C6D\": {\n        \"data_type\": \"0x0102\",\n        \"name\"\
  : \"AddressBookObjectGuid\"\n    },\n    \"0x8C8E\": {\n        \"data_type\": \"\
  0x001F\",\n        \"name\": \"AddressBookPhoneticGivenName\"\n    },\n    \"0x8C8F\"\
  : {\n        \"data_type\": \"0x001F\",\n        \"name\": \"AddressBookPhoneticSurname\"\
  \n    },\n    \"0x8C90\": {\n        \"data_type\": \"0x001F\",\n        \"name\"\
  : \"AddressBookPhoneticDepartmentName\"\n    },\n    \"0x8C91\": {\n        \"data_type\"\
  : \"0x001F\",\n        \"name\": \"AddressBookPhoneticCompanyName\"\n    },\n  \
  \  \"0x8C92\": {\n        \"data_type\": \"0x001F\",\n        \"name\": \"AddressBookPhoneticDisplayName\"\
  \n    },\n    \"0x8C93\": {\n        \"data_type\": \"0x0003\",\n        \"name\"\
  : \"AddressBookDisplayTypeExtended\"\n    },\n    \"0x8C94\": {\n        \"data_type\"\
  : \"0x000D\",\n        \"name\": \"AddressBookHierarchicalShowInDepartments\"\n\
  \    },\n    \"0x8C96\": {\n        \"data_type\": \"0x101F\",\n        \"name\"\
  : \"AddressBookRoomContainers\"\n    },\n    \"0x8C97\": {\n        \"data_type\"\
  : \"0x000D\",\n        \"name\": \"AddressBookHierarchicalDepartmentMembers\"\n\
  \    },\n    \"0x8C98\": {\n        \"data_type\": \"0x001E\",\n        \"name\"\
  : \"AddressBookHierarchicalRootDepartment\"\n    },\n    \"0x8C99\": {\n       \
  \ \"data_type\": \"0x000D\",\n        \"name\": \"AddressBookHierarchicalParentDepartment\"\
  \n    },\n    \"0x8C9A\": {\n        \"data_type\": \"0x000D\",\n        \"name\"\
  : \"AddressBookHierarchicalChildDepartments\"\n    },\n    \"0x8C9E\": {\n     \
  \   \"data_type\": \"0x0102\",\n        \"name\": \"ThumbnailPhoto\"\n    },\n \
  \   \"0x8CA0\": {\n        \"data_type\": \"0x0003\",\n        \"name\": \"AddressBookSeniorityIndex\"\
  \n    },\n    \"0x8CA8\": {\n        \"data_type\": \"0x001F\",\n        \"name\"\
  : \"AddressBookOrganizationalUnitRootDistinguishedName\"\n    },\n    \"0x8CAC\"\
  : {\n        \"data_type\": \"0x101F\",\n        \"name\": \"AddressBookSenderHintTranslations\"\
  \n    },\n    \"0x8CB5\": {\n        \"data_type\": \"0x000B\",\n        \"name\"\
  : \"AddressBookModerationEnabled\"\n    },\n    \"0x8CC2\": {\n        \"data_type\"\
  : \"0x0102\",\n        \"name\": \"SpokenName\"\n    },\n    \"0x8CD8\": {\n   \
  \     \"data_type\": \"0x000D\",\n        \"name\": \"AddressBookAuthorizedSenders\"\
  \n    },\n    \"0x8CD9\": {\n        \"data_type\": \"0x000D\",\n        \"name\"\
  : \"AddressBookUnauthorizedSenders\"\n    },\n    \"0x8CDA\": {\n        \"data_type\"\
  : \"0x000D\",\n        \"name\": \"AddressBookDistributionListMemberSubmitRejected\"\
  \n    },\n    \"0x8CDB\": {\n        \"data_type\": \"0x000D\",\n        \"name\"\
  : \"AddressBookDistributionListRejectMessagesFromDLMembers\"\n    },\n    \"0x8CDD\"\
  : {\n        \"data_type\": \"0x000B\",\n        \"name\": \"AddressBookHierarchicalIsHierarchicalGroup\"\
  \n    },\n    \"0x8CE2\": {\n        \"data_type\": \"0x0003\",\n        \"name\"\
  : \"AddressBookDistributionListMemberCount\"\n    },\n    \"0x8CE3\": {\n      \
  \  \"data_type\": \"0x0003\",\n        \"name\": \"AddressBookDistributionListExternalMemberCount\"\
  \n    },\n    \"0xFFFB\": {\n        \"data_type\": \"0x000B\",\n        \"name\"\
  : \"AddressBookIsMaster\"\n    },\n    \"0xFFFC\": {\n        \"data_type\": \"\
  0x0102\",\n        \"name\": \"AddressBookParentEntryId\"\n    },\n    \"0xFFFD\"\
  : {\n        \"data_type\": \"0x0003\",\n        \"name\": \"AddressBookContainerId\"\
  \n    }\n}\n\nTOP_LEVEL_HEADER_SIZE = 32\nRECIPIENT_HEADER_SIZE = 8\nATTACHMENT_HEADER_SIZE\
  \ = 8\nEMBEDDED_MSG_HEADER_SIZE = 24\nCONTROL_CHARS = re.compile(r'[\\n\\r\\t]')\n\
  \n\nclass Message(object):\n    \"\"\"\n     Class to store Message properties\n\
  \    \"\"\"\n\n    def __init__(self, directory_entries, parent_directory_path=None):\n\
  \n        if parent_directory_path is None:\n            parent_directory_path =\
  \ []\n\n        self._streams = self._process_directory_entries(directory_entries)\n\
  \        self.embedded_messages = []\n        self._data_model = DataModel()\n \
  \       self._parent_directory_path = parent_directory_path\n        self._nested_attachments_depth\
  \ = 0\n        self.properties = self._get_properties()\n        self.attachments\
  \ = self._get_attachments()\n        self.recipients = self._get_recipients()\n\n\
  \        self._set_properties()\n        self._set_attachments()\n        self._set_recipients()\n\
  \n    def _get_attachments_names(self):\n        names = []\n        for attachment\
  \ in self.attachments:\n            names.append(attachment.DisplayName)\n\n   \
  \     return names\n\n    def get_all_attachments(self):\n        attachments =\
  \ self.attachments\n\n        for embedded_message in self.embedded_messages:\n\
  \            attachments.extend(embedded_message.get_all_attachments())\n\n    \
  \    return attachments\n\n    def as_dict(self):\n        embedded_messages_list\
  \ = []\n        for embedded_message in self.embedded_messages:\n            embedded_messages_list.append(embedded_message.as_dict())\n\
  \n        def join(arr):\n            if isinstance(arr, list):\n              \
  \  arr = [item for item in arr if item is not None]\n                return \",\"\
  .join(arr)\n\n            return \"\"\n\n        if self.cc is not None:\n     \
  \       cc = join([extract_address(cc) for cc in self.cc])\n\n        if self.bcc\
  \ is not None:\n            bcc = join([extract_address(bcc) for bcc in self.bcc])\n\
  \n        recipients = None\n        if self.to is not None:\n            recipients\
  \ = join([extract_address(recipient.EmailAddress) for recipient in self.recipients])\n\
  \n        if self.sender is not None:\n            sender = join([extract_address(sender)\
  \ for sender in self.sender])\n\n        html = self.html\n        if not html:\n\
  \            html = self.body\n\n        message_dict = {\n            'Label/Email/attachments':\
  \ join(self._get_attachments_names()),\n            'Label/Email/cc': cc,\n    \
  \        'Label/Email': recipients,\n            'Label/Email/from': sender,\n \
  \           'Label/Email/subject': self.subject,\n            'Label/Email/text':\
  \ self.body,\n            'Label/Email/html': html,\n            'Label/Email/headers':\
  \ str(self.header) if self.header is not None else None\n        }\n        return\
  \ message_dict\n\n    def get_attached_emails_hierarchy(self):\n        attached_emails\
  \ = []\n        for embedded_message in self.embedded_messages:\n            attached_emails.append(embedded_message.as_dict())\n\
  \            attached_emails.extend(embedded_message.get_attached_emails_hierarchy())\n\
  \n        return attached_emails\n\n    def _set_property_stream_info(self, ole_file,\
  \ header_size):\n        property_dir_entry = ole_file.openstream('__properties_version1.0')\n\
  \        version_stream_data = property_dir_entry.read()\n\n        if not version_stream_data:\n\
  \            raise Exception(\"Invalid MSG file provided, 'properties_version1.0'\
  \ stream data is empty.\")\n\n        if version_stream_data:\n\n            if\
  \ header_size >= EMBEDDED_MSG_HEADER_SIZE:\n\n                properties_metadata\
  \ = unpack('8sIIII', version_stream_data[:24])\n                if not properties_metadata\
  \ or not len(properties_metadata) >= 5:\n                    raise Exception(\"\
  'properties_version1.0' stream data is corrupted.\")\n                self.next_recipient_id\
  \ = properties_metadata[1]\n                self.next_attachment_id = properties_metadata[2]\n\
  \                self.recipient_count = properties_metadata[3]\n               \
  \ self.attachment_count = properties_metadata[4]\n\n            if (len(version_stream_data)\
  \ - header_size) % 16 != 0:\n                raise Exception('Property Stream size\
  \ less header is not exactly divisible by 16')\n\n            self.property_entries_count\
  \ = (len(version_stream_data) - header_size) / 16\n\n    @staticmethod\n    def\
  \ _process_directory_entries(directory_entries):\n\n        streams = {\n      \
  \      \"properties\": {},\n            \"recipients\": {},\n            \"attachments\"\
  : {}\n        }\n        for name, stream in directory_entries.iteritems():\n  \
  \          # collect properties\n            if \"__substg1.0_\" in name:\n    \
  \            streams[\"properties\"][name] = stream\n\n            # collect attachments\n\
  \            elif \"__attach_\" in name:\n                streams[\"attachments\"\
  ][name] = stream.kids\n\n            # collect recipients\n            elif \"__recip_\"\
  \ in name:\n                streams[\"recipients\"][name] = stream.kids\n\n    \
  \        # unknown stream name\n            else:\n                continue\n\n\
  \        return streams\n\n    def _get_properties(self):\n\n        directory_entries\
  \ = self._streams.get(\"properties\")\n        directory_name_filter = \"__substg1.0_\"\
  \n        property_entries = {}\n        for directory_name, directory_entry in\
  \ directory_entries.iteritems():\n\n            if directory_name_filter not in\
  \ directory_name:\n                continue\n\n            if not directory_entry:\n\
  \                continue\n\n            if isinstance(directory_entry, list):\n\
  \                directory_values = {}\n                for property_entry in directory_entry:\n\
  \                    property_data = self._get_property_data(directory_name, property_entry,\
  \ is_list=True)\n                    if property_data:\n                       \
  \ directory_values.update(property_data)\n\n                property_entries[directory_name]\
  \ = directory_values\n            else:\n                property_data = self._get_property_data(directory_name,\
  \ directory_entry)\n                if property_data:\n                    property_entries.update(property_data)\n\
  \        return property_entries\n\n    def _get_recipients(self):\n\n        directory_entries\
  \ = self._streams.get(\"recipients\")\n        directory_name_filter = \"__recip_version1.0_\"\
  \n        recipient_entries = {}\n        for directory_name, directory_entry in\
  \ directory_entries.iteritems():\n\n            if directory_name_filter not in\
  \ directory_name:\n                continue\n\n            if not directory_entry:\n\
  \                continue\n\n            if isinstance(directory_entry, list):\n\
  \                directory_values = {}\n                for property_entry in directory_entry:\n\
  \                    property_data = self._get_property_data(directory_name, property_entry,\
  \ is_list=True)\n                    if property_data:\n                       \
  \ directory_values.update(property_data)\n\n                recipient_address =\
  \ directory_values.get(\n                    'EmailAddress', directory_values.get('SmtpAddress',\
  \ directory_name)\n                )\n                recipient_entries[recipient_address]\
  \ = directory_values\n            else:\n                property_data = self._get_property_data(directory_name,\
  \ directory_entry)\n                if property_data:\n                    recipient_entries.update(property_data)\n\
  \        return recipient_entries\n\n    def _get_attachments(self):\n        directory_entries\
  \ = self._streams.get(\"attachments\")\n        directory_name_filter = \"__attach_version1.0_\"\
  \n        attachment_entries = {}\n        for directory_name, directory_entry in\
  \ directory_entries.iteritems():\n            if directory_name_filter not in directory_name:\n\
  \                continue\n\n            if not directory_entry:\n             \
  \   continue\n\n            if isinstance(directory_entry, list):\n            \
  \    directory_values = {}\n                for property_entry in directory_entry:\n\
  \n                    kids = property_entry.kids\n                    if kids:\n\
  \                        embedded_message = Message(\n                         \
  \   property_entry.kids_dict,\n                            self._parent_directory_path\
  \ + [directory_name, property_entry.name]\n                        )\n\n       \
  \                 directory_values[\"EmbeddedMessage\"] = {\n                  \
  \          \"properties\": embedded_message.properties,\n                      \
  \      \"recipients\": embedded_message.recipients,\n                          \
  \  \"attachments\": embedded_message.attachments\n                        }\n  \
  \                      self.embedded_messages.append(embedded_message)\n\n     \
  \               property_data = self._get_property_data(directory_name, property_entry,\
  \ is_list=True)\n                    if property_data:\n                       \
  \ directory_values.update(property_data)\n\n                attachment_entries[directory_name]\
  \ = directory_values\n\n            else:\n                property_data = self._get_property_data(directory_name,\
  \ directory_entry)\n                if property_data:\n                    attachment_entries.update(property_data)\n\
  \        return attachment_entries\n\n    def _get_property_data(self, directory_name,\
  \ directory_entry, is_list=False):\n        directory_entry_name = directory_entry.name\n\
  \        if is_list:\n            stream_name = [directory_name, directory_entry_name]\n\
  \        else:\n            stream_name = [directory_entry_name]\n\n        if self._parent_directory_path:\n\
  \            stream_name = self._parent_directory_path + stream_name\n\n       \
  \ ole_file = directory_entry.olefile\n        property_details = self._get_canonical_property_name(directory_entry_name)\n\
  \        if not property_details:\n            return None\n\n        property_name\
  \ = property_details.get(\"name\")\n        property_type = property_details.get(\"\
  data_type\")\n        if not property_type:\n            return None\n\n       \
  \ try:\n            raw_content = ole_file.openstream(stream_name).read()\n    \
  \    except IOError:\n            raw_content = None\n        property_value = self._data_model.get_value(raw_content,\
  \ data_type=property_type)\n        if property_value:\n            property_detail\
  \ = {property_name: property_value}\n        else:\n            property_detail\
  \ = None\n\n        return property_detail\n\n    @staticmethod\n    def _get_canonical_property_name(dir_entry_name):\n\
  \        if not dir_entry_name:\n            return None\n\n        if \"__substg1.0_\"\
  \ in dir_entry_name:\n            name = dir_entry_name.replace(\"__substg1.0_\"\
  , \"\")\n            prop_name_id = \"0x\" + name[0:4]\n            prop_details\
  \ = PROPS_ID_MAP.get(prop_name_id)\n            return prop_details\n\n        return\
  \ None\n\n    def _set_properties(self):\n        property_values = self.properties\n\
  \n        # setting generally required properties to easily access using MsOxMessage\
  \ instance.\n        self.subject = property_values.get(\"Subject\")\n\n       \
  \ header = property_values.get(\"TransportMessageHeaders\")\n        self.header\
  \ = parse_email_headers(header, True)\n        self.header_dict = parse_email_headers(header)\
  \ or {}\n\n        self.created_date = property_values.get(\"CreationTime\")\n \
  \       self.received_date = property_values.get(\"ReceiptTime\")\n\n        sent_date\
  \ = property_values.get(\"DeliverTime\")\n        if not sent_date:\n          \
  \  sent_date = self.header_dict.get(\"Date\")\n        self.sent_date = sent_date\n\
  \n        sender_address = self.header_dict.get(\"From\")\n        if not sender_address:\n\
  \            sender_address = property_values.get(\"SenderRepresentingSmtpAddress\"\
  )\n        self.sender = sender_address\n\n        reply_to_address = self.header_dict.get(\"\
  Reply-To\")\n        if not reply_to_address:\n            reply_to_address = property_values.get(\"\
  ReplyRecipientNames\")\n        self.reply_to = reply_to_address\n\n        self.message_id\
  \ = property_values.get(\"InternetMessageId\")\n\n        to_address = self.header_dict.get(\"\
  To\")\n        if not to_address:\n            to_address = property_values.get(\"\
  ReceivedRepresentingSmtpAddress\")\n            if not to_address:\n           \
  \     to_address = property_values.get(\"DisplayTo\")\n\n        self.to = to_address\n\
  \        to_smpt_address = property_values.get(\"ReceivedRepresentingSmtpAddress\"\
  )\n        if not to_smpt_address:\n            to_smpt_address = [value for key,\
  \ value in self.recipients.iteritems()]\n        self.to_address = to_smpt_address\n\
  \n        cc_address = self.header_dict.get(\"CC\")\n        # if cc_address:\n\
  \        #     cc_address = [CONTROL_CHARS.sub(\" \", cc_add) for cc_add in cc_address.split(\"\
  ,\")]\n        self.cc = cc_address\n\n        bcc_address = self.header_dict.get(\"\
  BCC\")\n        self.bcc = bcc_address\n\n        # prefer HTMl over plain text\n\
  \        self.html = property_values.get(\"Html\")\n        self.body = property_values.get(\"\
  Body\")\n\n        if not self.body and \"RtfCompressed\" in property_values:\n\
  \            try:\n                import compressed_rtf\n            except ImportError:\n\
  \                compressed_rtf = None\n            if compressed_rtf:\n       \
  \         compressed_rtf_body = property_values['RtfCompressed']\n             \
  \   self.body = compressed_rtf.decompress(compressed_rtf_body)\n\n    def _set_recipients(self):\n\
  \        recipients = self.recipients\n        self.recipients = []\n        for\
  \ recipient_name, recipient in recipients.items():\n\n            if self.to and\
  \ recipient_name in self.to:\n                recipient[\"RecipientType\"] = \"\
  TO\"\n\n            if self.cc and recipient_name in self.cc:\n                recipient[\"\
  RecipientType\"] = \"CC\"\n\n            if self.bcc and recipient_name in self.bcc:\n\
  \                recipient[\"RecipientType\"] = \"BCC\"\n\n            if self.reply_to\
  \ and recipient_name in self.reply_to:\n                recipient[\"RecipientType\"\
  ] = \"ReplyTo\"\n\n            self.recipients.append(Recipient(recipient))\n\n\
  \    def _set_attachments(self):\n        attachments = self.attachments\n     \
  \   self.attachments = [Attachment(attach) for attach in attachments.values()]\n\
  \n    def __repr__(self):\n        return u'Message [%s]' % self.properties.get('InternetMessageId',\
  \ self.properties.get(\"Subject\"))\n\n\nclass Recipient(object):\n    \"\"\"\n\
  \     class to store recipient attributes\n    \"\"\"\n\n    def __init__(self,\
  \ recipients_properties):\n        self.AddressType = recipients_properties.get(\"\
  AddressType\")\n        self.Account = recipients_properties.get(\"Account\")\n\
  \        self.EmailAddress = recipients_properties.get(\"SmtpAddress\")\n      \
  \  self.DisplayName = recipients_properties.get(\"DisplayName\")\n        self.ObjectType\
  \ = recipients_properties.get(\"ObjectType\")\n        self.RecipientType = recipients_properties.get(\"\
  RecipientType\")\n\n    def __repr__(self):\n        return '%s (%s)' % (self.DisplayName,\
  \ self.EmailAddress)\n\n\nclass Attachment(object):\n    \"\"\"\n     class to store\
  \ attachment attributes\n    \"\"\"\n\n    def __init__(self, attachment_properties):\n\
  \n        self.DisplayName = attachment_properties.get(\"DisplayName\")\n      \
  \  self.AttachEncoding = attachment_properties.get(\"AttachEncoding\")\n       \
  \ self.AttachContentId = attachment_properties.get(\"AttachContentId\")\n      \
  \  self.AttachMethod = attachment_properties.get(\"AttachMethod\")\n        self.AttachmentSize\
  \ = format_size(attachment_properties.get(\"AttachmentSize\"))\n        self.AttachFilename\
  \ = attachment_properties.get(\"AttachFilename\")\n        self.AttachLongFilename\
  \ = attachment_properties.get(\"AttachLongFilename\")\n        if self.AttachLongFilename:\n\
  \            self.Filename = self.AttachLongFilename\n        else:\n          \
  \  self.Filename = self.AttachFilename\n        if self.Filename:\n            self.Filename\
  \ = os.path.basename(self.Filename)\n        else:\n            self.Filename =\
  \ '[NoFilename_Method%s]' % self.AttachMethod\n        self.data = attachment_properties.get(\"\
  AttachDataObject\")\n        self.AttachMimeTag = attachment_properties.get(\"AttachMimeTag\"\
  , \"application/octet-stream\")\n        self.AttachExtension = attachment_properties.get(\"\
  AttachExtension\")\n\n    def __repr__(self):\n        return '%s (%s / %s)' % (self.Filename,\
  \ self.AttachmentSize, len(self.data or []))\n\n\nclass MsOxMessage(object):\n \
  \   \"\"\"\n     Base class for Microsoft Message Object\n    \"\"\"\n\n    def\
  \ __init__(self, msg_file_path):\n        self.msg_file_path = msg_file_path\n \
  \       self.include_attachment_data = False\n\n        if not self.is_valid_msg_file():\n\
  \            raise Exception(\"Invalid file provided, please provide valid Microsoft\
  \ Outlook MSG file.\")\n\n        ole_file = None\n        try:\n            ole_file\
  \ = OleFileIO(msg_file_path)\n\n            # process directory entries\n      \
  \      ole_root = ole_file.root\n            kids_dict = ole_root.kids_dict\n\n\
  \            self._message = Message(kids_dict)\n\n        finally:\n          \
  \  if ole_file is not None:\n                ole_file.close()\n\n    def as_dict(self):\n\
  \        return self._message.as_dict()\n\n    def get_email_mime_content(self):\n\
  \        email_obj = EmailFormatter(self)\n        return email_obj.build_email()\n\
  \n    def save_email_file(self, file_path):\n        email_obj = EmailFormatter(self)\n\
  \        email_obj.save_file(file_path)\n        return True\n\n    def get_attached_emails_hierarchy(self):\n\
  \        return self._message.get_attached_emails_hierarchy()\n\n    def is_valid_msg_file(self):\n\
  \        if not os.path.exists(self.msg_file_path):\n            return False\n\n\
  \        if not isOleFile(self.msg_file_path):\n            return False\n\n   \
  \     return True\n\n    def get_all_attachments(self):\n        return self._message.get_all_attachments()\n\
  \n\ndef format_size(num, suffix='B'):\n    if not num:\n        return \"unknown\"\
  \n    for unit in ['', 'Ki', 'Mi', 'Gi', 'Ti', 'Pi', 'Ei', 'Zi']:\n        if abs(num)\
  \ < 1024.0:\n            return \"%3.1f%s%s\" % (num, unit, suffix)\n        num\
  \ /= 1024.0\n    return \"%.1f%s%s\" % (num, 'Yi', suffix)\n\n\ndef parse_email_headers(header,\
  \ raw=False):\n    if not header:\n        return None\n\n    headers = email.message_from_string(header)\n\
  \    if raw:\n        return headers\n\n    email_address_headers = {\n        \"\
  To\": [],\n        \"From\": [],\n        \"CC\": [],\n        \"BCC\": [],\n  \
  \      \"Reply-To\": [],\n    }\n\n    for addr in email_address_headers.keys():\n\
  \        for (name, email_address) in email.utils.getaddresses(headers.get_all(addr,\
  \ [])):\n            email_address_headers[addr].append(\"{} <{}>\".format(name,\
  \ email_address))\n\n    parsed_headers = dict(headers)\n    parsed_headers.update(email_address_headers)\n\
  \n    return parsed_headers\n\n\n########################################################################################################################\n\
  ENCODINGS_TYPES = set(['utf-8', 'iso8859-1'])\nREGEX_EMAIL = r\"\\b[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\\
  .[a-zA-Z0-9-.]+\\b\"\n\n\ndef extract_address(s):\n    if type(s) not in [str, unicode]:\n\
  \        return s\n    res = re.findall(REGEX_EMAIL, s)\n    if res:\n        return\
  \ ', '.join(res)\n    else:\n        return s\n\n\ndef data_to_md(email_data):\n\
  \    md = \"### Results:\\n\"\n\n    md += \"* {0}:\\t{1}\\n\".format('From', email_data['Label/Email/from']\
  \ or \"\")\n    md += \"* {0}:\\t{1}\\n\".format('To', email_data['Label/Email']\
  \ or \"\")\n    md += \"* {0}:\\t{1}\\n\".format('CC', email_data['Label/Email/cc']\
  \ or \"\")\n    md += u\"* {0}:\\t{1}\\n\".format('Subject', email_data['Label/Email/subject']\
  \ or \"\")\n\n    if email_data['Label/Email/text']:\n        md += u\"* {0}:\\\
  t{1}\\n\".format('Body/Text', email_data['Label/Email/text'] or \"\")\n\n    if\
  \ email_data['Label/Email/html']:\n        md += u\"* {0}:\\t{1}\\n\".format('Body/HTML',\
  \ email_data['Label/Email/html'] or \"\")\n\n    md += \"* {0}:\\t{1}\\n\".format('Attachments',\
  \ email_data['Label/Email/attachments'] or \"\")\n    md += \"* {0}:\\t{1}\\n\"\
  .format('Headers', email_data['Label/Email/headers'] or \"\")\n    return md\n\n\
  \ndef save_attachments(attachments):\n    for attachment in attachments:\n     \
  \   if attachment.data is not None:\n            demisto.results(fileResult(attachment.DisplayName,\
  \ attachment.data))\n\n\ndef get_utf_string(text, field):\n    if text is None:\n\
  \        text = ''\n\n    try:\n        utf_string = text.encode('utf-8')\n    except\
  \ Exception as ex:\n        utf_string = text.decode('utf-8', 'ignore').encode('utf-8')\n\
  \        temp = demisto.uniqueFile()\n\n        with open(demisto.investigation()['id']\
  \ + '_' + temp, 'wb') as f:\n            f.write(text)\n\n        demisto.results({\n\
  \            'Contents': str(ex) + '\\n\\nOpen HEX viewer to review.',\n       \
  \     'ContentsFormat': formats['text'],\n            'Type': entryTypes['file'],\n\
  \            'File': field,\n            'FileID': temp\n        })\n\n    return\
  \ utf_string\n\n\ndef convert_to_unicode(s):\n    global ENCODINGS_TYPES\n    try:\n\
  \        encoded_s, encoding = decode_header(s)[0]\n        s = encoded_s.decode(encoding).encode('utf-8').strip()\n\
  \        ENCODINGS_TYPES.add(encoding)\n    except Exception:\n        for file_data\
  \ in ENCODINGS_TYPES:\n            try:\n                s = s.decode(encoding).encode('utf-8').strip()\n\
  \                break\n            except:     # noqa: E722\n                pass\n\
  \n    return s\n\n\ndef handle_msg(file_path):\n    msg = MsOxMessage(file_path)\n\
  \    if not msg:\n        raise Exception(\"Could not parse msg file!\")\n\n   \
  \ save_attachments(msg.get_all_attachments())\n\n    email_data = msg.as_dict()\n\
  \    demisto.results({\n        'ContentsFormat': formats['markdown'],\n       \
  \ 'Type': entryTypes['note'],\n        'Contents': data_to_md(email_data),\n   \
  \     'EntryContext': email_data\n    })\n\n    attached_emails = msg.get_attached_emails_hierarchy()\n\
  \    for attached_email in attached_emails:\n        demisto.results({\n       \
  \     'ContentsFormat': formats['markdown'],\n            'Type': entryTypes['note'],\n\
  \            'Contents': data_to_md(attached_email)\n        })\n    return\n\n\n\
  def handle_eml(file_path, b64=False):\n    global ENCODINGS_TYPES\n    with open(file_path,\
  \ 'rb') as emlFile:\n        file_data = emlFile.read()\n        if b64:\n     \
  \       demisto.results('b64')\n            file_data = b64decode(file_data)\n\n\
  \        parser = HeaderParser()\n        headers = parser.parsestr(file_data)\n\
  \n        header_list = []\n        for item in headers.items():\n            item_dict\
  \ = {\n                \"name\": item[0],\n                \"value\": convert_to_unicode(item[1])\n\
  \            }\n\n            header_list.append(item_dict)\n\n        eml = message_from_string(file_data)\n\
  \        if not eml:\n            raise Exception(\"Could not parse eml file!\"\
  )\n\n        html = ''\n        text = ''\n        attachments = []\n\n        parts\
  \ = [eml]\n        while parts:\n            part = parts.pop()\n            if\
  \ part.is_multipart() or part.get_content_type().startswith('multipart'):\n    \
  \            parts += part.get_payload()\n\n            elif part.get_filename():\n\
  \                file_name = convert_to_unicode(part.get_filename())\n         \
  \       attachments.append(file_name)\n\n                demisto.setContext('AttachmentName',\
  \ file_name)\n                demisto.results(fileResult(file_name, part.get_payload(decode=True)))\n\
  \n            elif part.get_content_type() == 'text/html':\n                html\
  \ = get_utf_string(part.get_payload(decode=True), 'HTML')\n\n            elif part.get_content_type()\
  \ == 'text/plain':\n                text = get_utf_string(part.get_payload(decode=True),\
  \ 'TEXT')\n\n        email_data = {\n            'Label/Email': extract_address(eml['To']),\n\
  \            'Label/Email/cc': extract_address(eml['Cc']),\n            'Label/Email/from':\
  \ extract_address(eml['From']),\n            'Label/Email/subject': convert_to_unicode(eml['Subject']),\n\
  \            'Label/Email/html': convert_to_unicode(html),\n            'Label/Email/text':\
  \ convert_to_unicode(text),\n            'Label/Email/headers': header_list,\n \
  \           'Label/Email/attachments': '' if not attachments else ','.join(attachments),\n\
  \            'Label/Email/format': eml.get_content_type()\n        }\n\n       \
  \ demisto.results({\n            'ContentsFormat': formats['markdown'],\n      \
  \      'Type': entryTypes['note'],\n            'Contents': data_to_md(email_data),\n\
  \            'EntryContext': email_data\n        })\n        return\n\n\ndef main():\n\
  \    file_type = ''\n    entry_id = demisto.args()['entryid']\n    try:\n      \
  \  result = demisto.executeCommand('getFilePath', {'id': entry_id})\n        if\
  \ is_error(result):\n            return_error(get_error(result))\n\n        file_path\
  \ = result[0]['Contents']['path']\n\n        result = demisto.executeCommand('getEntry',\
  \ {'id': entry_id})\n        if is_error(result):\n            return_error(get_error(result))\n\
  \n        file_type = result[0]['FileMetadata']['info']\n    except Exception, ex:\n\
  \        return_error(\"Failed to load file entry with entryid: {}. Error: {}\"\
  .format(entry_id, ex.message))\n\n    try:\n        if 'Composite Document File\
  \ V2 Document'.lower() in file_type.lower() \\\n                or 'CDFV2 Microsoft\
  \ Outlook Message'.lower() in file_type.lower():\n            handle_msg(file_path)\n\
  \            return\n\n        elif 'rfc 822 mail' in file_type.lower():\n     \
  \       handle_eml(file_path)\n            return\n\n        elif 'ASCII text' in\
  \ file_type:\n            try:\n                # Try to open the email as-is\n\
  \                with open(file_path, 'rb') as f:\n                    file_contents\
  \ = f.read()\n\n                if 'Content-Type:'.lower() in file_contents.lower():\n\
  \                    handle_eml(file_path, b64=False)\n                    return\n\
  \                else:\n                    # Try a base64 decode\n            \
  \        b64decode(file_contents)\n                    if 'Content-Type:'.lower()\
  \ in file_contents.lower():\n                        handle_eml(file_path, b64=True)\n\
  \                        return\n                    else:\n                   \
  \     return_error(\"Could not extract email from file. Base64 decode did not include\
  \ rfc 822 strings\")\n\n            except Exception as e:\n                return_error(\"\
  Exception while trying to decode email from within base64: \" + str(e))\n      \
  \  else:\n            return_error(\"Unknown file format: \" + file_type)\n\n  \
  \  except Exception, ex:\n        return_error(ex.message)\n\n\nif __name__ == \"\
  __builtin__\":\n    main()"
scripttarget: 0
subtype: python2
tags:
- email
- phishing
- enhancement
- file
toversion: 4.1.9
type: python
