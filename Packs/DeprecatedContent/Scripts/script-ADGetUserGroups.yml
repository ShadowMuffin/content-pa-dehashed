args:
- default: true
  description: Active Directory Distinguished Name of the desired user
  name: dn
- description: Name of the desired user
  name: name
- description: Email address of the desired user
  name: email
- description: Include these AD attributes of the resulting objects in addition to
    the default ones
  name: attributes
- description: Enter any value to allow nested groups search as well
  name: nestedSearch
comment: Use Active Directory to retrieve the groups in which the specified user is
  a member. The user can be specified by name, email or as an Active Directory Distinguished
  Name (DN).
commonfields:
  id: ADGetUserGroups
  version: -1
dependson:
  must:
  - ad-search
deprecated: true
name: ADGetUserGroups
script: "# Optional arguments and default values\nattrs = 'name'\nif demisto.get(demisto.args(),\
  \ 'attributes'):\n    attrs += \",\" + demisto.args()['attributes']\nresp = ''\n\
  nested_search = ':1.2.840.113556.1.4.1941:' if demisto.get(demisto.args(), 'nestedSearch')\
  \ else ''\nmemberDN = ''\nif demisto.get(demisto.args(), 'dn'):\n    memberDN =\
  \ demisto.args()['dn']\nelif demisto.get(demisto.args(), 'name'):\n    resp = demisto.executeCommand(\
  \ 'AdSearch', { 'filter' : \"(&(objectCategory=User)(name=\" + demisto.args()['name']\
  \ + \"))\" } )\nelif demisto.get(demisto.args(), 'email'):\n    resp = demisto.executeCommand(\
  \ 'ADGetUsersByEmail', { 'email' : demisto.args()['email'] } )\nelse:\n    demisto.results(\
  \ { 'Type' : entryTypes['error'], 'ContentsFormat' : formats['text'], 'Contents'\
  \ : 'You must provide either dn, name or email as argument!' } )\n    sys.exit(0)\n\
  if type(resp)==list and len( [ r for r in resp if isError(r) ] ) > 0 :\n    demisto.results(\
  \ { 'Type' : entryTypes['error'], 'ContentsFormat' : formats['text'], 'Contents'\
  \ : 'Error returned by ad command: ' + r['Contents'] } )\n    sys.exit(0)\nif not\
  \ memberDN:\n    if type(resp)==list and len(resp)==1 and type(resp[0])==dict and\
  \ 'Contents' in resp[0] and type(resp[0]['Contents'])==list and len(resp[0]['Contents'])==1\
  \ and type(resp[0]['Contents'][0])==dict and 'dn' in resp[0]['Contents'][0]:\n \
  \       memberDN = resp[0]['Contents'][0]['dn']\n    else:\n        if resp[0]['Contents']\
  \ == 'No results':\n            demisto.results( { 'Type' : entryTypes['error'],\
  \ 'ContentsFormat' : formats['text'], 'Contents' : 'User not found.' } )\n     \
  \   else:\n            demisto.results( { 'Type' : entryTypes['error'], 'ContentsFormat'\
  \ : formats['text'], 'Contents' : 'Unexpected output from ad command.' } )\n   \
  \     sys.exit(0)\nif memberDN:\n    filterstr = r\"(&(member{0}=\".format(nested_search)\
  \ + memberDN + \")(objectcategory=group))\"\n    demisto.results( demisto.executeCommand(\
  \ 'AdSearch', { 'filter' : filterstr, 'attributes' : attrs } ) )\nelse:\n    demisto.results(\
  \ { 'Type' : entryTypes['error'], 'ContentsFormat' : formats['text'], 'Contents'\
  \ : 'Received empty DN or cannot locate DN for the specified arguments.' } )"
scripttarget: 0
subtype: python2
system: true
tags:
- active directory
timeout: 0s
toversion: 4.1.9
type: python
