args:
- default: true
  description: IP to block
  name: ip
  required: true
- description: Rule name
  name: rulename
- auto: PREDEFINED
  description: Direction to block
  name: direction
  predefined:
  - to
  - from
  - both
comment: Blocks IP with Panorama
commonfields:
  id: PanoramaBlockIP
  version: -1
dependson:
  must:
  - panorama
deprecated: true
enabled: true
name: PanoramaBlockIP
outputs:
- contextPath: PanoramaRule
  description: List of Panorama rules
- contextPath: PanoramaRule.Name
  description: Name of the Panorama rule
  type: string
- contextPath: PanoramaRule.Direction
  description: Direction of the Panorama rule, could be 'to','from', 'both'
  type: string
- contextPath: PanoramaRule.IP
  description: The IP the Panorama rule blocks
  type: string
runonce: false
script: "var direction = args.direction || 'both';\nvar blockingDestination = direction\
  \ === 'to' || direction === 'both';\nvar blockingSource = direction === 'from' ||\
  \ direction === 'both';\nvar blockedDestination = false;\nvar blockedSource = true;\n\
  var resp = null;\n\nif (!args.rulename) {\n    args.rulename = 'ip' + args.ip +\
  \ ' blocked in direction ' + args.direction;\n}\n\nif (blockingDestination) {\n\
  \    resp = executeCommand('PanoramaConfig', {action: 'drop', destination: args.ip,\
  \ ruleName: args.ruleName + '-to'});\n    if (isError(resp[0])){\n        return\
  \ resp;\n    }\n    blockedDestination = 'success' == dq(resp[0],'Contents');\n\
  }\n\nif (blockingSource) {\n    resp = executeCommand('PanoramaConfig', {action:\
  \ 'drop', destination: args.ip, ruleName: args.ruleName + '-from'});\n    if (isError(resp[0])){\n\
  \        return resp\n    }\n    blockedSource = 'success' == dq(resp[0],'Contents');\n\
  }\n\nif ((blockedSource && blockingSource) || (blockingDestination && blockedDestination))\
  \ {\n    resp = executeCommand('PanoramaCommit', {});\n    var entry = resp[0];\n\
  \    var context = {PanoramaRule: []};\n\n    context.PanoramaRule.push({\n    \
  \        Name: args.ruleName,\n            Direction: direction,\n            IP:\
  \ args.ip\n        });\n\n    //needed for editing of context\n    var entryB =\
  \ null;\n    entryB = JSON.parse(JSON.stringify(entry))\n    entryB.EntryContext\
  \ = context;\n    return entryB;\n}\nreturn {\n    Contents: 'no rules commited',\n\
  \    ContentsFormat: formats.text,\n    Type: entryTypes.error\n};"
scripttarget: 0
tags:
- firewall
- panorama
tests:
- No tests
toversion: 4.1.9
type: javascript
