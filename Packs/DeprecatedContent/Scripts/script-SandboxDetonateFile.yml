args:
- default: true
  description: ID of the entry containing the file to detonate.
  name: entryID
  required: true
- description: Timeout in seconds. Default is 10 minutes.
  name: timeout
- description: Interval to poll for results. Default is 10 seconds.
  name: interval
comment: This script is deprecated. Use the available generic file detonation playbooks
  instead.
commonfields:
  id: SandboxDetonateFile
  version: -1
dependson:
  should:
  - wildfire-report
  - cuckoo-get-task-report
  - sandblast-upload
  - sandblast-query
deprecated: true
enabled: true
name: SandboxDetonateFile
runonce: false
script: "from time import sleep\nres = []\ntimeout = 600\nif 'timeout' in demisto.args():\n\
  \    timeout = int(demisto.args()['timeout'])\ninterval = 10\nif 'interval' in demisto.args():\n\
  \    interval = int(demisto.args()['interval'])\n\nsandblastDone = False\ncuckooDone\
  \ = False\nwildfireDone = False\nif demisto.executeCommand('IsIntegrationAvailable',{'brandname':\
  \ 'WildFire'})[0]['Contents'] != 'yes':\n    wildfireDone = True\n    #demisto.log('WildFire\
  \ not available.')\nif demisto.executeCommand('IsIntegrationAvailable',{'brandname':\
  \ 'Cuckoo Sandbox'})[0]['Contents'] != 'yes':\n    cuckooDone = True\n    #demisto.log('Cuckoo\
  \ not available.')\nif demisto.executeCommand('IsIntegrationAvailable',{'brandname':\
  \ 'Check Point Sandblast'})[0]['Contents'] != 'yes':\n    if demisto.executeCommand('IsIntegrationAvailable',{'brandname':\
  \ 'Check Point Sandblast Appliance'})[0]['Contents'] != 'yes':\n        sandblastDone\
  \ = True\n        #demisto.log('Sandblast not available.')\n\nusingBrand = demisto.get(demisto.args(),\
  \ 'using-brand')\nif usingBrand:\n    if 'wildfire' not in usingBrand.lower():\n\
  \        wildfireDone = True\n    if 'cuckoo sandbox' not in usingBrand.lower():\n\
  \        cuckooDone = True\n    if 'check point sandblast' not in usingBrand.lower():\n\
  \        sandblastDone = True\n# Get the file's hash\nresFileEntry = demisto.executeCommand('getEntry',{'id':\
  \ demisto.args()['entryID']})\nif isError(resFileEntry[0]):\n    demisto.results(resFileEntry)\n\
  \    sys.exit()\nelse:\n    fileMd5 = demisto.get(resFileEntry[0], 'FileMetadata.md5')\n\
  \n\n############ Hash check stage ############\n# Wildfire\nif not wildfireDone:\n\
  \    resCheckWildfire = demisto.executeCommand(\"wildfire-report\", {\"md5\": fileMd5})\n\
  \    if isError(resCheckWildfire[0]):\n        if \"The report was not found\" in\
  \ resCheckWildfire[0]['Contents']:\n            pass # No report in WildFire, need\
  \ to upload the file\n        else: # Any other error should be reported back to\
  \ war room\n            res += resCheckWildfire\n            wildfireDone = True\n\
  \    elif resCheckWildfire[0]['Contents'] != 'failed': # Hash was known since file\
  \ was already analyzed - just return that answer\n        res += resCheckWildfire\n\
  \        wildfireDone = True\n\n# Sandblast\nif not sandblastDone:\n    resCheckSB\
  \ = demisto.executeCommand(\"sandblast-query\", {\"md5\": fileMd5})\n    if isError(resCheckSB[0]):\n\
  \        sandblastDone = True\n        res.append(resCheckSB[0])\n    elif str(demisto.get(resCheckSB[0],\
  \ 'Contents.response.te.status.code')) == '1001':\n        sandblastDone = True\n\
  \        data = demisto.get(resCheckSB[0], 'Contents.response')\n        data =\
  \ {x:data.get(x,'') for x in ['file_name', 'file_type', 'md5', 'te']}\n        raiseTable(data,\
  \ 'te')\n        res.append({ \"Type\" : entryTypes[\"note\"], \"ContentsFormat\"\
  \ : formats[\"table\"], \"Contents\" : flattenRow(data) })\n\n\n############ Submit\
  \ stage ############\n# Wildfire\nif not wildfireDone:\n    resWFUpload = demisto.executeCommand(\"\
  wildfire-upload\", {\"upload\": demisto.args()[\"entryID\"]})\n    if isError(resWFUpload[0]):\n\
  \        wildfireDone = True\n        if 'file type is not supported' in resWFUpload[0]['Contents']:\n\
  \            res.append( { \"Type\" : entryTypes[\"note\"], \"ContentsFormat\" :\
  \ formats[\"text\"], \"Contents\" : 'WildFire does not support this file type.'\
  \ } )\n        else:\n            res += resWFUpload\n\n# Sandblast\nif not sandblastDone:\n\
  \    resSBUpload = demisto.executeCommand(\"sandblast-upload\", {\"file_id\": demisto.args()[\"\
  entryID\"], \"file_name\" : demisto.args()[\"entryID\"]})\n    if isError(resSBUpload[0]):\n\
  \        sandblastDone = True\n        res += resSBUpload\n    elif not str(demisto.get(resSBUpload[0],\
  \ 'Contents.response.status.code')) in ['1001','1002']:\n        sandblastDone =\
  \ True\n        res.append( { \"Type\" : entryTypes[\"error\"], \"ContentsFormat\"\
  \ : formats[\"text\"], \"Contents\" : \"Sandblast Error: {0}\".format(str(demisto.get(resSBUpload[0],\
  \ 'Contents.response.status.message'))) } )\n\n# Cuckoo\nckTaskId = -1\nif not cuckooDone:\n\
  \    resCk = demisto.executeCommand(\"CuckooDetonateFile\", {\"entryID\": demisto.args()[\"\
  entryID\"]})\n\n    if not isError(resCk[0]):\n        ckTaskId = resCk[0]['Contents'].split('\
  \ ')[-1]\n    res += resCk\n\n\n############ Poll stage ############\nsec = 0\n\
  while (sec < timeout):\n    # Sandblast\n    if not sandblastDone:\n        resSBReport\
  \ = demisto.executeCommand(\"sb-query\", {\"md5\": fileMd5})\n\n        if isError(resSBReport[0]):\n\
  \            sandblastDone = True\n            res.append(resSBReport[0])\n    \
  \    elif str(demisto.get(resSBReport[0], 'Contents.response.te.status.code')) ==\
  \ '1001':\n            sandblastDone = True\n            data = demisto.get(resSBReport[0],\
  \ 'Contents.response')\n            data = {x:data.get(x,'') for x in ['file_name',\
  \ 'file_type', 'md5', 'te']}\n            raiseTable(data, 'te')\n            res.append({\
  \ \"Type\" : entryTypes[\"note\"], \"ContentsFormat\" : formats[\"table\"], \"Contents\"\
  \ : flattenRow(data) })\n        elif str(demisto.get(resSBReport[0], 'Contents.response.te.status.code'))\
  \ == '1004' and sec > timeout/2: # Give sandblast time to sync that the file has\
  \ been uploaded, disregard this for a while\n            sandblastDone = True\n\
  \            res.append( { \"Type\" : entryTypes[\"error\"], \"ContentsFormat\"\
  \ : formats[\"text\"], \"Contents\" : 'Sandblast: problem uploading the file.' }\
  \ )\n\n    # Wildfire\n    if not wildfireDone:\n        resWildfireReport = demisto.executeCommand(\"\
  wildfire-report\", {\"md5\": fileMd5})\n\n        if isError(resWildfireReport[0]):\n\
  \            if \"don't have an available report\" in resWildfireReport[0]['Contents']:\n\
  \                pass # Wildfire hasn't finished yet\n            else: # Any other\
  \ error should be reported back to war room\n                res += resWildfireReport\n\
  \                wildfireDone = True\n        elif resWildfireReport[0]['Contents']\
  \ != 'failed': # Wildfire finished and has a result\n            res += resWildfireReport\n\
  \            wildfireDone = True\n\n    # Cuckoo\n    if not cuckooDone:\n     \
  \   resCS = demisto.executeCommand(\"CuckooTaskStatus\", {\"taskID\": ckTaskId})\n\
  \        if isError(resCS[0]):\n            res += resCS\n        else:\n      \
  \      if demisto.get(resCS[0], 'Contents.task.status') not in ['pending', 'running']:\n\
  \                cuckooDone = True\n                errors = demisto.get(resCS[0],\
  \ 'Contents.task.errors')\n                if errors:\n                    res.append(\
  \ { \"Type\" : entryTypes[\"error\"], \"ContentsFormat\" : formats[\"text\"], \"\
  Contents\" : 'Cuckoo returned errors:\\n' + '\\n'.join(errors) } )\n           \
  \     # Try to get the report even if errors occurred, in case errors were not fatal\n\
  \                res += demisto.executeCommand(\"CuckooGetReport\", {\"taskID\"\
  : ckTaskId})\n\n    if wildfireDone and cuckooDone and sandblastDone:\n        break\n\
  \    sec += interval\n    sleep(interval)\n\nif sec >= timeout:\n    res.append(\
  \ { \"Type\" : entryTypes[\"error\"], \"ContentsFormat\" : formats[\"text\"], \"\
  Contents\" : 'Timeout reached. Partial results returned.' } )\nif not wildfireDone:\n\
  \    res.append( { \"Type\" : entryTypes[\"error\"], \"ContentsFormat\" : formats[\"\
  text\"], \"Contents\" : 'Could not retrieve results from Wildfire (may be due to\
  \ timeout).' } )\nif not cuckooDone:\n    res.append( { \"Type\" : entryTypes[\"\
  error\"], \"ContentsFormat\" : formats[\"text\"], \"Contents\" : 'Could not retrieve\
  \ results from Cuckoo (may be due to timeout).' } )\nif not sandblastDone:\n   \
  \ res.append( { \"Type\" : entryTypes[\"error\"], \"ContentsFormat\" : formats[\"\
  text\"], \"Contents\" : 'Could not retrieve full results from sandblast (may be\
  \ due to timeout).' } )\nif res:\n    demisto.results(res)\nelse:\n    demisto.results('No\
  \ results.')"
scripttarget: 0
subtype: python2
system: true
tags:
- sandblast
- cuckoo
- wildfire
- fireeye
- task
- sandbox
- enhancement
- file
tests:
- No test
timeout: "86.4\xB5s"
toversion: 4.1.9
type: python
