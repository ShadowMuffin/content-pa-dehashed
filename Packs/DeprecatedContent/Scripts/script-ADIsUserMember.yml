args:
- description: Active Directory Distinguished Name of the desired user
  name: dn
- description: Name of the desired user
  name: name
- description: Email address of the desired user
  name: email
- default: true
  description: Name of the AD group to check
  name: groupname
  required: true
- description: Enter any value to allow nested groups check as well
  name: nestedSearch
comment: Use Active Directory to check if the specified user is a member of the specified
  group. Returns simply yes/no. The user can be specified by name, email or as an
  Active Directory Distinguished Name (DN).
commonfields:
  id: ADIsUserMember
  version: -1
dependson:
  must:
  - ad-search
deprecated: true
name: ADIsUserMember
script: "FOUND_GROUPS_LABAL = 'FoundGroups'\nres = []\n\nresp = demisto.executeCommand('ADGetUserGroups',\
  \ demisto.args())\ntry:\n    if not isError(resp[0]):\n        group_names = argToList(demisto.args()['groupname'])\n\
  \n        for name in group_names:\n            group_resp = demisto.executeCommand('AdSearch',\
  \ {'filter':'(&(objectClass=group)(name={0}))'.format(name)})\n            if isError(group_resp[0]):\n\
  \                res.append(  { 'Type' : entryTypes['error'], 'ContentsFormat' :\
  \ formats['text'], 'Contents' : 'Error returned from ad-search:\\n' + resp[0]['Contents']\
  \ } )\n            elif (isinstance(group_resp[0]['Contents'],str) or isinstance(group_resp[0]['Contents'],unicode))\
  \ and group_resp[0]['Contents'] == 'No results':\n                res.append( {\
  \ 'Type' : entryTypes['error'], 'ContentsFormat' : formats['text'], 'Contents' :\
  \ 'Group {0} not found:\\n'.format(name) } )\n\n        user_groups = [row['name']\
  \ for row in resp[0]['Contents']]\n        groups = list(set(group_names).intersection(user_groups))\n\
  \        if groups:\n            markdownString = '### The user belongs to groups:\\\
  n'\n            markdownString += \"\".join(['* ' + s + '\\n' for s in groups])\n\
  \            res.append ({'ContentsFormat': formats['markdown'], 'Type': entryTypes['note'],\
  \ 'Contents': markdownString})\n\n            group_names = ','.join([str(s) for\
  \ s in groups])\n            demisto.setContext(FOUND_GROUPS_LABAL, group_names)\n\
  \n            answer = 'yes'\n        else:\n            demisto.log(\"\\nThe user\
  \ is not part of any of the groups\\n\")\n            answer = 'no'\n\n        res.append(\
  \ { \"Type\" : entryTypes[\"note\"], \"ContentsFormat\" : formats[\"text\"], \"\
  Contents\" : answer } )\n\n        demisto.results(res)\n\n    else:\n        demisto.results(\
  \ { 'Type' : entryTypes['error'], 'ContentsFormat' : formats['text'], 'Contents'\
  \ : 'Error returned from ADGetUserGroups:\\n' + resp[0]['Contents'] } )\nexcept\
  \ Exception, ex:\n    demisto.results( { 'Type' : entryTypes['error'], 'ContentsFormat'\
  \ : formats['text'], 'Contents' : 'Error occurred while parsing output from ADGetUserGroups.\
  \ Exception info:\\n' + str(ex) + '\\n\\nInvalid output:\\n' + str( resp ) } )"
scripttarget: 0
subtype: python2
system: true
tags:
- active directory
- Condition
timeout: 0s
toversion: 4.1.9
type: python
