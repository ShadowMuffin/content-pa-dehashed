comment: Classifying Vectra incidents
commonfields:
  id: VectraClassifier
  version: -1
dependson:
  must:
  - vec-health
deprecated: true
name: VectraClassifier
script: "vectra_type_dict = {\n    'C2Communication' :\n        ['External Remote\
  \ Access',\n        'Hidden DNS Tunnel',\n        'Hidden HTTP Tunnel',\n      \
  \  'Hidden HTTPS Tunnel',\n        'Peer-To-Peer',\n        'Pulling Instructions',\n\
  \        'Stealth HTTP Post',\n        'Suspect Domain Activity',\n        'Suspicious\
  \ HTTP',\n        'TOR Activity'],\n    'Botnet Activity' :\n        ['Abnormal\
  \ Ad Activity',\n        'Abnormal Web Activity',\n        'Bitcoin Mining',\n \
  \       'Brute-Force Attack',\n        'Outbound DoS',\n        'Outbound Port Sweep',\n\
  \        'Outbound Spam',\n        'Relay Communication'],\n    'Reconnaissance'\
  \ :\n        ['Internal Darknet Scan',\n        'Kerberos Account Scan',\n     \
  \   'Port Scan',\n        'Port Sweep'],\n    'Lateral Movement' :\n        ['Automated\
  \ Replication',\n        'Brute-Force Attack',\n        'Suspicious Kerberos Client',\n\
  \        'Suspicious Kerberos Account',\n        'Kerberos Server Activity',\n \
  \       'Ransomware File Activity',\n        'Shell Knocker Client',\n        'Shell\
  \ Knocker Server',\n        'Suspicious Admin',\n        'SQL Injection Activity'],\n\
  \    'Exfiltration' :\n        ['Data Smuggler',\n        'Hidden DNS Tunnel',\n\
  \        'Hidden HTTP Tunnel',\n        'Hidden HTTPS Tunnel',\n        'Smash and\
  \ Grab',\n        'Staged Transfer - Hop 1',\n        'Staged Transfer - Hop 2']\n\
  }\n\nTYPE_VNAME_LABEL = 'Label/type_vname'\nCLASSIFIER_DESCRIPTION_LABAL = 'Label/Classifier/Description'\n\
  CONTEXT_SEPARATOR = '|'\n\nctx = demisto.context()\n\ntype_name = demisto.get(ctx,\
  \ TYPE_VNAME_LABEL)\nincident_type = ''\n\nif type_name:\n    # Set context for\
  \ future use\n    cur_description = demisto.get(ctx, CLASSIFIER_DESCRIPTION_LABAL)\
  \ or ''\n    cur_description += CONTEXT_SEPARATOR if cur_description else ''\n \
  \   demisto.setContext(CLASSIFIER_DESCRIPTION_LABAL, cur_description + type_name)\n\
  \n    # Looks for incident type in the type dictionary\n    for key, val in vectra_type_dict.items():\n\
  \        if type_name in val:\n            incident_type = key\n    if incident_type:\n\
  \        resp = demisto.executeCommand('IncidentSet ', {'type': incident_type, 'updatePlaybookForType'\
  \ : 'yes'})\n        if isError(resp[0]):\n            demisto.results(resp)"
scripttarget: 0
subtype: python2
system: true
tags:
- Vectra
- Classifier
timeout: 0s
toversion: 4.1.9
type: python
