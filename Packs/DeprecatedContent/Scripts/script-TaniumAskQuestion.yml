args:
- default: true
  description: Retrieve the question by its name. E.g. !TaniumAskQuestion name="Running
    Services"
  name: name
- description: 'Retrieve the question by its ID.  To view ID in the Tanium console
    go to: Authoring -> Saved Questions tab. This shows you a list of Saved Questions.
    Click the edit button on a Saved Question and the ID will be shown in the lower
    left corner'
  name: id
- description: Force Tanium to respond after x seconds (even if data was not collected
    fully by Tanium).  Default is 30 seconds.
  name: timeout
- description: Frequency of polling Tanium for more answers. Default is each second.
  name: pollfreq
- description: Table's headers to be shown by order
  name: headers
comment: "Send a request for a formatted result of a\_saved question. To receive the\
  \ most up to date data, run the same command twice. See https://kb.tanium.com/SOAP\
  \ for more information"
commonfields:
  id: TaniumAskQuestion
  version: -1
dependson:
  must:
  - tn-result-data
  - tn-result-info
deprecated: true
name: TaniumAskQuestion
script: "// An example script for asking Tanium a question\n/* name - The name of\
  \ the Saved-Question in Tanium server (mandatory if no 'id' was specified)\nFor\
  \ example:\n Computer Name\n User Information\n Adobe Acrobat Versions\n BIOS Information\n\
  \ CPU Utilization Over 75%\n Installed Applications\n ...\n*/\n// id - The ID of\
  \ the Saved-Question in Tanium server (mandatory if no 'name' was specified)\n//\
  \ timeout - seconds to wait while waiting for the question's result\n\nvar entry\
  \ = {\n    Type: 1,\n    ContentsFormat: 'json',\n    Contents: [],\n    ReadableContentsFormat:\
  \ formats.markdown,\n    HumanReadable: \"\"\n};\nif (!args.name && !args.id)\n\
  \    return { ContentsFormat: formats.text, Type: entryTypes.error, Contents: 'You\
  \ must provide name or id.' };\nvar res = executeCommand('tn-result-info', args);\n\
  if (res[0].Type !== entryTypes.error) {\n    if (!res[0].Contents.result_infos)\
  \ {\n        return res[0].Contents.Envelope.Body.return.command;\n    }\n    //\
  \ Need to compare 'mr_passed' and 'estimated_total' values,\n    // to confirm that\
  \ all machines have answered\n    var answers = res[0].Contents.result_infos.result_info.mr_passed;\n\
  \    var expectedAnswers = res[0].Contents.result_infos.result_info.estimated_total;\n\
  \n    var timeout = parseInt(args.timeout) || 30; // seconds\n    var pollFreq =\
  \ parseInt(args.pollfreq) || 3; // seconds\n\n    var polled = false;\n    sec =\
  \ 0;\n    do {\n        if (polled) {\n            sec += pollFreq;\n          \
  \  wait(pollFreq);\n        }\n        res = executeCommand('tn-result-info', args);\n\
  \        if (res[0].Type === entryTypes.error) {\n            return res[0];\n \
  \       }\n        answers = res[0].Contents.result_infos.result_info.mr_passed;\n\
  \        expectedAnswers = res[0].Contents.result_infos.result_info.estimated_total;\n\
  \        polled = true;\n    } while (answers !== expectedAnswers && sec < timeout);\n\
  \    if (sec >= timeout) {\n        log(\"Timed out. Results may be incomplete.\
  \ Run the query again to allow Tanium to reach full results.\");\n    } else {\n\
  \        log(\"Full results. It took \" + sec + \" seconds, polling at \" + pollFreq\
  \ + \" second intervals.\");\n    }\n\n    // Get question data (i.e. question result)\n\
  \    var qDataRes = executeCommand('tn-result-data', args);\n    if (!qDataRes[0].Contents.result_sets)\
  \ {\n        return qDataRes[0].Contents.Envelope.Body.return.command;\n    }\n\
  \    // Extract the relevant fields from the data\n    itemCount = parseInt(qDataRes[0].Contents.result_sets.result_set.item_count);\n\
  \    if (itemCount === 0) {\n        return 'No results';\n    }\n    var output\
  \ = \"\";\n    var cs = qDataRes[0].Contents.result_sets.result_set.cs;\n    var\
  \ rs = qDataRes[0].Contents.result_sets.result_set.rs;\n    // When a single item\
  \ is returned, rs.r is a single object. Otherwise, it is an array...\n    if (itemCount\
  \ === 1) {\n        var row = {};\n        for (var i=0; i < cs.c.length; i++) {\n\
  \            row[cs.c[i].dn] = formatCell(rs.r.c[i].v);\n        }\n        entry.Contents.push(row);\n\
  \    } else {\n        for (var item=0; item < itemCount; item++) {\n          \
  \  var row = {};\n            for (var j=0; j < cs.c.length; j++) {\n          \
  \      row[cs.c[j].dn] = formatCell(rs.r[item].c[j].v);\n            }\n       \
  \     entry.Contents.push(row);\n        }\n    }\n    if (entry.Contents.length\
  \ === 0) {\n       return 'No Results';\n    }\n    var title = args.name ? args.name\
  \ : \"Tanium ask question\";\n    var headers = 'headers' in args ? argToList(args.headers)\
  \ : null;\n    entry.HumanReadable = tableToMarkdown(title, entry.Contents, headers);\n\
  \    return entry;\n}\nreturn res;"
scripttarget: 0
system: true
tags:
- tanium
timeout: 0s
toversion: 4.1.9
type: javascript
