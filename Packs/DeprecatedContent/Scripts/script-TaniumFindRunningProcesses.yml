args:
- description: Force Tanium to respond after x seconds (even if data was not collected
    fully by Tanium)
  name: timeout
- default: true
  description: Prefix of the process name to search
  name: processNamePrefix
  required: true
- description: Poll every Y seconds.
  name: pollfreq
comment: TaniumAskQuestionComplex - same as the AskQuestion command with additional
  filtering prepared by the script (an XML subsection added to the request).
commonfields:
  id: TaniumFindRunningProcesses
  version: -1
dependson:
  must:
  - tn-add-question-complex
  - tn-result-data
  - tn-result-info
deprecated: true
name: TaniumFindRunningProcesses
outputs:
- contextPath: Endpoint
  description: List of endpoints where the process was found
script: "var entry = {\n    Type: 1,\n    ContentsFormat: 'json',\n    Contents: [],\n\
  \    ReadableContentsFormat: formats.markdown,\n    HumanReadable: \"\",\n    EntryContext:\
  \ {}\n};\n// \"Get Computer Name\"\nvar selects = '\\\n<selects>\\\n <select>\\\n\
  \  <sensor>\\\n   <name>Computer Name</name>\\\n  </sensor>\\\n </select>\\\n</selects>';\n\
  // \"where Running Processes starts with \"\nvar group = '\\\n<group>\\\n <and_flag>1</and_flag>\\\
  \n <not_flag>0</not_flag>\\\n <sub_groups>\\\n  <group>\\\n   <and_flag>1</and_flag>\\\
  \n   <not_flag>0</not_flag>\\\n   <filters>\\\n    <filter>\\\n     <sensor>\\\n\
  \      <name>Running Processes</name>\\\n     </sensor>\\\n     <operator>RegexMatch</operator>\\\
  \n     <value_type>String</value_type>\\\n     <value>' + args.processNamePrefix\
  \ + '.*</value>\\\n     <not_flag>0</not_flag>\\\n     <ignore_case_flag>1</ignore_case_flag>\\\
  \n    </filter>\\\n   </filters>\\\n   <sub_groups/>\\\n   <deleted_flag>0</deleted_flag>\\\
  \n  </group>\\\n </sub_groups>\\\n</group>';\nvar timeout = parseInt(args.timeout)\
  \ || 30; // seconds\nvar pollFreq = parseInt(args.pollfreq) || 3; // seconds\nvar\
  \ taniumArgs = {\n      'selects': selects,\n      'group': group\n    };\nvar hosts\
  \ = [];\nvar res = executeCommand('tn-add-question-complex', taniumArgs);\nif (res[0].Type\
  \ !== entryTypes.error) {\n    var result = res[0].Contents.Envelope.Body.return;\n\
  \    if (result.command !== 'AddObject') {\n        return result.command;\n   \
  \ }\n    if (result.result_object.question.id) {\n        var qid = result.result_object.question.id;\n\
  \        // check the status of the new question, based on the returned ID\n   \
  \     var res = executeCommand('tn-result-info', {'id': qid, 'question-type': 'question'});\n\
  \        if (res[0].Type !== entryTypes.error) {\n            if (!res[0].Contents.result_infos)\
  \ {\n                return res[0].Contents.Envelope.Body.return.command;\n    \
  \        }\n            // Need to compare 'mr_passed' and 'estimated_total' values,\n\
  \            // to confirm that all machines have answered\n\n            var answers\
  \ = res[0].Contents.result_infos.result_info.mr_passed;\n            var expectedAnswers\
  \ = res[0].Contents.result_infos.result_info.estimated_total;\n            var polled\
  \ = false;\n            sec = 0;\n            do {\n              if (polled) {\n\
  \                  sec += pollFreq;\n                  wait(pollFreq);\n       \
  \       }\n              res = executeCommand('tn-result-info', {'id': qid, 'question-type':\
  \ 'question'});\n              if (res[0].Type === entryTypes.error) {\n       \
  \           return res[0];\n              }\n\n              answers = res[0].Contents.result_infos.result_info.mr_passed;\n\
  \              expectedAnswers = res[0].Contents.result_infos.result_info.estimated_total;\n\
  \              polled = true;\n            } while (answers !== expectedAnswers\
  \ && sec < timeout);\n            if (sec >= timeout) {\n              log(\"Timed\
  \ out. Results may be incomplete. Run the query again to allow Tanium to reach full\
  \ results.\");\n            } else {\n              log(\"Full results. It took\
  \ \" + sec + \" seconds, polling at \" + pollFreq + \" second intervals.\");\n \
  \           }\n            // Get question data (i.e. question result)\n       \
  \     var qDataRes = executeCommand('tn-result-data', {'id': qid, 'question-type':\
  \ 'question'});\n            if (!qDataRes[0].Contents.result_sets) {\n        \
  \        return qDataRes[0].Contents.Envelope.Body.return.command;\n           \
  \ }\n            // Extract the relevant fields from the data\n            itemCount\
  \ = parseInt(qDataRes[0].Contents.result_sets.result_set.item_count);\n        \
  \    if (itemCount === 0) {\n                return 'No results';\n            }\n\
  \            var output = \"\";\n            var cs = qDataRes[0].Contents.result_sets.result_set.cs;\n\
  \            var rs = qDataRes[0].Contents.result_sets.result_set.rs;\n        \
  \    // When a single item is returned, rs.r is a single object. Otherwise, it is\
  \ an array...\n            if (itemCount === 1) {\n                var row = {};\n\
  \                for (var i=0; i < cs.c.length; i++) {\n                    row[cs.c[i].dn]\
  \ = rs.r.c[i].v;\n                }\n                entry.Contents.push(row);\n\
  \            } else {\n                for (var item=0; item < itemCount; item++)\
  \ {\n                    var row = {};\n                    for (var j=0; j < cs.c.length;\
  \ j++) {\n                        row[cs.c[j].dn] = rs.r[item].c[j].v;\n       \
  \             }\n                    entry.Contents.push(row);\n               \
  \ }\n            }\n            if (entry.Contents.length === 0) {\n           \
  \    return 'No Results';\n            }\n            for (var i=0; i<entry.Contents.length;\
  \ i++) {\n                hosts.push(entry.Contents[i][\"Computer Name\"]);\n  \
  \          }\n\n            var hostArray = [];\n            for (var key in hosts){\n\
  \                hostArray.push({Hostname:hosts[key]});\n            }\n       \
  \     entry.EntryContext.Endpoint = hostArray;\n            entry.HumanReadable\
  \ = tableToMarkdown(\"Running Processes\", entry.Contents);\n            return\
  \ entry;\n        }\n    }\n}\nreturn res;"
scripttarget: 0
system: true
tags:
- tanium
timeout: 0s
toversion: 4.1.9
type: javascript
