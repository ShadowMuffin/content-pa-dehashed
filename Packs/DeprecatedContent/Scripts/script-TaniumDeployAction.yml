args:
- description: Specify the package name. e.g. !TaniumDeployAction packageName="Clean
    Stale Tanium Client Data"
  name: packageName
- description: Use the package ID instead of its name
  name: packageID
- description: Use parameters with the package. See https://kb.tanium.com/SOAP for
    more details
  name: parameters
- description: Comment to be added to the action history in the Tanium server
  name: comment
comment: Execute an action, optionally with parameters, and filtering - based on an
  existing package. See https://kb.tanium.com/SOAP for more information
commonfields:
  id: TaniumDeployAction
  version: -1
dependson:
  must:
  - tn-deploy-package
deprecated: true
name: TaniumDeployAction
outputs:
- contextPath: Tanium.Action.ID
  description: Action ID in tanium
- contextPath: Tanium.Action.Command
  description: Action command
- contextPath: Tanium.Action.State
  description: Action state
- contextPath: Tanium.Action.Comment
  description: Tanium comment
- contextPath: Tanium.Action.PackageName
  description: Tanium package name
script: "// An example script for deploying Tanium action with filter\nif (!args.packageName\
  \ && !args.packageID) {\n    return 'Missing parameter: packageName or packageID';\n\
  }\nvar packageName = args.packageName || '';\nvar packageID = args.packageID ||\
  \ '';\nvar packageParams = args.parameters || '';\nvar comment = args.comment ||\
  \ '';\n// targetGroup is the properties of the systems on which the requested package\
  \ should run\nvar targetGroup = '\\\n<target_group>\\\n  <and_flag>1</and_flag>\\\
  \n  <deleted_flag>0</deleted_flag>\\\n  <filters>\\\n    <filter>\\\n     <sensor>\\\
  \n       <name>IP Address</name>\\\n     </sensor>\\\n     <all_values_flag>0</all_values_flag>\\\
  \n     <ignore_case_flag>1</ignore_case_flag>\\\n     <not_flag>0</not_flag>\\\n\
  \     <operator>RegexMatch</operator>\\\n     <value>172.*</value>\\\n     <value_type>String</value_type>\\\
  \n  </filter>\\\n  </filters>\\\n  <not_flag>0</not_flag>\\\n  <sub_groups/>\\\n\
  \  <text>Online is \\\"True\\\"</text>\\\n</target_group>';\nvar taniumArgs = {\n\
  \      'package-name': packageName,\n      'package-id': packageID,\n      'parameters':\
  \ packageParams,\n      'comment': comment,\n      'target-group': targetGroup,\n\
  \    };\nvar res = executeCommand('tn-deploy-package', taniumArgs);\nif (isError(res[0]))\
  \ {\n    return res;\n}\n\nvar contents = dq(res[0],'Contents.packageSpec');\nvar\
  \ cleanContents = {};\nvar keys = Object.keys(contents);\nfor (var i = 0; i < keys.length;\
  \ i++) {\n    if (contents[keys[i]] || contents[keys[i]] === false) {\n        cleanContents[keys[i]]\
  \ = contents[keys[i]];\n    }\n}\n\nvar entry = {\n    Type: 1,\n    ContentsFormat:\
  \ 'json',\n    Contents: contents,\n    ReadableContentsFormat: formats.markdown,\n\
  \    HumanReadable: tableToMarkdown(\"Tanium deploy action\", cleanContents, null),\n\
  \    EntryContext: {\n        'Tanium.Action(val.ID == obj.ID)': {\n           \
  \ State: \"Deployed\",\n            ID: cleanContents.id,\n            Command:\
  \ cleanContents.command,\n            Comment: args.comment,\n            PackageName:\
  \ args.packageName\n        }\n    }\n};\n\nreturn entry;"
scripttarget: 0
tags:
- tanium
timeout: 0s
toversion: 4.1.9
type: javascript
