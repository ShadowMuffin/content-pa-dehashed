args:
- default: true
  description: Names of endpoints to update
  name: endpoints
  required: true
- description: ePO instance to use
  name: eposerver
  required: true
- description: Number of times the server will attempt to send the task to the client.
    Defaults to 1.
  name: retryAttempts
- description: Retry interval in seconds. Defaults to 30.
  name: retryIntervalInSeconds
- description: Maximum number of minutes before aborting all attempts. Defaults to
    5.
  name: abortAfterMinutes
- description: Maximum duration in minutes the client task is allowed to run. Defaults
    to 20.
  name: stopAfterMinutes
- description: Duration in minutes over which to randomly spread task execution. Defaults
    to 0 (execute on all clients immediately).
  name: randomizationInterval
comment: Trigger an ePO Client Task to update AV signatures for specific endpoints
commonfields:
  id: EPOUpdateEndpoints
  version: -1
dependson:
  must:
  - epo-command
deprecated: true
name: EPOUpdateEndpoints
script: "res = []\n\nendpoints = demisto.get(demisto.args(), 'endpoints')\nif not\
  \ endpoints:\n    res.append({\"Type\": entryTypes[\"error\"], \"ContentsFormat\"\
  : formats[\"text\"], \"Contents\": \"Received empty endpoints list!\"})\nelse:\n\
  \    endpoints = ','.join(endpoints) if isinstance(endpoints, list) else endpoints\n\
  \    eposerver = demisto.get(demisto.args(), 'eposerver')\n    # Find the VSEContentUpdateDemisto\
  \ Client Task\n    dArgsFind = {\"using\": eposerver,\n                 \"command\"\
  : \"clienttask.find\",\n                 \"params\": \"searchText=VSEContentUpdateDemisto\"\
  \n                 }\n    repoVersions = {}\n    resCmdFind = demisto.executeCommand('epo-command',\
  \ dArgsFind)\n    try:\n        for entry in resCmdFind:\n            if isError(entry):\n\
  \                res = resCmdFind\n                break\n            else:\n  \
  \              taskId = demisto.get(entry, 'Contents.response')[0]['objectId']\n\
  \                dArgsUpdate = {\"using\": eposerver,\n                        \
  \       \"command\": \"clienttask.run\",\n                               \"params\"\
  : \"names=\" + endpoints + \"&productId=EPOAGENTMETA&taskId=%d\" % taskId\n    \
  \                           }\n                for optarg in ['retryAttempts', 'retryIntervalInSeconds',\
  \ 'abortAfterMinutes', 'stopAfterMinutes', 'randomizationInterval']:\n         \
  \           v = None\n                    v = demisto.get(demisto.args(), optarg)\n\
  \                    if v:\n                        dArgsUpdate[\"params\"] += ('&'\
  \ + optarg + '=' + v)\n\n                demisto.log(dArgsUpdate[\"params\"])\n\
  \                resCmdUpdate = demisto.executeCommand('epo-command', dArgsUpdate)\n\
  \                demisto.setContext('agentupdateresults', json.dumps(resCmdUpdate[0]['Contents']))\n\
  \                res += resCmdUpdate\n\n    except Exception as ex:\n        res.append({\"\
  Type\": entryTypes[\"error\"], \"ContentsFormat\": formats[\"text\"],\n        \
  \            \"Contents\": \"Error occurred while parsing output from command. Exception\
  \ info:\\n\" + str(ex) + \"\\n\\nInvalid output:\\n\" + str(resCmdFind)})\n\ndemisto.results(res)\n"
scripttarget: 0
subtype: python2
system: true
tags:
- epo
timeout: 0s
toversion: 4.1.9
type: python
