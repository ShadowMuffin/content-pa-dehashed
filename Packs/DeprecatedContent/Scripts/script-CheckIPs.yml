args:
- default: true
  description: Raw text from which to extract IP addresses using the appropriate regular
    expression. If omitted, will scan Incident Details instead.
  name: data
comment: Get reputation for IPs in the incident or given raw text
commonfields:
  id: CheckIPs
  version: -1
dependson:
  should:
  - ip
  - pt-malware
deprecated: true
name: CheckIPs
script: "import re\nimport socket\nstrIpRegex = r'\\b(?:[0-9]{1,3}\\.){3}[0-9]{1,3}\\\
  b'\ndef is_valid_ipv4_address(address):\n    try:\n        socket.inet_pton(socket.AF_INET,\
  \ address)\n    except AttributeError:  # no inet_pton here, sorry\n        try:\n\
  \            socket.inet_aton(address)\n        except socket.error:\n         \
  \   return False\n        return address.count('.') == 3\n    except socket.error:\
  \  # not a valid address\n        return False\n    return True\nres = []\nips =\
  \ []\nbadIps = []\ndata = demisto.args()['data'] if demisto.get(demisto.args(),\
  \ 'data') else demisto.incidents()[0]['details']\nif isinstance(data, list):\n \
  \   ips = data[:]\nelse:\n    for m in re.finditer(strIpRegex, data, re.I):\n  \
  \      ip = m.group(0)\n        if ip in ips:\n            continue\n        if\
  \ not is_valid_ipv4_address(ip):\n            continue\n        ips.append(ip)\n\
  for ip in ips:\n    if isCommandAvailable('ip'):\n        rep = demisto.executeCommand('ip',\
  \ {'ip': ip})\n        for r in rep:\n            if positiveIp(r):\n          \
  \      badIps.append(ip)\n                res.append(shortIp(r))\n    if isCommandAvailable('pt-malware'):\n\
  \        ptRep = demisto.executeCommand('pt-malware', {'query': ip})\n        if\
  \ not isError(ptRep[0]) and demisto.get(ptRep[0], 'Contents.results'):\n       \
  \     badIps.append(ip)\n            contents = flattenTable(demisto.get(ptRep[0],\
  \ 'Contents.results'))\n            res.append( {'ContentsFormat': formats['table'],\
  \ 'Type': entryTypes['note'], 'Contents': contents} )\n\nif len(res) > 0:\n    res.extend(['yes',\
  \ 'Found malicious IPs!'])\n    appendContext('bad_ips', badIps, dedup = True)\n\
  else:\n    res.append('no')\n    if not demisto.get(demisto.context(), 'bad_ips'):\n\
  \        demisto.setContext('bad_ips', '')\n    if ips:\n        res.append('Only\
  \ clean IPs found: \\n' + '\\n'.join(ips))\n    else:\n        res.append('No IPs\
  \ found within data. Nothing to check.')\ndemisto.results(res)"
scripttarget: 0
subtype: python2
system: true
tags:
- server
- threat-intel
- virustotal
- xfe
timeout: 0s
toversion: 4.1.9
type: python
