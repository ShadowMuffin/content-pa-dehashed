args:
- default: true
  description: Raw text from which to extract URLs using the appropriate regular expression.
    If omitted, will scan Incident Details instead.
  name: data
comment: Check the URLs in the incident, or raw text provided as argument, for malicious
  URLs
commonfields:
  id: CheckURLs
  version: -1
dependson:
  should:
  - url
  - pt-malware
deprecated: true
name: CheckURLs
script: "import re\nstrURLRegex = r'(?i)(?:(?:https?|ftp):\\/\\/|www\\.|ftp\\.)(?:\\\
  ([-A-Z0-9+&@#\\/%=~_|$?!:,.]*\\)|[-A-Z0-9+&@#\\/%=~_|$?!:,.])*(?:\\([-A-Z0-9+&@#\\\
  /%=~_|$?!:,.]*\\)|[A-Z0-9+&@#\\/%=~_|$])'\nres = []\nurls = []\nbadUrls = []\nfiltered\
  \ = ['http://schemas.microsoft.com/office/2004/12/omml', 'http://www.w3.org/TR/REC-html40']\n\
  data = demisto.args()['data'] if demisto.get(demisto.args(), 'data') else demisto.incidents()[0]['details']\n\
  if isinstance(data, list):\n    urls = data[:]\nelse:\n    for m in re.finditer(strURLRegex,\
  \ data, re.I):\n        u = m.group(0)\n        if u in filtered:\n            continue\n\
  \        if u in urls:\n            continue\n        if 'mailto:' in u:\n     \
  \       continue\n        urls.append(u)\nfor u in urls:\n    if isCommandAvailable('url'):\n\
  \        rep = demisto.executeCommand('url', {'url': u})\n        for r in rep:\n\
  \            if positiveUrl(r):\n                badUrls.append(u)\n           \
  \     res.append(shortUrl(r))\n    if isCommandAvailable('pt-malware'):\n      \
  \  ptRep = demisto.executeCommand('pt-malware', {'query': u})\n        if not isError(ptRep[0])\
  \ and demisto.get(ptRep[0], 'Contents.results'):\n            badUrls.append(u)\n\
  \            contents = flattenTable(demisto.get(ptRep[0], 'Contents.results'))\n\
  \            res.append( {'ContentsFormat': formats['table'], 'Type': entryTypes['note'],\
  \ 'Contents': contents} )\nif len(res) > 0:\n    res.extend(['yes', 'Found malicious\
  \ URLs!'])\n    currUrls = demisto.get(demisto.context(), 'bad_urls')\n    if currUrls\
  \ and isinstance(currUrls, list):\n        currUrls += [u for u in badUrls if u\
  \ not in currUrls]\n    else:\n        currUrls = badUrls\n    demisto.setContext('bad_urls',\
  \ currUrls)\nelse:\n    res.append('no')\n    if urls:\n        res.append('Only\
  \ clean URLs found: \\n' + '\\n'.join(urls))\n    else:\n        res.append('No\
  \ URLs found within data. Nothing to check.')\ndemisto.results(res)"
scripttarget: 0
subtype: python2
system: true
tags:
- server
- threat-intel
- xfe
- virustotal
timeout: 0s
toversion: 4.1.9
type: python
