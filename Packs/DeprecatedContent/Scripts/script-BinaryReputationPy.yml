args:
- default: true
  description: If provided, checks only files whose names are in the list. The names
    should be comma-separated.
  name: fileNames
- description: Time to wait and poll if any Default 5 minutes.
  name: maxwait
comment: Get reputation for any hash or file in the incident details
commonfields:
  id: BinaryReputationPy
  version: -1
dependson:
  must:
  - file
deprecated: true
name: BinaryReputationPy
script: "from time import sleep\n# Look for various hashes in the incident\n# Inspect\
  \ labels and attachments for hashes and check the hash reputation\nimport re\nstrHashRegex\
  \ = r'\\b[a-fA-F\\d]{32}\\b'\n# Iterate on all the labels and find hashes\nhashRe\
  \ = re.compile(strHashRegex, re.I)\nhashes = set()\nDEFAULT_WAIT = 5\nmaxwait =\
  \ int(demisto.args()['maxwait']) if 'maxwait' in demisto.args() else DEFAULT_WAIT\n\
  \ninc = demisto.incidents()\nif inc and 'labels' in inc[0]:\n    labels = inc[0]['labels']\n\
  \    if labels:\n        for t in labels:\n            for h in hashRe.finditer(t['value']):\n\
  \                hashes.add(h.group(0))\n\n# Find hashes in the details\nfor h in\
  \ hashRe.finditer(demisto.incidents()[0]['details']):\n    hashes.add(h.group(0))\n\
  fileNames = []\nif 'fileNames' in demisto.args():\n    fileNames = demisto.args()['fileNames'].split(',')\n\
  # Also get hashes of files in war room entries\nentries = demisto.executeCommand('getEntries',\
  \ {})\nfor entry in entries:\n    if entry['File'] and demisto.get(entry, 'FileMetadata.md5')\
  \ and (len(fileNames) == 0 or entry['File'] in fileNames):\n        hashes.add(demisto.get(entry,\
  \ 'FileMetadata.md5'))\nbadHashes = []\nres = []\nMalicious = False\nfor h in hashes:\n\
  \    Answered = False\n    rep = demisto.executeCommand('file', {'file': h})\n \
  \   for r in rep:\n        if r['Brand'] == 'virustotal':\n            wait = 0\n\
  \            while isError(r) and '204 (No Content)' in r['Contents'] and wait <\
  \ maxwait:\n                demisto.log('Encountered VirusTotal Free API key rate\
  \ limit. Waiting 1 minute and trying again.')\n                sleep(60)\n     \
  \           r = demisto.executeCommand('file', {'file': h, 'using-brand': 'virustotal'})[0]\n\
  \                wait += 1\n            if wait > 0:\n                demisto.log\
  \ ('Waited '  + str(wait) + ' minutes to query VirusTotal for ' + h + '.')\n   \
  \     if isError(r):\n            res.append(r)\n            continue\n        Answered\
  \ = True\n        if positiveFile(r):\n            Malicious = True\n          \
  \  badHashes.append(h)\n            res.append(shortFile(r))\n    if not Answered:\n\
  \        res.append( { \"Type\" : entryTypes[\"error\"], \"ContentsFormat\" : formats[\"\
  text\"], \"Contents\" : \"No reputation sources returned a valid answer for \" +\
  \ h } )\nif Malicious:\n    res.extend(['yes', 'Found malicious hashes!'])\n   \
  \ appendContext('bad_hashes', badHashes, dedup = True)\nelse:\n    res.extend(['No\
  \ suspicious files found', 'no'])\ndemisto.results(res)"
scripttarget: 0
subtype: python2
system: true
tags:
- hash
- server
- threat-intel
- virustotal
- xfe
- wildfire
timeout: 0s
toversion: 4.1.9
type: python
