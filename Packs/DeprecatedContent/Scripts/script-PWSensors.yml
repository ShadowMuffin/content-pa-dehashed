args:
- default: true
  description: The id of the individual sensor (if not provided will query all available
    sensors)
  name: sensorId
comment: List the available ProtectWise sensors or retrieve information for a specific
  sensor using its id
commonfields:
  id: PWSensors
  version: -1
dependson:
  must:
  - ProtectWise|||sensors
deprecated: true
name: PWSensors
script: "res = []\ndArgs = demisto.args()\ndArgs[\"using-brand\"] = \"ProtectWise\"\
  \n\nresSearch = demisto.executeCommand(\"sensors\", dArgs)\ntry:\n    for entry\
  \ in resSearch:\n        if isError(entry):\n            res = resSearch\n     \
  \       break\n        else:\n            myData = demisto.get(entry, 'Contents')\n\
  \            if not isinstance(myData, list):\n                myData = [myData]\n\
  \            for row in myData:\n                for k in row:\n               \
  \     row[k] = formatCell(row[k])\n            if myData:\n                demisto.setContext('pwsensors',\
  \ [s['id'] for s in myData])\n                res.append({\"Type\": entryTypes[\"\
  note\"], \"ContentsFormat\": formats[\"table\"], \"Contents\": myData})\n      \
  \      else:\n                res.append({\"Type\": entryTypes[\"error\"], \"ContentsFormat\"\
  : formats[\"text\"],\n                            \"Contents\": \"Could not extract\
  \ result list from response: \" + json.dumps(entry[\"Contents\"], indent=4)})\n\
  except Exception as ex:\n    res.append({\"Type\": entryTypes[\"error\"], \"ContentsFormat\"\
  : formats[\"text\"],\n                \"Contents\": \"Error occurred while parsing\
  \ output from command. Exception info:\\n\" + str(ex) + \"\\n\\nInvalid output:\\\
  n\" + str(resSearch)})\ndemisto.results(res)\n"
scripttarget: 0
subtype: python2
system: true
tags:
- protectwise
timeout: 0s
toversion: 4.1.9
type: python
