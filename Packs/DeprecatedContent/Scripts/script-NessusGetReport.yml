args:
- default: true
  description: The Scan ID (use command list-scans to get possible scan ID's)
  name: scanId
  required: true
- description: The history_id of the historical data that should be returned.
  name: historyId
- description: scan report file format (nessus, csv, html, db, pdf). Default is 'nessus'.
  name: format
- description: The password used to encrypt database exports (*Required when exporting
    as DB).
  name: password
- description: 'The chapters to include in the export (expecting a semi-colon delimited
    string comprised of some combination of the following options: vuln_hosts_summary,
    vuln_by_host, compliance_exec, remediations, vuln_by_plugin, compliance)'
  name: chapters
- description: How long (in seconds) to wait for the result before giving up(Default
    is 5min)
  name: timeout
comment: Get report for a scan. Triggers an export in the requested file format, waits
  5 minutes for it to complete (or whatever timeout given as an argument) , and downloads
  the report.
commonfields:
  id: NessusGetReport
  version: -1
dependson:
  must:
  - Nessus|||scan-export
  - Nessus|||scan-export-status
  - Nessus|||scan-report-download
deprecated: true
name: NessusGetReport
script: "from time import ctime\nres = []\nDEFAULT_TIMEOUT = 60 * 5\ndArgs = demisto.args()\n\
  if 'format' not in dArgs:\n    dArgs['format'] = 'nessus'\nresCmd = demisto.executeCommand(\"\
  scan-export\", dArgs)\ntry:\n    for entry in resCmd:\n        if isError(entry):\n\
  \            res = resCmd\n            break\n        else:\n            fileID\
  \ = demisto.get(entry, 'Contents')\n\n            timeout = float(demisto.get(dArgs,\
  \ 'timeout'))\n            if not timeout:\n                timeout = DEFAULT_TIMEOUT\n\
  \            timeLeft = timeout\n            while timeLeft > 0:\n             \
  \   resStatus = demisto.executeCommand(\"scan-export-status\", {'scanId': dArgs['scanId'],\
  \ 'fileId': fileID})\n                if isError(resStatus[0]):\n              \
  \      res.append(resStatus[0])\n                else:\n                    if resStatus[0]['Contents']\
  \ == 'ready':\n                        res += demisto.executeCommand(\"scan-report-download\"\
  , {'scanId': dArgs['scanId'], 'fileId': fileID})\n                        break\n\
  \                sleep(timeout / 10.0)\n                timeLeft -= (timeout / 10.0)\n\
  \            else:\n                res.append({\"Type\": entryTypes[\"error\"],\
  \ \"ContentsFormat\": formats[\"text\"], \"Contents\": \"Timeout reached while waiting\
  \ for Nessus export to complete.\"})\nexcept Exception as ex:\n    res.append({\"\
  Type\": entryTypes[\"error\"], \"ContentsFormat\": formats[\"text\"],\n        \
  \        \"Contents\": \"Error occurred while parsing output from command. Exception\
  \ info:\\n\" + str(ex) + \"\\n\\nInvalid output:\\n\" + str(resCmd)})\ndemisto.results(res)\n"
scripttarget: 0
subtype: python2
system: true
tags:
- nessus
timeout: 0s
toversion: 4.1.9
type: python
