args:
- default: true
  description: Instance names of ePO servers to update
  name: repos
  required: true
comment: Trigger a Server Task in specific ePO servers to pull latest signatures from
  update server
commonfields:
  id: EPOUpdateRepository
  version: -1
dependson:
  must:
  - epo-command
deprecated: true
name: EPOUpdateRepository
script: "def generateText(tbl):\n    return '\\n\\n'.join(['\\n'.join([k + ': ' +\
  \ row[k] for k in row]) for row in tbl])\n\ndef generateHtml(cols, tbl):\n    html\
  \ = \"\"\n    if tbl and isinstance(tbl, list) and len(tbl) > 0:\n        html =\
  \ \"\"\"<style type=\"text/css\">\n.tg  {border-collapse:collapse;border-spacing:0;border-color:#bbb;}\n\
  .tg td{font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:#888;color:#594F4F;}\n\
  .tg th{font-family:Arial, sans-serif;font-size:14px;font-weight:normal;padding:5px\
  \ 15px 5px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:#888;color:#493F3F;}\n\
  .tg .tg-9zxc{vertical-align:top;text-align:left; }\n.tg .tg-x1ca{background-color:#dfdfdf;vertical-align:top;text-align:center;font-weight:bold;}\n\
  </style>\n<table class=\"tg\">\n  <tr>\"\"\"\n        for colName in cols:\n   \
  \         html += '<th class=\"tg-x1ca\">' + colName + '</th>'\n        html +=\
  \ '</tr>'\n        for row in tbl:\n            html += '<tr>'\n            for\
  \ colName in cols:\n                html += '<th class=\"tg-9zxc\">' + flattenCell(row[colName]).replace('\\\
  n', '<br/>') + '</th>'\n            html += '</tr>'\n        html += '</table>'\n\
  \    return html\n\n\nres = []\nrepos = demisto.get(demisto.args(), 'repos')\nif\
  \ not repos:\n    res.append({\"Type\": entryTypes[\"error\"], \"ContentsFormat\"\
  : formats[\"text\"], \"Contents\": \"Received empty repository name!\"})\nelse:\n\
  \    repos = ','.join(repos) if isinstance(repos, list) else repos\n    dArgs =\
  \ {\"using\": repos,\n             \"command\": \"repository.pull\",\n         \
  \    \"params\": \"sourceRepository=McAfeeHttp&targetBranch=Current\"\n        \
  \    }\n    noncompliant = []\n    tbl = []\n    resCmdName = demisto.executeCommand('epo-command',\
  \ dArgs)\n    try:\n        for entry in resCmdName:\n            if isError(entry):\n\
  \                res = resCmdName\n                break\n            else:\n  \
  \              repoName = entry['ModuleName']\n                resp = demisto.get(entry,\
  \ 'Contents.response')\n                resultShort = resp[:resp.find('\\n')]\n\
  \                resultDetails = resp[resp.find('\\n')+1:]\n                tbl.append({'Repository':\
  \ repoName, 'Result': resultShort, 'Result Details': resultDetails})\n    except\
  \ Exception as ex:\n        res.append({\"Type\": entryTypes[\"error\"], \"ContentsFormat\"\
  : formats[\"text\"],\n                    \"Contents\": \"Error occurred while parsing\
  \ output from command. Exception info:\\n\" + str(ex) + \"\\n\\nInvalid output:\\\
  n\" + str(resCmdName)})\n    #demisto.log(generateHtml(('Repository', 'Result',\
  \ 'Result Details'),tbl))\n    demisto.setContext('repoupdateresultstext', generateText(tbl))\n\
  \    demisto.setContext('repoupdateresultshtml', generateHtml(('Repository', 'Result',\
  \ 'Result Details'),tbl))\n    res.append({\"Type\": entryTypes[\"note\"], \"ContentsFormat\"\
  : formats[\"table\"], \"Contents\": tbl})\ndemisto.results(res)\n"
scripttarget: 0
subtype: python2
system: true
tags:
- epo
timeout: 0s
toversion: 4.1.9
type: python
