args:
- default: true
  description: Observation ID
  name: id
  required: true
- description: the sensor id or comma-separated list of ids
  name: sensorId
  required: true
comment: Display details about the specified ProtectWise Observation.
commonfields:
  id: PWObservationDetails
  version: -1
dependson:
  must:
  - pw-observation-get
deprecated: true
name: PWObservationDetails
script: "res = []\ndArgs = demisto.args()\ndArgs[\"using-brand\"] = \"ProtectWise\"\
  \ndArgs['sensorId'] = demisto.get(dArgs, 'sensorId')\n\nresCmd = demisto.executeCommand(\"\
  pw-observation-get\", dArgs)\ntry:\n    for entry in resCmd:\n        if isError(entry):\n\
  \            res = resCmd\n            break\n        else:\n            myData\
  \ = demisto.get(entry, 'Contents')\n            if myData and isinstance(myData,\
  \ dict):\n                for field in myData:\n                    myData[field]\
  \ = formatCell(myData[field])\n                res.append({\"Type\": entryTypes[\"\
  note\"], \"ContentsFormat\": formats[\"table\"], \"Contents\": myData})\n      \
  \      else:\n                res.append({\"Type\": entryTypes[\"error\"], \"ContentsFormat\"\
  : formats[\"text\"],\n                            \"Contents\": \"Could not extract\
  \ result list from response: \" + json.dumps(entry[\"Contents\"], indent = 4)})\n\
  except Exception as ex:\n    res.append({\"Type\": entryTypes[\"error\"], \"ContentsFormat\"\
  : formats[\"text\"],\n                \"Contents\": \"Error occurred while parsing\
  \ output from command. Exception info:\\n\" + str(ex) + \"\\n\\nInvalid output:\\\
  n\" + str(resCmd)})\ndemisto.results(res)\n"
scripttarget: 0
subtype: python2
system: true
tags:
- protectwise
timeout: 0s
toversion: 4.1.9
type: python
