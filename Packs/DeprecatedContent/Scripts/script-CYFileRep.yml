args:
- default: true
  description: The ID of a file entry to upload
  name: entry
  required: true
comment: This script is deprecated. Use the Cylance integration instead.
commonfields:
  id: CYFileRep
  version: -1
dependson:
  must:
  - cylance|||file
  - cy-upload
deprecated: true
name: CYFileRep
outputs:
- contextPath: File.MD5
  description: Bad hash MD5
- contextPath: File.SHA1
  description: Bad hash SHA1
- contextPath: File.SHA256
  description: Bad hash SHA256
- contextPath: File.Malicious.Vendor
  description: For malicious files, the vendor that made the decision
- contextPath: File.Malicious.Description
  description: For malicious files, the reason for the vendor to make the decision
- contextPath: DBotScore.Indicator
  description: The indicator we tested
- contextPath: DBotScore.Type
  description: The type of the indicator
- contextPath: DBotScore.Vendor
  description: Vendor used to calculate the score
- contextPath: DBotScore.Score
  description: The actual score
script: "# Retrieve file entry reputation using Cylance\n# First, get the file entry,\
  \ check with Cylance if the file is known and if not, upload the file, wait 5 seconds\
  \ and check again\nimport time\ne = demisto.args()['entry']\nfileEntry = demisto.executeCommand('getEntry',\
  \ {'id': e})\nif fileEntry and len(fileEntry) == 1 and fileEntry[0]['Type'] != entryTypes['error']:\n\
  \    fe = fileEntry[0]\n    if fe['File'] and demisto.get(fe, 'FileMetadata.md5'):\n\
  \        rep = demisto.executeCommand('file', {'file': demisto.get(fe, 'FileMetadata.md5'),\
  \ 'using-brand': brands['cy']})\n        if rep and len(rep) == 1 and rep[0]['Type']\
  \ != entryTypes['error']:\n            contents = demisto.get(rep[0], 'Contents')\n\
  \            k = contents.keys()\n            if k and len(k) > 0:\n           \
  \     v = contents[k[0]]\n                if demisto.get(v, 'status') == 'NEEDFILE'\
  \ and demisto.get(v, 'confirmcode'):\n                    upload = demisto.executeCommand('cy-upload',\
  \ {'entry': e, 'confirmCode': demisto.get(v, 'confirmcode')})\n                \
  \    if upload and len(upload) == 1 and upload[0]['Type'] != entryTypes['error']:\n\
  \                        contents = demisto.get(upload[0], 'Contents')\n       \
  \                 k = contents.keys()\n                        if k and len(k) >\
  \ 0:\n                            v1 = contents[k[0]]\n                        \
  \    if demisto.get(v1, 'status') == 'ACCEPTED':\n                             \
  \   time.sleep(10)\n                                rep = demisto.executeCommand('file',\
  \ {'file': demisto.get(fe, 'FileMetadata.md5'), 'using-brand': brands['cy']})\n\
  \                                demisto.results(rep)\n                        \
  \    else:\n                                demisto.results(upload)\n          \
  \          else:\n                        demisto.results(upload)\n            \
  \    else:\n                    demisto.results(rep)\n        else:\n          \
  \  demisto.results(rep)\n    else:\n        demisto.results('Entry is not a file')\n\
  else:\n    demisto.results('Unable to retrieve entry')"
scripttarget: 0
subtype: python2
system: true
tags:
- server
- threat-intel
- cylance
- file
tests:
- No test - no instance
timeout: 0s
toversion: 4.1.9
type: python
