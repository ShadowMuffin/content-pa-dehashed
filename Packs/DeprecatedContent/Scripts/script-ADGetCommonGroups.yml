args:
- default: true
  description: Active Directory Names of the desired users
  name: name
- description: Enter any value to allow nested groups check as well
  name: nestedSearch
comment: Use Active Directory to get common groups between supplied users.
commonfields:
  id: ADGetCommonGroups
  version: -1
dependson:
  must:
  - ad-search
deprecated: true
name: ADGetCommonGroups
script: "COMMON_GROUPS_LABAL = 'CommonGroups'\nres = []\nresp_list = []\n\nname_list\
  \ = argToList(demisto.args()['name']) if demisto.get(demisto.args(), 'name') else\
  \ \"\"\ndArgs = demisto.args()\nfor name in name_list:\n    dArgs.update({'name':name})\n\
  \    resp = demisto.executeCommand('ADGetUserGroups', dArgs)\n    if isError(resp[0]):\n\
  \        res += [{ 'Type' : entryTypes['error'], 'ContentsFormat' : formats['text'],\
  \ 'Contents' : 'Error returned from ADGetUserGroups for {0}:\\n'.format(name) +\
  \ resp[0]['Contents'] }]\n    else:\n        resp_list += resp\n\ncommon_groups\
  \ = set()\n\nfor resp in resp_list:\n\n    user_groups = [row['name'] for row in\
  \ resp['Contents']]\n    if common_groups:\n        common_groups = common_groups.intersection(user_groups)\n\
  \    else:\n        common_groups = set(user_groups)\n\nif common_groups:\n    markdownString\
  \ = '### The users common groups are:\\n'\n    markdownString += \"\".join(['* '\
  \ + s + '\\n' for s in common_groups])\n    res.append ({'ContentsFormat': formats['markdown'],\
  \ 'Type': entryTypes['note'], 'Contents': markdownString})\n\n    group_names =\
  \ ','.join([str(s) for s in common_groups])\n    demisto.setContext(COMMON_GROUPS_LABAL,\
  \ group_names)\n\n    answer = 'yes'\nelse:\n    demisto.log(\"\\nThere are no common\
  \ groups among the users\\n\")\n    answer = 'no'\n\nres.append( { \"Type\" : entryTypes[\"\
  note\"], \"ContentsFormat\" : formats[\"text\"], \"Contents\" : answer } )\ndemisto.results(res)"
scripttarget: 0
subtype: python2
system: true
tags:
- active directory
timeout: 0s
toversion: 4.1.9
type: python
