args:
- description: Active Directory Distinguished Name for the desired user
  name: dn
- description: Name of the desired user
  name: name
- description: Email address of the desired user
  name: email
- description: Include these AD attributes of the resulting objects in addition to
    the default ones
  name: attributes
comment: Use Active Directory to retrieve detailed information about a user account.
  The user can be specified by name, email or as an Active Directory Distinguished
  Name (DN).
commonfields:
  id: ADUserLogonInfo
  version: -1
dependson:
  must:
  - ad-search
deprecated: true
name: ADUserLogonInfo
script: "# Optional arguments and default values\nattrs = 'name,displayname,lastlogon,lastlogoff,logoncount,badPasswordTime,badPwdCount,lastLogonTimestamp,pwdLastSet,whenCreated,whenChanged,memberOf'\n\
  if demisto.get(demisto.args(), 'attributes'):\n    attrs += \",\" + demisto.args()['attributes']\n\
  userDN = ''\nresp = ''\nif demisto.get(demisto.args(), 'dn'):\n    userDN = demisto.args()['dn']\n\
  elif demisto.get(demisto.args(), 'name'):\n    resp = demisto.executeCommand( 'AdSearch',\
  \ { 'filter' : \"(&(objectCategory=User)(name=\" + demisto.args()['name'] + \"))\"\
  \ } )\nelif demisto.get(demisto.args(), 'email'):\n    resp = demisto.executeCommand(\
  \ 'ADGetUsersByEmail', { 'email' : demisto.args()['email'] } )\nelse:\n    demisto.results(\
  \ { 'Type' : entryTypes['error'], 'ContentsFormat' : formats['text'], 'Contents'\
  \ : 'You must provide either dn, name or email as argument!' } )\n    sys.exit(0)\n\
  if type(resp)==list and len( [ r for r in resp if isError(r) ] ) > 0 :\n    demisto.results(\
  \ { 'Type' : entryTypes['error'], 'ContentsFormat' : formats['text'], 'Contents'\
  \ : 'Error returned by ad command: ' + r['Contents'] } )\n    sys.exit(0)\nif type(resp)==list\
  \ and len(resp)==1 and type(resp[0])==dict and 'Contents' in resp[0] and type(resp[0]['Contents'])==list\
  \ and len(resp[0]['Contents'])==1 and type(resp[0]['Contents'][0])==dict and 'dn'\
  \ in resp[0]['Contents'][0]:\n    userDN = resp[0]['Contents'][0]['dn']\nelse:\n\
  \    demisto.results( { 'Type' : entryTypes['error'], 'ContentsFormat' : formats['text'],\
  \ 'Contents' : 'Unexpected output from ad command.' } )\n    sys.exit(0)\nif userDN:\n\
  \    filterstr = r\"(&(objectClass=User)(distinguishedName=\" + userDN + \"))\"\n\
  \    resAD = demisto.executeCommand( 'AdSearch', { 'filter' : filterstr, 'attributes'\
  \ : attrs } )\n    try:\n        for m in resAD:\n            if isError(m):\n \
  \               continue\n            for f in [ 'lastlogon' , 'lastlogoff' , 'pwdLastSet'\
  \ , 'badPasswordTime' , 'lastLogonTimestamp' ]:\n                if m['Contents'][0][f]\
  \ == \"0\":\n                    m['Contents'][0][f] = \"N/A\"\n               \
  \ else:\n                    try:\n                        m['Contents'][0][f] =\
  \ FormatADTimestamp( m['Contents'][0][f] )\n                    except:\n      \
  \                  pass # Could not prettify timestamp - return as is\n        \
  \    for f in [ 'whenChanged' , 'whenCreated' ]:\n                try:\n       \
  \             m['Contents'][0][f] = PrettifyCompactedTimestamp( m['Contents'][0][f]\
  \ )\n                except:\n                    pass # Could not prettify timestamp\
  \ - return as is\n        demisto.results ( resAD )\n    except Exception as ex:\n\
  \        demisto.results( { 'Type' : entryTypes['error'], 'ContentsFormat' : formats['text'],\
  \ 'Contents' : 'Error occurred while parsing output from ad command. Invalid output:\\\
  n' + str( resAD ) } )\nelse:\n    demisto.results( { 'Type' : entryTypes['error'],\
  \ 'ContentsFormat' : formats['text'], 'Contents' : 'User not found.' } )"
scripttarget: 0
subtype: python2
system: true
tags:
- active directory
timeout: 0s
toversion: 4.1.9
type: python
