args:
- description: Email address from which Splunk sends emails to our mail listener
  name: splunkSender
- description: Email address from which Nexpose sends emails to our mail listener
  name: nexposeSender
- description: The incident type to be set in case the email is neither from Splunk
    nor Nexpose
  name: defaultIncidentType
  required: true
- description: Argument passed as-is to NexposeEmailParser. See its documentation
    for details.
  name: minRiskScore
- description: Argument passed as-is to NexposeEmailParser. See its documentation
    for details.
  name: minVulnCount
- description: Email address from which sentinel one sends emails to our mail listener
  name: sentinelOneSender
- description: Incident type to classify sentinel one events to
  name: sentinelOneIncidentType
comment: Classify an incident from mail.
commonfields:
  id: DefaultIncidentClassifier
  version: -1
dependson: {}
deprecated: true
name: DefaultIncidentClassifier
script: "for (var i =0; incidents[0].labels && i < incidents[0].labels.length; i++)\
  \ {\n    if (incidents[0].labels[i].type === 'Email/from') {\n        var sender\
  \ = incidents[0].labels[i].value;\n        if (sender === args.splunkSender) {\n\
  \            executeCommand('SplunkEmailParser', {});\n            return setPlaybookAccordingToType(incidents[0].type);\n\
  \        } else if (sender === args.nexposeSender) {\n            return executeCommand('NexposeEmailParser',\
  \ {minRiskScore: args.minRiskScore, minVulnCount: args.minVulnCount});\n       \
  \ } else if (sender === args.sentinelOneSender) {\n            return setIncident({type:\
  \ args.sentinelOneIncidentType});\n        } else {\n            return [setPlaybookAccordingToType(args.defaultIncidentType),\n\
  \            setIncident({type: args.defaultIncidentType})];\n        }\n    }\n\
  }\nreturn 'incident is not an email, not classifying';"
scripttarget: 0
system: true
tags:
- ingestion
timeout: 0s
toversion: 4.1.9
type: javascript
