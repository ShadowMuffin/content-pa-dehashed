args:
- default: true
  description: AWS EC2 Instance ID
  name: instanceId
- description: AWS EC2 Instance Name
  name: instanceName
comment: Get AWS EC2 instance details
commonfields:
  id: AwsGetInstanceInfo
  version: -1
dependson:
  must:
  - get-instance-info
  - get-sg-info
  - get-ebs-volume-info
deprecated: true
name: AwsGetInstanceInfo
script: "function markdownTableHeader(columnNames) {\n    var header=\"|\";\n    var\
  \ divider=\"|\"\n    for (var idx=0;idx<columnNames.length;idx++) {\n        header\
  \ += columnNames[idx] + \"|\";\n        divider+= \"-|\";\n    }\n    return header+\"\
  \\n\"+divider+\"\\n\";\n}\nfunction formatSecurityGroupRule(id,name,dir,rule) {\n\
  \    var tmpSgTable=\"\";\n    var tmpProtocol = (rule.ipProtocol == \"-1\") ? \"\
  All\" : rule.ipProtocol.toUpperCase();\n\n    var tmpPort;\n    if (!rule.fromPort\
  \ || rule.fromPort == \"-1\" || rule.fromPort == \"0\") {\n        tmpPort = \"\
  All\";\n    } else  {\n        tmpPort = (rule.fromPort == rule.toPort) ? rule.fromPort\
  \ : rule.fromPort + \"-\" + rule.toPort;\n    }\n\n    var ipRanges =  (Array.isArray(rule.ipRanges.item))\
  \ ? (rule.ipRanges.item) : new Array(rule.ipRanges.item);\n    for (var ipIdx=0;ipIdx<ipRanges.length;ipIdx++)\
  \ {\n        tmpSgTable += \"|\" + name + \" (\" + id + \")|\"+dir+\"|\"+tmpProtocol+\"\
  |\"+tmpPort+\"|\" + ipRanges[ipIdx].cidrIp + \"|\\n\";\n    }\n\n    return tmpSgTable;\n\
  }\n\nvar keysToPrint = ['privateIpAddress','instanceType','ipAddress','launchTime','privateDnsName','vpcId'];\n\
  var res = \"\";\nvar resCmd = executeCommand('get-instance-info', args);\n\n\nif\
  \ (resCmd[0].Contents.DescribeInstancesResponse.reservationSet.length===0) {\n \
  \   // instnce not found\n    return { ContentsFormat: formats.text, Type: entryTypes.error,\
  \ Contents: 'Instance not found.' };\n} else {\n    var instance = resCmd[0].Contents.DescribeInstancesResponse.reservationSet.item.instancesSet.item;\n\
  \n    res += \"---------\\n### Instance ID \" + instance.instanceId + \" (\"+ instance.instanceState.name\
  \ + \")\\n\";\n    res += \"\\n#### Instance Information\\n\";\n\n    // print only\
  \ relevant keys based on keysToPrint list, and only string values\n    var keys\
  \ = Object.keys(instance);\n    var tmpKeys=\"|\";\n    var tmpDivider=\"|\";\n\
  \    var tmpValues=\"|\";\n    for (var keysIdx=0; keysIdx<keys.length;keysIdx++)\
  \ {\n        if (typeof instance[keys[keysIdx]] == \"string\" && keysToPrint.indexOf(keys[keysIdx])>=0)\
  \ {\n            tmpKeys+=keys[keysIdx] + \"|\";\n            tmpDivider+=\"-|\"\
  ;\n            tmpValues+=instance[keys[keysIdx]] + \"|\";\n        }\n    }\n \
  \   res += tmpKeys + \"\\n\" + tmpDivider + \"\\n\" + tmpValues + \"\\n\";\n\n \
  \   // print EBS volume data\n    res += \"\\n#### EBS Volumes\\n\";\n    var tmpVolTable=markdownTableHeader(['Volume\
  \ ID','Size','Encrypted?','Snapshot ID']);\n    var volumes = instance.blockDeviceMapping.item;\n\
  \    volumes = (Array.isArray(volumes)) ? volumes : new Array(volumes);\n    for\
  \ (var volIdx=0;volIdx<volumes.length;volIdx++) {\n        var resVolCmd = executeCommand('get-ebs-volume-info',\
  \ {'volumeId' : volumes[volIdx].ebs.volumeId});\n        var volInfo = resVolCmd[0].Contents.DescribeVolumesResponse.volumeSet.item;\n\
  \n        tmpVolTable += \"|\" + volInfo.volumeId + \"|\" + volInfo.size + \"|\"\
  \ + volInfo.encrypted + \"|\" + volInfo.snapshotId + \"|\\n\";\n    }\n    res +=\
  \ tmpVolTable;\n\n\n    // print security groups details (using get-sg-info command)\n\
  \    res += \"\\n#### Security Groups\\n\";\n    var tmpSgTable=markdownTableHeader(['Security\
  \ Group','Direction','Protocol','Port','IP']);\n    var securityGroups = (Array.isArray(instance.networkInterfaceSet.item.groupSet.item))\
  \ ? instance.networkInterfaceSet.item.groupSet.item : new Array(instance.networkInterfaceSet.item.groupSet.item);\n\
  \    for (var sgIdx=0;sgIdx<securityGroups.length;sgIdx++) {\n        var resSgCmd\
  \ = executeCommand('get-sg-info', {'sgId' : securityGroups[sgIdx].groupId});\n \
  \       var sg = resSgCmd[0].Contents.DescribeSecurityGroupsResponse.securityGroupInfo.item;\n\
  \        var inbound = (Array.isArray(sg.ipPermissions.item)) ? sg.ipPermissions.item\
  \ : new Array(sg.ipPermissions.item);\n        for (var ruleIdx=0;ruleIdx<inbound.length;ruleIdx++)\
  \ {\n            tmpSgTable += formatSecurityGroupRule(sg.groupId,sg.groupName,'Inbound',inbound[ruleIdx]);\n\
  \        }\n        var outbound = (Array.isArray(sg.ipPermissionsEgress.item))\
  \ ? sg.ipPermissionsEgress.item : new Array(sg.ipPermissionsEgress.item);\n    \
  \    for (var ruleIdx=0;ruleIdx<outbound.length;ruleIdx++) {\n            tmpSgTable\
  \ += formatSecurityGroupRule(sg.groupId,sg.groupName,'Outbound',outbound[ruleIdx]);\n\
  \        }\n    }\n    res += tmpSgTable;\n\n    // print instance tags\n    res\
  \ += \"\\n#### Tags\\n\";\n    var tmpTagsTable = markdownTableHeader(['Key','Value']);\n\
  \    var tags = (Array.isArray(instance.tagSet.item)) ? instance.tagSet.item : new\
  \ Array(instance.tagSet.item);\n    for (var tagIdx = 0; tagIdx<tags.length; tagIdx++)\
  \ {\n        tmpTagsTable += \"|\" + tags[tagIdx].key + \"|\" + tags[tagIdx].value\
  \ + \"|\\n\";\n    }\n    res += tmpTagsTable;\n\n    return { ContentsFormat: formats.markdown,\
  \ Type: entryTypes.note, Contents: res } ;\n}"
scripttarget: 0
system: true
tags:
- Amazon Web Services
tests:
- No tests
timeout: 0s
toversion: 4.1.9
type: javascript
