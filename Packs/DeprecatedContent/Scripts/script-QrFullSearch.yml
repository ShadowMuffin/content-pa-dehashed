args:
- default: true
  description: The query expressions in AQL
  name: query_expression
  required: true
- description: Fields to filter in
  name: fields
- description: Timeout in seconds. Default is 10 minutes.
  name: timeout
- description: Interval to poll for results. Default is 10 seconds.
  name: interval
- description: Number of results in return
  name: range
comment: Full search through QRadar advance query languages
commonfields:
  id: QrFullSearch
  version: -1
dependson:
  must:
  - qr-searches
  - qr-get-search
  - QrGetSearchResults
deprecated: true
name: QrFullSearch
script: "from time import sleep\nres = []\nsearch_done = False\nerror = False\n\n\
  timeout = 600\nif 'timeout' in demisto.args():\n    timeout = int(demisto.args()['timeout'])\n\
  interval = 10\n\nif 'interval' in demisto.args():\n    interval = int(demisto.args()['interval'])\n\
  \nsearch_args = {}\nif 'fields' in demisto.args():\n    search_args['fields'] =\
  \ demisto.args()['fields']\nif 'range' in demisto.args():\n    search_args['range']\
  \ = demisto.args()['range']\n\n\n#########submit query, retrive  search_id########\n\
  query_res = demisto.executeCommand(\"qr-searches\", demisto.args())\n\nif isError(query_res[0]):\n\
  \    res.append(query_res)\nelse:\n    search_id = demisto.get(query_res[0], \"\
  Contents.search_id\")\n    search_args['search_id'] = search_id\n#######polling\
  \ stage########\n    sec = 0\n\n    while (sec < timeout) and not error:\n     \
  \   status_res = demisto.executeCommand(\"qr-get-search\", search_args)\n      \
  \  if isError(status_res[0]):\n            res+=status_res\n            error =\
  \ True\n            break\n\n        status = demisto.get(status_res[0], \"Contents.status\"\
  )\n        if status and status in ['WAIT', 'EXECUTE', 'SORTING']:\n           \
  \ demisto.log('search id is {0} search status is {1}'.format(search_id,status))\n\
  \        elif status and status == 'COMPLETED':\n            search_done = True\n\
  \        else:\n            error = True\n            res.append({\"Type\" : entryTypes[\"\
  error\"], \"ContentsFormat\" : formats[\"text\"], \"Contents\" : 'An Error occurred\
  \ during the search process. search status={0}.'.format(status)})\n\n        if\
  \ search_done:\n            break\n        sec += interval\n        sleep(interval)\n\
  \n    if sec >= timeout:\n      res.append( { \"Type\" : entryTypes[\"error\"],\
  \ \"ContentsFormat\" : formats[\"text\"], \"Contents\" : 'Timeout reached. waited\
  \ for {0} seconds'.format(timeout) } )\n\n#######get results#######\n    if search_done:\n\
  \        results_res = demisto.executeCommand(\"QrGetSearchResults\", search_args)\n\
  \        res+=results_res\n\ndemisto.results(res)\n"
scripttarget: 0
subtype: python2
system: true
tags:
- QRadar
timeout: 0s
toversion: 4.1.9
type: python
