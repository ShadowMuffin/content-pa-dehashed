args:
- description: Type of Packet Capture
  name: pcapType
  required: true
- description: '"From" value for the rule'
  name: from
- description: '"To" value for the rule'
  name: to
- description: Serial number for the request. For further information, see the Panorama
    XML API Documentation.
  name: serialNo
- description: Search time for the request. For further information, see the Panorama
    XML API Documentation.
  name: searchTime
- description: ID of the Pcap for the request. For further information, see the Panorama
    XML API Documentation.
  name: pcapID
- description: Password for Panorama.
  name: password
comment: Deprecated. Use the "panorama-get-pcap" command instead.
commonfields:
  id: PanoramaPcaps
  version: -1
dependson:
  must:
  - panorama
deprecated: true
name: PanoramaPcaps
script: "function AddArgument(arg, argName,req) {\n    if (arg) {\n        req[argName]\
  \ = arg;\n    }\n    return req;\n}\nvar reqArgs = {\n        type: 'export',\n\
  \        category: args.pcapType,\n    };\nif (args.password) {\n    reqArgs['dlp-password']\
  \ = args.password;\n} else if (args.pcapType === 'dlp-pcap') {\n    return 'can\
  \ not provide dlp-pcap without password';\n}\nAddArgument(args.from, 'from', reqArgs);\n\
  AddArgument(args.to, 'to', reqArgs);\nAddArgument(args.serialNo, 'serialno', reqArgs);\n\
  AddArgument(args.searchTime, 'search-time', reqArgs);\nAddArgument(args.pcapID,\
  \ 'pcap-id', reqArgs);\nraw = executeCommand('panorama', reqArgs);\nif (raw[0].ContentsFormat\
  \ === 'json') {\n    var content = raw[0].Contents.response;\n    if (content['-status']\
  \ === 'success') {\n        return content.result;\n    } else {\n        return\
  \ content['-status'];\n    }\n} else {\n    return raw;\n}"
scripttarget: 0
system: true
tags:
- panorama
- firewall
tests:
- No tests
timeout: 0s
toversion: 4.1.9
type: javascript
