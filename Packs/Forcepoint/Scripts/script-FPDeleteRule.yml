args:
- description: The Triton rule type - "dest_domain", "dest_ip", "dest_host" or "url_regex"
  name: type
  required: true
- description: The value to match for this rule (domain, regex, etc. depending on
    the type)
  name: value
  required: true
- description: "If the Forcepoint Triton instance is configured as a RemoteAccess\
    \ integration instance \u2010 insert its name here. Replaces argument \"tritonsystem\"\
    ."
  name: remoteaccessname
- description: "System name of the linux host on which Forcepoint Triton is installed.\
    \ Only use if not working with Triton as a RemoteAccess integration instance \u2010\
    \ if so, use the \"remoteaccessname\" argument instead."
  name: tritonsystem
comment: Deletes a rule in Forcepoint Triton.
commonfields:
  id: FPDeleteRule
  version: -1
dependson:
  must:
  - ssh
name: FPDeleteRule
script: "from re import escape\nFILTER_CONFIG_PATH = \"/opt/WCG/config/filter.config\"\
  \nCMD_DEL_RULE_FORMAT = \"sed -i '/^{0}={1} action=[A-Za-z]*$/d' {2}\"\nCMD_TRITON_RELOAD_CONFIG\
  \ = \"/opt/WCG/bin/content_line -x\" # && /opt/WCG/WCGAdmin runds\"\nruleType =\
  \ demisto.args()[\"type\"]\nif not ruleType in [\"dest_domain\", \"dest_ip\", \"\
  dest_host\", \"url_regex\"]:\n    demisto.results( { \"Type\" : entryTypes[\"error\"\
  ], \"ContentsFormat\" : formats[\"text\"], \"Contents\" : 'Type argument must be\
  \ \"dest_domain\", \"dest_ip\", \"dest_host\" or \"url_regex\". Invalid value: '\
  \ + ruleType } )\nelse:\n    valueFormat = escape(demisto.args()[\"value\"])\n \
  \   if ruleType in [\"dest_domain\", \"url_regex\"]:\n        valueFormat = r'\\\
  \"' + valueFormat + r'\\\"'\n    # sed command that deletes the rule\n    cmdDelRule\
  \ = CMD_DEL_RULE_FORMAT.format(ruleType, valueFormat, FILTER_CONFIG_PATH)\n    sshArgs\
  \ = {\"cmd\": cmdDelRule + \" && \" + CMD_TRITON_RELOAD_CONFIG}\n    if \"tritonsystem\"\
  \ in demisto.args():\n        if \"remoteaccessname\" in demisto.args():\n     \
  \       demisto.results({ \"Type\" : entryTypes[\"error\"], \"ContentsFormat\":\
  \ formats[\"markdown\"], \"Contents\": \"You cannot uses both **tritonsystem** and\
  \ **remoteaccessname**. Please choose one.\" })\n            sys.exit(0)\n     \
  \   sshArgs[\"system\"] = demisto.args()[\"tritonsystem\"]\n    elif \"remoteaccessname\"\
  \ in demisto.args():\n        sshArgs[\"using\"] = demisto.args()[\"remoteaccessname\"\
  ]\n    else:\n        demisto.results({ \"Type\" : entryTypes[\"error\"], \"ContentsFormat\"\
  : formats[\"markdown\"], \"Contents\": \"You must provide either **tritonsystem**\
  \ or **remoteaccessname** as arguments.\" })\n        sys.exit(0)\n    if \"using\"\
  \ in sshArgs or \"system\" in sshArgs:\n        resSSH = demisto.executeCommand(\"\
  ssh\", sshArgs)\n        if not isError(resSSH[0]) and demisto.gets(resSSH[0], \"\
  Contents.success\"):\n            demisto.results(\"Command executed successfully.\"\
  )\n        else:\n            demisto.results(resSSH)"
scripttarget: 0
subtype: python2
system: true
tags:
- forcepoint
- triton
timeout: 0s
toversion: 4.1.9
type: python
