args:
- default: true
  description: Event ID(s) separated by commas
  name: eventId
  required: true
- description: Optionally provide a filename for the download
  name: filename
- description: Download <burstsize> files every time, and wait <waitms> milliseconds
    each time. Defaults are 10 files and 500ms.
  name: burstsize
- description: Download <burstsize> files every time, and wait <waitms> milliseconds
    each time. Defaults are 10 files and 500ms.
  name: waitms
comment: Download PCAPs related to the requested events. Supports rate throttling.
commonfields:
  id: PWEventPcapDownload
  version: -1
dependson:
  must:
  - ProtectWise|||event-pcap-download
name: PWEventPcapDownload
script: "from time import sleep\nres = []\ndArgs = demisto.args()\nburstSize = demisto.get(dArgs,\
  \ 'burstsize')\nburstSize = int(burstSize) if burstSize else 10\nremaining = burstSize\n\
  waitSeconds = demisto.get(dArgs, 'waitms')\nwaitSeconds = float(waitSeconds) / 1000.0\
  \ if waitSeconds else 0.5\ndArgs[\"using-brand\"] = \"ProtectWise\"\neventIDs =\
  \ argToList(demisto.get(dArgs, 'eventId'))\nfor eid in eventIDs:\n    dArgs['eventId']\
  \ = eid\n    dArgs['filename'] = eid + '.pcap'\n    if remaining:\n        remaining\
  \ -= 1\n    else:\n        sleep(waitSeconds)\n        remaining = burstSize\n \
  \   resCmd = demisto.executeCommand(\"event-pcap-download\", dArgs)\n    try:\n\
  \       res += resCmd\n    except Exception as ex:\n        res.append({\"Type\"\
  : entryTypes[\"error\"], \"ContentsFormat\": formats[\"text\"],\n              \
  \      \"Contents\": \"Error occurred while parsing output from command. Exception\
  \ info:\\n\" + str(ex) + \"\\n\\nInvalid output:\\n\" + str(resCmd)})\ndemisto.results(res)\n"
scripttarget: 0
subtype: python2
system: true
tags:
- protectwise
tests:
- Protectwise-Test
timeout: 0s
toversion: 4.1.9
type: python
