args:
- description: List of Nexpose assets' IDs
  isArray: true
  name: assetID
  required: true
- auto: PREDEFINED
  description: The minimum Nexpose severity to create incidents for
  name: minSeverity
  predefined:
  - Moderate
  - Severe
  - Critical
  required: true
- description: The incident type to create incidents for. Default is "Vulnerability".
  name: incidentType
comment: 'Create incidents based on the Nexpose asset ID and vulnerability ID.

  Duplicate incidents are not created for the same asset ID and vulnerability ID.'
commonfields:
  id: NexposeCreateIncidentsFromAssets
  version: -1
dependson:
  must:
  - nexpose-get-asset
name: NexposeCreateIncidentsFromAssets
runonce: false
script: "SEVERITIES = ['Moderate','Severe','Critical']\n\nincident_type = demisto.args().get(\"\
  incidentType\", \"Vulnerability\")\nmin_severity = demisto.args().get(\"minSeverity\"\
  , \"Moderate\")\nasset_ids = argToList(demisto.args().get(\"assetID\",\"\"))\nif\
  \ not isinstance(asset_ids, list):\n    asset_ids = [asset_ids]\n\nseverity_index\
  \ = SEVERITIES.index(min_severity)\n\nif not asset_ids:\n    demisto.results( {\n\
  \        \"Type\" : entryTypes[\"note\"],\n        \"ContentsFormat\" : formats[\"\
  text\"],\n        \"Contents\" : 'No assets were found'\n    } )\n    sys.exit(0)\n\
  \nincident_name = []\n\nfor asset_id in asset_ids:\n    resp = demisto.executeCommand(\"\
  nexpose-get-asset\", {\"id\" : asset_id })\n    if isError(resp[0]):\n        demisto.results(resp)\n\
  \        sys.exit(0)\n\n    # Need to get it from raw-output not context\n    vulnerabilities\
  \ = resp[0]['EntryContext']['Nexpose.Asset(val.AssetId==obj.AssetId)']['Vulnerability']\n\
  \    # Creates a list of all the vulnerabilites' IDs when their severity is equal/higher\
  \ to the min_severity\n    vulnerability_ids = [vul['Id'] for vul in vulnerabilities\
  \ if vul['Severity'] in SEVERITIES[severity_index:]]\n\n    for vulnerability_id\
  \ in vulnerability_ids:\n        # Search for existing open incidents with the same\
  \ Vendor ID and Asset ID. Will open a new incident only if such an incident not\
  \ exists.\n        resp = demisto.executeCommand(\"getIncidents\", {\"query\" :\
  \ \"vendorid: {0} and assetid: {1} and --status:Closed\".format(vulnerability_id,asset_id)})\n\
  \        if isError(resp[0]):\n            demisto.results(resp)\n            sys.exit(0)\n\
  \n        incident_number = demisto.get(resp[0],\"Contents.total\")\n\n        try:\n\
  \            incident_number = int(incident_number)\n        except:\n         \
  \   demisto.results( {\n                \"Type\" : entryTypes[\"error\"],\n    \
  \            \"ContentsFormat\" : formats[\"text\"],\n                \"Contents\"\
  \ : 'Error while searching the incident repository'\n            } )\n         \
  \   sys.exit(0)\n\n        if incident_number == 0:\n            name = \"Vulnerability\
  \ - Asset {0} ID \\\"{1}\\\"\".format(asset_id,vulnerability_id)\n            #Create\
  \ incident\n            demisto.executeCommand(\"createNewIncident\", {\n      \
  \          \"name\": name,\n                \"vendorid\" : str(vulnerability_id),\n\
  \                \"type\": incident_type,\n                \"assetid\" : str(asset_id)\n\
  \            })\n            incident_name.append({'Name' : name})\n\nif incident_name:\n\
  \    demisto.results({\n        'Type' : entryTypes['note'],\n        'Contents':\
  \ tableToMarkdown('New incidents:', incident_name),\n        'ContentsFormat' :\
  \ formats['markdown']\n    })\nelse:\n    demisto.results(\"No new incidents were\
  \ created.\")"
scripttarget: 0
subtype: python2
system: true
tags:
- nexpose
toversion: 4.1.9
type: python
