args:
- description: ID of the entry containing the Nexpose report. If none is provided,
    the script will iterate and find a relevant entry.
  name: entryID
- description: Minimal Risk Score an item in the report needs to reach in order to
    trigger an incident. Leave empty to trigger for any risk score.
  name: minRiskScore
- description: Minimal Vulnerability Count an item in the report needs to reach in
    order to trigger an incident. Leave empty to trigger for any count.
  name: minVulnCount
- description: Severity to be set on triggered incidents
  name: defaultNexposeSeverity
comment: 'Parses nexpose report into a clear table that contain risk score and vulnerability
  count for each server,

  And creates a new incident for each server.'
commonfields:
  id: NexposeEmailParser
  version: -1
dependson:
  must:
  - nexpose
name: NexposeEmailParser
script: "var entries = executeCommand('getEntries', {});\nvar report = 0;\nif (!args.entryID)\
  \ {\n    for (var i = 0; i < entries.length; i++) {\n        if (entries[i].File)\
  \ {\n            var entryIDFromInv = entries[i].ID;\n            report = getFileByEntryID(entryIDFromInv);\n\
  \            if (/$<NexposeReport/.exec(report)) {\n                break;\n   \
  \         }\n        }\n    }\n} else {\n    report = getFileByEntryID(args.entryID);\n\
  }\nvar contents = [];\nvar nodes = report.split(/<\\/node>/);\nfor (var i=0; i <\
  \ nodes.length; i++) {\n    var nodeRegexp = /<node address=\"(.*)\" status=\"(.*)\"\
  \ device-id=\"(.*)\" site-name=\"(.*)\" site-importance=\"(.*)\" scan-template=\"\
  .*\" risk-score=\"(.*)\">/g;\n    var match = nodeRegexp.exec(nodes[i]);\n    if\
  \ (nodes[i] && match) {\n        var testRegexp = /<test id=.*>/g ;\n        var\
  \ vulnCount = nodes[i].match(testRegexp) ? nodes[i].match(testRegexp).length : '0';\n\
  \        var data = {\n            Address: match[1],\n            Name: match[4],\n\
  \            Risk: match[6],\n            Status: match[2],\n            Importance:\
  \ match[5],\n            Vulnerabilities: vulnCount\n        };\n        if ((args.minRiskScore\
  \ && args.minRiskScore <= data.Risk) || !args.minRiskScore) {\n            if ((args.minVulnCount\
  \ && args.minVulnCount <= data.Vulnerabilities) || !args.minVulnCount) {\n     \
  \           contents.push(data);\n                var sev = \"low\";\n         \
  \       if (data.Risk > 3000) {\n                    sev = \"critical\";\n     \
  \           } else if (data.Risk > 2500) {\n                    sev = \"high\";\n\
  \                } else if (data.Risk > 2000) {\n                    sev = \"medium\"\
  ;\n                }\n                createNewIncident({\n                    \
  \              type: 'Nexpose alert',\n                                  details:\
  \ nodes[i],\n                                  severity: sev,\n                \
  \                  name: data.Address + ' vulnerability count ' + data.Vulnerabilities\
  \ + ' risk score ' + data.Risk,\n                                  systems: data.Address\n\
  \                              });\n            }\n        }\n    }\n}\nreturn [{Contents:\
  \ contents,\n         ContentsFormat: formats.table,\n         Type: entryTypes.note},\n\
  \         closeInvestigation({Reason: 'Spawned ' + contents.length + ' child incidents'})];"
scripttarget: 0
system: true
tags:
- nexpose
- ingestion
timeout: 0s
toversion: 4.1.9
type: javascript
