args:
- default: true
  description: Email address to look up. If omitted, will instead extract with regular
    expression from the fullmail argument, where the phishing email should be provided.
  name: email
- description: Raw email text to regex the sender from
  name: fullmail
comment: For phishing incidents, check the sender of the email via Pipl search
commonfields:
  id: CheckSender
  version: -1
dependson:
  must:
  - pipl-search
name: CheckSender
script: "import re\nemail = ''\nif 'email' in demisto.args():\n    email = demisto.args()['email']\n\
  else:\n    sender = re.search(r\".*From\\w*:.*\\b([A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\\
  .[A-Za-z]{2,})\\b\", demisto.incidents()[0]['details'], re.I)\n    if sender:\n\
  \        email = sender.group(1)\nif email:\n    resp = demisto.executeCommand('pipl-search',\
  \ {'email': email})\n\n    if isError(resp[0]):\n        demisto.results(resp)\n\
  \    else:\n        data = demisto.get(resp[0], \"Contents\")\n        if data:\n\
  \            data = data if isinstance(data, list) else [data]\n            data\
  \ = [{k: formatCell(row[k]) for k in row} for row in data]\n            demisto.results({\"\
  ContentsFormat\": formats[\"table\"], \"Type\": entryTypes[\"note\"], \"Contents\"\
  : data} )\n        else:\n            demisto.results(\"No results.\")\nelse:\n\
  \    demisto.results('Could not find the sender data')"
scripttarget: 0
subtype: python2
system: true
tags:
- server
- phishing
timeout: 0s
toversion: 4.1.9
type: python
