args:
- description: The input text to hightlight the words in.
  name: text
  required: true
- description: Terms to hightlight in the text. Can be words or sentances (that does
    not includes comma). Notice that if you used a sentances and word, the word shouldn't
    be as part of a sentance, for example "thank,thank you" is invalid input. Comma-separated
    value.
  name: terms
  required: true
comment: Highlight words inside a given text.
commonfields:
  id: HighlightWords
  version: -1
name: HighlightWords
runonce: false
script: "HIGHLIGHT_WORD_STYLE_TEMPLATE = '**%s**'\n\nTERMS = demisto.args()['terms'].split(\"\
  ,\")\nWORDS, SENTENCES = [t.strip().lower() for t in TERMS if \" \" not in t.strip()],\
  \ [t.strip().lower() for t in TERMS if \" \" in t.strip()]\nWORDS.sort(reverse=True,\
  \ key=lambda x: len(x))\nINIT_TEXT = demisto.args().get('text','').lower()\n\n\n\
  if not INIT_TEXT:\n    return_error(\"The input text is empty\")\n\n\nfor word in\
  \ WORDS:\n    for sentence in SENTENCES:\n        if word in sentence:\n       \
  \     return_error('The word \"%s\" is a substring of the sentance: \"%s\"' % (word,\
  \ sentence))\n\ntext_words = INIT_TEXT.lower().split(\" \")\nmarked_text_words =\
  \ []\n\nfound = False\nfor text_word in text_words:\n    found_word_match = False\n\
  \    for word in WORDS:\n        if word in text_word:\n            found_word_match\
  \ = True\n            break\n    if found_word_match:\n        marked_text_words.append(HIGHLIGHT_WORD_STYLE_TEMPLATE\
  \ % text_word)\n        found = True\n    else:\n        marked_text_words.append(text_word)\n\
  \n\nmarked_text = \" \".join(marked_text_words)\nfor sentence in SENTENCES:\n  \
  \  if sentence in marked_text:\n        marked_text = marked_text.replace(sentence,\
  \ HIGHLIGHT_WORD_STYLE_TEMPLATE % sentence)\n        found = True\n\nif found:\n\
  \    entry = {\n        'Type': entryTypes['note'],\n        'Contents': marked_text,\n\
  \        'ContentsFormat': formats['text'],\n        'HumanReadable': marked_text,\n\
  \        'ReadableContentsFormat': formats['markdown']\n    }\n    demisto.results(entry)\n\
  else:\n    demisto.results(\"The text does not contains any of the input words\"\
  )"
scripttarget: 0
subtype: python2
tags: []
tests:
- HighlightWords_Test
toversion: 4.1.9
type: python
