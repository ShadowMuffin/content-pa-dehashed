args:
- description: Specify a hash list by a risk rule name, which can be retrieved with
    the get-hash-riskrules command.
  name: list
- defaultValue: '65'
  description: Minimum threshold score to consider indicators as malicious (65-99,
    greater than or equal to)
  name: threshold
comment: Extracts the hash risk list from Recorded Future and creates indicators accordingly.
commonfields:
  id: RecordedFutureHashRiskList
  version: -1
dependson:
  must: []
  should:
  - Recorded Future|||recorded-future-get-hash-risklist
enabled: true
name: RecordedFutureHashRiskList
outputs:
- contextPath: InfoFile.Name
  description: File name
  type: string
- contextPath: InfoFile.EntryID
  description: File entry ID
  type: string
- contextPath: InfoFile.Size
  description: File size
  type: number
- contextPath: InfoFile.Type
  description: File type, e.g., "PE"
  type: string
- contextPath: InfoFile.Info
  description: Basic information of the file
  type: string
- contextPath: InfoFile.Extension
  description: File extension
  type: string
runonce: false
script: "specific_list = demisto.args().get('list')\ndelete_existing = demisto.args().get('delete_existing',\
  \ 'false').lower()\nthreshold = int(demisto.args().get('threshold', 65))\ncommand_args\
  \ = {}\n\nif specific_list:\n    command_args['list'] = specific_list\n\nres = demisto.executeCommand('recorded-future-get-hash-risklist',\
  \ command_args)\n\nfile_entry = None\nfor entry in res:\n    if isError(entry):\n\
  \        return_error('Failed getting the risk list - {}'.format(entry['Contents']))\n\
  \    if entry.get('FileID'):\n        file_entry = entry\n\nif not file_entry:\n\
  \    return_error('Could not find the file')\n\nfile_path = demisto.getFilePath(file_entry['FileID'])\n\
  \nwith open(file_path['path'], 'r') as file:\n    # remove null bytes\n    data\
  \ = file.read().replace('\\0', '')\n\nrows = data.split('\\n')\nif not rows or len(rows)\
  \ == 0:\n    return_error('No data found')\nheaders = map(lambda c: c.strip('\\\"\
  '), rows[0].split(','))\nname_column = headers.index('Name')\nscore_column = headers.index('Risk')\n\
  \nfor row in rows[1:]:\n    # Skip headers line\n    columns = row.split(',')\n\n\
  \    hash_indicator = columns[name_column].strip('\\\"')\n    score = None\n   \
  \ try:\n        score = int(columns[score_column].strip('\\\"'))\n    except:\n\
  \        pass\n\n    if score and score < threshold:\n        continue\n\n    if\
  \ hash_indicator:\n        hash_type = get_hash_type(hash_indicator)\n        indicator_res\
  \ = demisto.executeCommand('createNewIndicator', {\n            'type': 'File {}'.format(hash_type.upper()),\n\
  \            'value': hash_indicator,\n            'source': 'Recorded Future',\n\
  \            'reputation': 'Bad',\n            'seenNow': 'true',\n            'comment':\
  \ 'From Recorded Future risk list, Score - ' + str(score)\n        })\n\n      \
  \  if isError(indicator_res[0]):\n            return_error('Error creating indiciator\
  \ - {}'.format(indicator_res[0]['Contents']))\n\ndemisto.results(file_entry)"
scripttarget: 0
subtype: python2
tags:
- RecordedFuture
tests:
- No test - fetches indicators
timeout: "3.6\xB5s"
toversion: 4.1.9
type: python
