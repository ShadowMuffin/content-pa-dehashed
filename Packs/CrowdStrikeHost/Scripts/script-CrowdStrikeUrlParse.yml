args:
- default: true
  description: URL to parse
  name: url
  required: true
comment: 'This will parse a CrowdStrike alert URL and pull out the Agent ID. Useful
  for passing to the cs-device-details command to return device details.


  It also returns the detection ID for the specific alert. Used for modifying the
  state of the alert for CrowdStrike.'
commonfields:
  id: CrowdStrikeUrlParse
  version: -1
enabled: true
name: CrowdStrikeUrlParse
outputs:
- contextPath: CrowdStrikeUrlParse.AgentId
  description: Agent ID for CrowdStrike host
- contextPath: CrowdStrikeUrlParse.DetectId
  description: Detection ID for CrowdStrike alert
runonce: false
script: "import re\n\ndef agent_extract(url):\n    '''\n    Use regex to extract the\
  \ CrowdStrike Agent ID (aid) from a CrowdStrike alert URL.\n    The output of this\
  \ can be passed to cs-device-details for a host lookup.\n    It will also pull out\
  \ the detection part of the URL, to be used for resolving detections in CrowdStrike\n\
  \n    url = 'https://falcon.crowdstrike.com/activity/detections/detail/4ae027b246528y357r1a01e9cdf55724/176094545335?_cid=21aadgime3514d6fa68df313d7b1937d'\n\
  \n    # Find the Agent ID and map it to the \"aid\" group name.\n    match = re.search(r'detail\\\
  /(?P<aid>(\\w{32}))\\/(?P<detect>([0-9]+))', url)\n\n    # returns '4ae027b246528y357r1a01e9cdf55724'\n\
  \    match.group('aid')\n\n    # returns '176094545335'\n    match.group('detect')\n\
  \    '''\n\n    match = re.search(r'detail\\/(?P<aid>(\\w{32}))\\/(?P<detect>([0-9]+))',\
  \ url)\n    aid = match.group('aid')\n    detect = match.group('detect')\n\n   \
  \ # Concatenate the detection ID into the proper format for CrowdStrike\n    # returns\
  \ 'ldt:4ae027b246528y357r1a01e9cdf55724:176094545335'\n    detID = 'ldt:{}:{}'.format(aid,\
  \ detect)\n\n    return aid, detID\n\nAgentId, DetectId = agent_extract(demisto.args()['url'])\n\
  \noutput = []\ncontext = {}\n\noutput.append({\n    'Type': entryTypes['note'],\n\
  \    'Contents': AgentId,\n    'ContentsFormat': formats['text'],\n    'ReadableContentsFormat':\
  \ formats['text'],\n    'HumanReadable': AgentId if AgentId else '{} doesn\\'t contain\
  \ an agent id',\n})\noutput.append({\n    'Type': entryTypes['note'],\n    'Contents':\
  \ DetectId,\n    'ContentsFormat': formats['text'],\n    'ReadableContentsFormat':\
  \ formats['text'],\n    'HumanReadable': DetectId if DetectId else '{} doesn\\'t\
  \ contain a detect id'\n})\n\ndemisto.results(output)\n\ndemisto.setContext('CrowdStrikeUrlParse.AgentId',\
  \ AgentId)\ndemisto.setContext('CrowdStrikeUrlParse.DetectId', DetectId)"
scripttarget: 0
subtype: python2
tags:
- crowdstrike
toversion: 4.1.9
type: python
