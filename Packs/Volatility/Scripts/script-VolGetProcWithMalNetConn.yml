args:
- description: Path to memory dump file on the system being used
  name: memdump
  required: true
- description: System with Volatility installed to be used for the analysis
  name: system
  required: true
- description: Volatility profile to use
  name: profile
  required: true
- description: Reputation threshold - any IP addresses up to and including this score
    are considered malicious
  name: repthreshold
- description: Reputation script to use for checking IP addresses
  name: repscript
comment: Volatility script for getting the list of processes that have connections
  to ip address with bad reputation.
commonfields:
  id: VolGetProcWithMalNetConn
  version: -1
dependson: {}
name: VolGetProcWithMalNetConn
script: "// get all the network connections\n// use the ip address in the connections\n\
  var reputationthreshold = 4;\nif (args.repthreshold) {\n    reputationthreshold\
  \ = args.repthreshold;\n}\nvar cmds = [];\nswitch (args.profile) {\n    case 'VistaSP0x64'\
  \ :\n    case 'VistaSP0x86' :\n    case 'VistaSP1x64' :\n    case 'VistaSP1x86'\
  \ :\n    case 'VistaSP2x64' :\n    case 'VistaSP2x86' :\n    case 'Win2008R2SP0x64'\
  \ :\n    case 'Win2008R2SP1x64' :\n    case 'Win2008SP1x64' :\n    case 'Win2008SP1x86'\
  \ :\n    case 'Win2008SP2x64' :\n    case 'Win2008SP2x86' :\n    case 'Win7SP0x64'\
  \ :\n    case 'Win7SP0x86' :\n    case 'Win7SP1x64' :\n    case 'Win7SP1x86' :\n\
  \    case 'Win81U1x64' :\n    case 'Win81U1x86' :\n    case 'Win8SP0x64' :\n   \
  \ case 'Win8SP0x86' :\n    case 'Win8SP1x64' :\n    case 'Win8SP1x86' :\n    case\
  \ 'Win10x64' :\n    case 'Win10x86' :\n    case 'Win2012R2x64' :\n    case 'Win2012x64'\
  \ :\n        cmds.push('netscan');\n        break;\n    case 'Win2003SP0x86' :\n\
  \    case 'Win2003SP1x64' :\n    case 'Win2003SP1x86' :\n    case 'Win2003SP2x64'\
  \ :\n    case 'Win2003SP2x86' :\n    case 'WinXPSP1x64' :\n    case 'WinXPSP2x64'\
  \ :\n    case 'WinXPSP2x86' :\n    case 'WinXPSP3x86' :\n        cmds.push('connections');\n\
  \        cmds.push('connscan');\n        break;\n    default:\n        break;\n\
  }\nvar resultarr = [];\nvar ipaddrarr = [];\nfor (var i = 0; i < cmds.length; i++)\
  \ {\n    var cmdline = cmds[i];\n    if (args.profile) {\n        cmdline = cmdline\
  \ + ' --profile=' + args.profile;\n    }\n    var out = executeCommand('VolJson',\
  \ {file:args.memdump, system: args.system, cmd:cmdline});\n    if (out) {\n    \
  \  for (var r = 0; r < out.length; r++) {\n          if (out[r].Type !== entryTypes.error)\
  \ {\n            var jsonout = JSON.parse(out[r].Contents);\n            result\
  \ = {};\n            var ipindex = jsonout.columns.indexOf('RemoteAddress');\n \
  \           var pidindex = jsonout.columns.indexOf('PID');\n            if ((ipindex\
  \ > -1) && (pidindex > -1)) {\n              for (var j = 0; j < jsonout.rows.length;\
  \ j++) {\n                var obj = {'ip':jsonout.rows[j][ipindex].split(':')[0],\
  \ 'port':jsonout.rows[j][ipindex].split(':')[1], 'pid':jsonout.rows[j][pidindex]}\n\
  \                ipaddrarr.push(obj);\n              }\n            }\n        \
  \  }\n      }\n    }\n}\nfor (var i = 0; i < ipaddrarr.length; i++) {\n  var repscript\
  \ = 'DataIPReputation';\n  if (args.repscript){\n      repscript = args.repscript;\n\
  \  }\n  var iprep = executeCommand(repscript, {input: ipaddrarr[i].ip});\n  if (iprep[0].Type\
  \ !== entryTypes.error) {\n    if (iprep[0].Contents <= reputationthreshold) {\n\
  \        var result = {};\n        result['PID'] = ipaddrarr[i].pid;\n        result['IP']\
  \ = ipaddrarr[i].ip;\n        result['PORT'] = ipaddrarr[i].port;\n        result['REPUTATION']\
  \ = iprep[0].Contents;\n        resultarr.push(result);\n    }\n  }\n}\nvar result\
  \ = {};\nresult.Contents = resultarr;\nresult.ContentsFormat = formats.table;\n\
  result.Type = entryTypes.note;\nreturn result;"
scripttarget: 0
system: true
tags:
- memory
- forensics
- volatility
- server
timeout: 0s
toversion: 4.1.9
type: javascript
