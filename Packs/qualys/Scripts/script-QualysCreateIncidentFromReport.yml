args:
- description: War room entryID of the XML report.
  name: entryID
  required: true
- description: Maximum file size to load, in bytes. Default is 1024 KB.
  name: maxFileSize
- auto: PREDEFINED
  description: The minimum Qualys severity to create incidents for.
  name: minSeverity
  predefined:
  - '1'
  - '2'
  - '3'
  - '4'
  - '5'
- description: The incident type to create incidents for. Default is "Vulnerability".
  name: incidentType
comment: 'Create incidents from a Qualys report (XML), based on the Qualys asset ID
  and vulnerability ID (QID).

  Duplicate incidents are not created for the same asset ID and QID.'
commonfields:
  id: QualysCreateIncidentFromReport
  version: -1
dependson:
  must:
  - qualys-host-list
name: QualysCreateIncidentFromReport
runonce: false
script: "import json\n\nincident_type = demisto.args().get(\"incidentType\", \"Vulnerability\"\
  )\nmax_file_size = int(demisto.args().get(\"maxFileSize\", 1024**2))\nmin_severity\
  \ = int(demisto.args().get(\"minSeverity\", 1))\n\nfile_entry = demisto.getFilePath(demisto.args().get(\"\
  entryID\"))\nwith open(file_entry['path'], 'r') as f:\n    data = f.read(max_file_size).decode('unicode_escape').encode('utf-8')\n\
  \nif data:\n    report = json.loads(xml2json(data))\n\n    generation_date = demisto.get(report,\
  \ \"ASSET_DATA_REPORT.HEADER.GENERATION_DATETIME\")\n\n    #Get asset list\n   \
  \ asset_list = demisto.get(report, \"ASSET_DATA_REPORT.HOST_LIST.HOST\")\n    if\
  \ not asset_list:\n        demisto.results( {\n            \"Type\" : entryTypes[\"\
  note\"],\n            \"ContentsFormat\" : formats[\"text\"],\n            \"Contents\"\
  \ : 'No vulnerable assets were found'\n        } )\n        sys.exit(0)\n\n    if\
  \ not isinstance(asset_list, list):\n        asset_list = [asset_list]\n\n    #\
  \ Get QIDs only if over relevant severity\n    general_vulnerabilities = argToList(demisto.get(report,\
  \ \"ASSET_DATA_REPORT.GLOSSARY.VULN_DETAILS_LIST.VULN_DETAILS\"))\n    if not isinstance(general_vulnerabilities,\
  \ list):\n        general_vulnerabilities = [general_vulnerabilities]\n\n    #Get\
  \ list of QID with severity >= min_severity\n    qid_severity = [demisto.get(vulnerability,\"\
  QID.#text\") for vulnerability in general_vulnerabilities if demisto.get(vulnerability,'SEVERITY')\
  \ and (int(demisto.get(vulnerability,'SEVERITY')) >= min_severity)]\n\n    for asset\
  \ in asset_list:\n        # Get Asset ID from Qualys\n        ip = demisto.get(asset,\"\
  IP\")\n        if not ip:\n            demisto.results( {\n                \"Type\"\
  \ : entryTypes[\"error\"],\n                \"ContentsFormat\" : formats[\"text\"\
  ],\n                \"Contents\" : 'No IP was found for asset {0}'.format(str(asset))\n\
  \            } )\n            sys.exit(0)\n\n        resp = demisto.executeCommand(\"\
  qualys-host-list\", {\"ips\": ip})\n        if isError(resp[0]):\n            demisto.results(resp)\n\
  \            sys.exit(0)\n\n        asset_id = demisto.get(resp[0],'Contents.HOST_LIST_OUTPUT.RESPONSE.HOST_LIST.HOST.ID')\n\
  \        if not asset_id:\n            demisto.results( {\n                \"Type\"\
  \ : entryTypes[\"error\"],\n                \"ContentsFormat\" : formats[\"text\"\
  ],\n                \"Contents\" : 'No ID was found for asset {0}'.format(str(asset))\n\
  \            } )\n            sys.exit(0)\n\n        # Get Asset vulnerability list\n\
  \        vulnerabilities = argToList(demisto.get(asset, \"VULN_INFO_LIST.VULN_INFO\"\
  ))\n        if not isinstance(vulnerabilities, list):\n            vulnerabilities\
  \ = [vulnerabilities]\n\n        qids = map(lambda vulnerability : demisto.get(vulnerability,\"\
  QID.#text\"), vulnerabilities)\n\n        #Get only the QIDs that exists in asset\
  \ and has severity >= min_severity\n        qids = list(set(qids) & set(qid_severity))\n\
  \n        for qid in qids:\n            # Search for existing open incidents with\
  \ the same Vendor ID and Asset ID. Will open a new incident only if such an incident\
  \ not exists.\n            resp = demisto.executeCommand(\"getIncidents\", {\"query\"\
  \ : \"vendorid: {0} and assetid: {1} and --status:Closed\".format(qid,asset_id)})\n\
  \            if isError(resp[0]):\n                demisto.results(resp)\n     \
  \           sys.exit(0)\n\n            incident_number = demisto.get(resp[0],\"\
  Contents.total\")\n\n            try:\n                incident_number = int(incident_number)\n\
  \            except:\n                demisto.results( {\n                    \"\
  Type\" : entryTypes[\"error\"],\n                    \"ContentsFormat\" : formats[\"\
  text\"],\n                    \"Contents\" : 'Error while searching the incident\
  \ repository'\n                } )\n                sys.exit(0)\n\n            if\
  \ incident_number == 0:\n                #Create incident\n                demisto.executeCommand(\"\
  createNewIncident\", {\n                    \"name\": \"Vulnerability - Asset {0}\
  \ QID {1} - {2}\".format(asset_id,qid,generation_date),\n                    \"\
  vendorid\" : str(qid),\n                    \"type\": incident_type,\n         \
  \           \"assetid\" : str(asset_id)\n                })\n\n    demisto.results(\"\
  Done.\")\nelse:\n    demisto.results( {\n        \"Type\" : entryTypes[\"error\"\
  ],\n        \"ContentsFormat\" : formats[\"text\"],\n        \"Contents\" : 'No\
  \ data could be read.'\n    } )"
scripttarget: 0
subtype: python2
system: true
tags:
- qualys
toversion: 4.1.9
type: python
