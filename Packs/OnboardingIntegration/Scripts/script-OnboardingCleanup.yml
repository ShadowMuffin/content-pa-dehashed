comment: Cleanup the incidents and indicators created by OnboardingIntegration
commonfields:
  id: OnboardingCleanup
  version: -1
dockerimage: demisto/python3
enabled: true
name: OnboardingCleanup
runas: DBotWeakRole
runonce: false
script: "try:\n    # Delete indicators generated by the OnboardingIntegration\n  \
  \  delete_indicators_cmd_args = {'query': 'incident.sourceBrand:OnboardingIntegration',\
  \ 'doNotWhitelist': 'true'}\n    command_result = demisto.executeCommand('deleteIndicators',\
  \ delete_indicators_cmd_args)\n    if isError(command_result[0]):\n        raise\
  \ Exception(command_results[0])\n    demisto.results('Indicators added by incidents\
  \ generated by the OnboardingIntegration have been deleted.')\n\n    # Close incidents\
  \ of type Phishing that were created by OnboardingIntegration\n    get_incidents_cmd_args\
  \ = {'query': 'type:Phishing and sourceBrand:OnboardingIntegration and -status:Closed'}\n\
  \    res_get_incidents = demisto.executeCommand('getIncidents', get_incidents_cmd_args)\n\
  \n    incidents = res_get_incidents[0].get('Contents', {}).get('data')\n    res\
  \ = []\n    if incidents:\n        for incident in incidents:\n            incident_id\
  \ = incident.get('id')\n            incident_name = incident.get('name')\n     \
  \       res.append({'Incident ID': incident_id, 'Incident Name': incident_name})\n\
  \            close_investigation_cmd_args = {\n                'id': incident_id,\n\
  \                'closeNotes': 'Closing all incidents of type PhishingDemo. (Cleanup)'\n\
  \            }\n            demisto.executeCommand('closeInvestigation', close_investigation_cmd_args)\n\
  \    headers = ['Incident ID', 'Incident Name']\n    title = 'Total Incidents Closed:\
  \ {}'.format(len(res))\n    human_readable = tableToMarkdown(title, res, headers=headers,\
  \ removeNull=True)\n    demisto.results({\n        'Type': entryTypes['note'],\n\
  \        'Contents': res,\n        'ContentsFormat': formats['json'],\n        'ReadableContentsFormat':\
  \ formats['markdown'],\n        'HumanReadable': human_readable\n    })\nexcept\
  \ Exception as e:\n    demisto.results({\n        'Type': entryTypes['error'],\n\
  \        'ContentsFormat': formats['text'],\n        'Contents': 'A problem occurred\
  \ while trying to execute this script. Exception info:\\n' + str(e)\n    })\n"
scripttarget: 0
subtype: python3
tags: []
tests:
- No Tests
toversion: 4.1.9
type: python
