args:
- defaultValue: '100000'
  description: Max number of incidents to query.
  name: maxIncidents
- defaultValue: '100000'
  description: Max number of indicators to query.
  name: maxIndicators
- defaultValue: '3'
  description: Indicator appears in minimum number of incidents.
  name: appearsInMinNumberOfIncidents
- defaultValue: incident.closeReason:Resolved
  description: The query to fetch the indicators from incident which are "bad".
  name: query
- defaultValue: '50'
  description: Maximum number of results (indicators) to display as output.
  name: maxDisplayResults
- auto: PREDEFINED
  defaultValue: 'no'
  description: Generate file result
  name: fileResult
  predefined:
  - 'yes'
  - 'no'
comment: Return indicators appears in resolved incidents, and resolved incident ids.
commonfields:
  id: IndicatorMaliciousRatioCalculation
  version: -1
enabled: true
fromversion: 3.5.0
name: IndicatorMaliciousRatioCalculation
runonce: false
script: "import json, hashlib\n\nAPPEARS_IN_MIN_NUMBER_OF_INCIDENTS = int(demisto.args()['appearsInMinNumberOfIncidents'])\n\
  MAX_INCIDENTS = int(demisto.args()['maxIncidents'])\nMAX_INDICATORS = int(demisto.args()['maxIndicators'])\n\
  QUERY = demisto.args()['query']\nMAX_RESULTS = int(demisto.args()['maxDisplayResults'])\n\
  GENERATE_FILE_RESULT = (demisto.args()['fileResult'] == 'yes')\n\ndef get_incident_labels_map(labels):\n\
  \    if labels is None:\n        return {}\n    labels_map = {}\n\n    for label\
  \ in labels:\n        label_type = label['type'].lower()\n        labels_map[label_type]\
  \ = label['value']\n    return labels_map\n\ndef hash_object(str_list_dict):\n \
  \   if str_list_dict == \"\" or str_list_dict is None:\n        return str_list_dict\n\
  \    if (type(str_list_dict)) == dict:\n        return dict(map(lambda (k, v): (k,\
  \ hash_object(v)), str_list_dict.iteritems()))\n    if (type(str_list_dict) == list):\n\
  \        return map(lambda x: hash_object(x), str_list_dict)\n\n    if (type(str_list_dict)\
  \ in [str, unicode]):\n        str_value = str_list_dict.encode('utf-8')\n    else:\n\
  \        str_value = str(str_list_dict)\n    return hashlib.md5(str_value).hexdigest()\n\
  \ndef get_indicator_data(indicator):\n    return {k: v for k,v in indicator.items()\
  \ if k in ['indicator_type', 'firstSeen', 'lastSeen', 'investigationIDs', 'manualScore',\
  \ 'id', 'score', 'value']}\n\ndef get_incident_data(incident):\n    result = {k:\
  \ v for k,v in incident.items() if k in ['id', 'type', 'occurred', 'CustomFields',\
  \ 'labels']}\n    result['labels'] = hash_object(get_incident_labels_map(result.get('labels')))\n\
  \    result['CustomFields'] = hash_object(result.get('CustomFields'))\n    return\
  \ result\n\n\nres = demisto.executeCommand(\"findIndicators\", {'query': QUERY,\
  \ 'size': MAX_INDICATORS})\nindicators = res[0]['Contents']\nindicators_result =\
  \ map(get_indicator_data, indicators)\nres = demisto.executeCommand(\"getIncidents\"\
  , {'query': QUERY.replace('incident.', ''), 'size': MAX_INCIDENTS})\nincidents =\
  \ res[0]['Contents']['data']\nif incidents:\n    incidents_result = map(get_incident_data,\
  \ incidents)\n    resolved_incident_ids = set(map(lambda x: x['id'], incidents_result))\n\
  \    non_resolved_id = set()\n    for i in indicators_result:\n        resolved\
  \ = [x for x in i['investigationIDs'] if x in resolved_incident_ids]\n        non_resolved_id\
  \ = non_resolved_id.union(set(i['investigationIDs']).difference(set(resolved)))\n\
  \        resolved_count = len(resolved)\n        total_count = len(i['investigationIDs'])\n\
  \        i['resolved_incidents_count'] = resolved_count\n        i['total_incidents_count']\
  \ = total_count\n        i['malicious_ratio'] = float(resolved_count) / total_count\n\
  \n    res = demisto.executeCommand(\"getIncidents\", {'query': \" or \".join(map(lambda\
  \ x: \"id:%s\" % x, non_resolved_id)), 'size': MAX_INCIDENTS})\n    non_resolved_incidents\
  \ = res[0]['Contents']['data']\n    non_resolved_incidents = map(get_incident_data,\
  \ non_resolved_incidents)\n\n    indicators_result = [x for x in indicators_result\
  \ if x['total_incidents_count'] >= APPEARS_IN_MIN_NUMBER_OF_INCIDENTS]\n    indicators_result.sort(key=lambda\
  \ x: x['malicious_ratio'], reverse=True)\n    demisto.results({\n        'Type':\
  \ entryTypes['note'],\n        'Contents': indicators_result,\n        'ContentsFormat':\
  \ formats['json'],\n        'ReadableContentsFormat': formats['markdown'],\n   \
  \     'HumanReadable': tableToMarkdown('Indicators Malicious Ratio', indicators_result[:MAX_RESULTS],\
  \ headers=['value', 'indicator_type', 'malicious_ratio', 'total_incidents_count',\
  \ 'score', 'lastSeen'])\n    })\n\n    if GENERATE_FILE_RESULT:\n        for i in\
  \ indicators_result:\n            i['value'] = hash_object(i['value'])\n\n     \
  \   demisto.results(fileResult('MaliciousRatio.json', json.dumps({\n           \
  \ 'resolved_incidents': incidents_result,\n            'non_resolved_incidents':\
  \ non_resolved_incidents,\n            'indicators': indicators_result\n       \
  \ })))\nelse:\n    demisto.results(\"No resolved incidents found\")"
scripttarget: 0
subtype: python2
tags:
- ml
timeout: 300ns
toversion: 4.1.9
type: python
