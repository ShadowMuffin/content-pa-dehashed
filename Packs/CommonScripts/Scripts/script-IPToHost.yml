args:
- default: true
  description: The IP to check
  name: ip
  required: true
comment: Try to get the hostname correlated with the input IP.
commonfields:
  id: IPToHost
  version: -1
name: IPToHost
outputs:
- contextPath: Endpoint
  description: The endpoint object.
- contextPath: Endpoint.Hostname
  description: The endpoint hostname.
  type: string
- contextPath: Endpoint.IP
  description: The endpoint IP.
  type: string
runonce: false
script: "import socket\n\nip = demisto.args().get('ip')\n\ntry:\n    host_info = socket.gethostbyaddr(ip)\n\
  except Exception as e:\n    demisto.results({\n        \"Type\" : entryTypes[\"\
  error\"],\n        \"ContentsFormat\" : formats[\"text\"],\n        \"Contents\"\
  \ : \"Couln't get the ip host info. Error information: \\\"{0}\\\"\".format(str(e))\n\
  \    })\n    sys.exit(0)\n\nif not host_info:\n    demisto.results({\n        \"\
  Type\" : entryTypes[\"error\"],\n        \"ContentsFormat\" : formats[\"text\"],\n\
  \        \"Contents\" : \"Received an error while trying to get the host information\"\
  \n    })\n    sys.exit(0)\n\nhostname = host_info[0]\n\noutput = {\n    \"Hostname\"\
  \ : str(hostname),\n    \"IP\" : ip\n}\n\ncontext = {}\ncontext[\"Endpoint(val.Hostname\
  \ && val.Hostname === obj.Hostname)\"] = output\n\nmd = tableToMarkdown(\"IP to\
  \ Host\", [output])\n\ndemisto.results({\n    'Type' : entryTypes['note'],\n   \
  \ 'Contents': context,\n    'ContentsFormat' : formats['json'],\n    'HumanReadable':\
  \ md,\n    'ReadableContentsFormat' : formats['markdown'],\n    'EntryContext' :\
  \ context\n})\n"
scripttarget: 0
subtype: python2
system: true
tags: []
toversion: 4.1.9
type: python
