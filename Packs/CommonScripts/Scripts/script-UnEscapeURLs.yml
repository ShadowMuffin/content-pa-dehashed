args:
- description: The URL(s) to process
  isArray: true
  name: input
comment: 'Extract URLs redirected by security tools like Proofpoint.

  Changes https://urldefense.proofpoint.com/v2/url?u=https-3A__example.com_something.html
  -> https://example.com/something.html

  Also, un-escape URLs that are escaped for safety with formats like hxxps://www[.]demisto[.]com'
commonfields:
  id: UnEscapeURLs
  version: -1
enabled: true
name: UnEscapeURLs
runas: DBotWeakRole
runonce: false
script: "function format_url(input) {\n    // Check if it is a Microsoft ATP Safe\
  \ Link\n    var atp_link_re = /(https:\\/\\/\\w*|\\w*)\\.safelinks\\.protection\\\
  .outlook\\.com\\/.*\\?url=/;\n    if (atp_link_re.test(input)) {\n        var index_of_param_section\
  \ = 1;\n        var url_as_parts = input.split(\"?\");\n        var url_params_section\
  \ = null;\n        if (index_of_param_section < url_as_parts.length) {\n       \
  \     url_params_section = url_as_parts[index_of_param_section];\n        }\n  \
  \      var url_params = null;\n        if (url_params_section !== null) {\n    \
  \        url_params = url_params_section.split(\"&\");\n        }\n        var encoded_url\
  \ = null;\n        if (url_params !== null) {\n            for (i = 0; i < url_params.length;\
  \ i++) {\n                param_name = url_params[i].split(\"=\");\n           \
  \     if (param_name[0] == \"url\") encoded_url = param_name[1];\n            }\n\
  \        }\n        if (encoded_url === null) {\n            error_msg = \"Could\
  \ not decode ATP Safe Link. Returning original URL.\";\n            logInfo(error_msg);\n\
  \            return input;\n        }\n        decoded_url = decodeURIComponent(encoded_url);\n\
  \        return decoded_url;\n    }\n    // Check if it is a Proofpoint Protected\
  \ URL\n    var PROOFPOINT_PREFIXES = ['https://urldefense.proofpoint.com/v1/url?u=',\
  \ 'https://urldefense.proofpoint.com/v2/url?u=', 'https://urldefense.com/v3/__'];\n\
  \    var v = 0;\n    if (input.indexOf(PROOFPOINT_PREFIXES[0]) === 0) {\n      \
  \  v = 1;\n    } else if (input.indexOf(PROOFPOINT_PREFIXES[1]) === 0) {\n     \
  \   v = 2;\n    } else if (input.indexOf(PROOFPOINT_PREFIXES[2]) === 0) {\n    \
  \    v = 3;\n    }\n    // Not Proofpoint so just un-escape\n    if (v === 0) {\n\
  \        var url = input.replace(/\\[\\.\\]/g, '.')\n        if (input.startsWith('https')\
  \ || input.startsWith('hxxps')) {\n            //Normalize: 1) [.] --> . 2) hxxps\
  \ --> https 3) &amp --> & 4) https:\\\\ --> https://\n            url = url.replace(/hxxps/i,\
  \ 'https').replace(/&amp;/g, '&').replace(/https:\\\\\\\\/g, 'https://').replace(/https:\\\
  \\/g, 'https://')\n            // Normalize the URL with https prefix\n        \
  \    if (url.startsWith('https:/') && !url.startsWith('https://')) {\n         \
  \       url = url.replace('https:/', 'https://')\n            }\n            if\
  \ (url.search(/https:/i) === 0 && url.search(/https:\\/\\//i) !== 0) {\n       \
  \         url = url.replace(/https:/i, 'https://')\n            }\n        }\n \
  \       else if (input.startsWith('http') || input.startsWith('hxxp')) {\n     \
  \       //Normalize: 1) [.] --> . 2) hxxp --> http 3) &amp --> & 4) http:\\\\ -->\
  \ http://\n            url = url.replace(/hxxp/i, 'http').replace(/&amp;/g, '&').replace(/http:\\\
  \\\\\\/g, 'http://').replace(/http:\\\\/g, 'http://')\n            // Normalize\
  \ the URL with http prefix\n            if (url.startsWith('http:/') && !url.startsWith('http://'))\
  \ {\n                url = url.replace('http:/', 'http://')\n            }\n   \
  \         if (url.search(/http:/i) === 0 && url.search(/http:\\/\\//i) !== 0) {\n\
  \                url = url.replace(/http:/i, 'http://')\n            }\n       \
  \ }\n        if (url.search(/http/i) !== 0 && url.search(/ftp/i) !== 0) {\n    \
  \        return 'http://' + url;\n        }\n        return url;\n    }\n    //\
  \ If proofpoint type v3\n    if (v === 3) {\n        var clean = input.substr(PROOFPOINT_PREFIXES[v\
  \ - 1].length);\n        var closeIndex = clean.indexOf('__');\n        clean =\
  \ clean.substr(0, closeIndex);\n        var url_reg = /((http)s?:)(\\/{1,2})(.*)/g;\n\
  \        var clean_fixed = clean.replace(url_reg, '$1//$4');\n        return clean_fixed;\n\
  \    }\n\n    // If from Proofpoint then no need to un-escape or normalize\n   \
  \ var re = /&.*$/;\n    var at_sign_reg = /%40/g;\n    var ampersand_reg = /%26/g;\n\
  \    var hash_reg = /%23/g;\n    var equals_reg = /%3D/g;\n    var clean = input.substr(PROOFPOINT_PREFIXES[v\
  \ - 1].length).replace(/-/g, '%').replace(/_/g, '/').replace('%3A//', '://').replace(re,\
  \ '').replace('%3F', '?').replace('%3D', '=').replace(at_sign_reg, '@').replace(ampersand_reg,\
  \ '&').replace(hash_reg, '#').replace(equals_reg, '=');\n    try {\n        clean\
  \ = decodeURI(clean);\n    } catch (e) {\n    // Ignore if can't decodeURI\n   \
  \ }\n\n    return clean;\n}\n\nfunction format_url_list(url_list) {\n    var len\
  \ = url_list.length;\n    var formatted_urls = new Array(len);\n    url_list.forEach(function(the_url,\
  \ index) {\n        formatted_urls[index] = format_url(the_url.trim());\n    });\n\
  \    return formatted_urls;\n}\n\nvar urls;\n// It is assumed that args.input is\
  \ a string\nvar unformatted_urls = argToList(args.input);\nurls = format_url_list(unformatted_urls);\n\
  return urls;"
scripttarget: 0
tags:
- indicator-format
tests:
- UnEscapeURL-Test
toversion: 4.1.9
type: javascript
