args:
- default: true
  description: The HTML to extract tables from
  name: html
  required: true
- description: Extract only the tables with given indexes - 0 based
  name: indexes
comment: 'Find tables inside HTML and extract the contents into objects using the
  following logic:

  - If table has a single column, just create an array of strings from the values

  - If table has 2 columns and has no header row, treat the first column as key and
  second as value and create a table of key/value

  - If table has a header row, create a table of objects where attribute names are
  the headers

  - If table does not have a header row, create table of objects where attribute names
  are cell1, cell2, cell3...'
commonfields:
  id: ExtractHTMLTables
  version: -1
dockerimage: demisto/bs4
enabled: true
name: ExtractHTMLTables
outputs:
- contextPath: HTMLTables
  description: The extracted HTML tables
runonce: false
script: "from bs4 import BeautifulSoup\n\nsoup = BeautifulSoup(demisto.getArg('html'),\
  \ 'html.parser')\nindexes = argToList(demisto.getArg('indexes'))\n\ntables = []\n\
  for index, tab in enumerate(soup.find_all('table')):\n    if len(indexes) > 0 and\
  \ index not in indexes and str(index) not in indexes:\n        continue\n    table\
  \ = []\n    headers = []\n    # Check if there are headers and use them\n    for\
  \ th in tab.find_all('th'):\n        headers.append(th.text)\n    for tr in tab.find_all('tr'):\n\
  \        tds = tr.find_all('td')\n        # This is a data row and not header row\n\
  \        if len(tds) > 0:\n            # Single value in a table - just create an\
  \ array of strings ignoring header\n            if len(tds) == 1:\n            \
  \    table.append(tds[0].text)\n            # If there are 2 columns and no headers,\
  \ treat as key-value (might override values if same key in first column)\n     \
  \       elif len(tds) == 2 and len(headers) == 0:\n                if type(table)\
  \ == list:\n                    table = {}\n                table[tds[0].text] =\
  \ tds[1].text\n            else:\n                row = {}\n                if len(headers)\
  \ > 0:\n                    for i, td in enumerate(tds):\n                     \
  \   row[headers[i]] = td.text\n                else:\n                    for i,\
  \ td in enumerate(tds):\n                        row['cell' + str(i)] = td.text\n\
  \                table.append(row)\n    if len(table) > 0:\n        tables.append(table)\n\
  if len(tables) > 0:\n    demisto.results({\n        'Type': entryTypes['note'],\n\
  \        'Contents': 'Found {} tables in HTML.'.format(len(tables)),\n        'ContentsFormat':\
  \ formats['text'],\n        'EntryContext': {'HTMLTables': tables if len(tables)\
  \ > 1 else tables[0]}\n    })\nelse:\n    demisto.results('Did not find tables in\
  \ HTML.')"
scripttarget: 0
subtype: python2
tags:
- Utility
toversion: 4.1.9
type: python
