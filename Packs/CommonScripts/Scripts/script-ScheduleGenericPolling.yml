args:
- description: List of IDs to poll
  isArray: true
  name: ids
  required: true
- description: Name of the polling command to run
  name: pollingCommand
  required: true
- defaultValue: ids
  description: Name of the argument of the polling command
  name: pollingCommandArgName
  required: true
- description: DT filter for polling IDs
  name: dt
  required: true
- description: The ID of the playbook that contains the manual task which will be
    completed once the polling is done.
  name: playbookId
- defaultValue: '1'
  description: Polling frequency - how often the polling command should run (minutes)
  name: interval
  required: true
- defaultValue: '60'
  description: How much time to poll before declaring a timeout and resuming the playbook
    (minutes)
  name: timeout
  required: true
- defaultValue: polling
  description: The tag of the blocking manual task ("Wait For Polling Task To Finish")
  name: tag
  required: true
- description: Names of additional arguments for the polling command (e.g. arg1,arg2,...)
  isArray: true
  name: additionalPollingCommandArgNames
- description: Values of the additional arguments for the polling command (e.g. value1,value2,...)
  isArray: true
  name: additionalPollingCommandArgValues
comment: Called by the GenericPolling playbook, schedules the polling task.
commonfields:
  id: ScheduleGenericPolling
  version: -1
enabled: true
fromversion: 4.0.0
name: ScheduleGenericPolling
runonce: false
script: "import random, string, json, re\nfrom datetime import datetime, timedelta\n\
  \n# Returns a comma-separated string representation of a list\n# Possible inputs:\
  \ null, int, str, bytes, [\"\",\"\",...], [int, int], 'a,b,...', '\"a\",\"b\",...',\
  \ '[\"\",\"\",...]'\ndef parseIds(idsArg):\n    if idsArg is None:\n        return\n\
  \    if isinstance(idsArg, list):\n        if len(idsArg) == 0 or isinstance(idsArg[0],\
  \ str):\n            return idsArg\n        return ','.join(map(str, idsArg))\n\
  \    if isinstance(idsArg, str) or isinstance(idsArg, bytes):\n        return ','.join(argToList(idsArg))\n\
  \    return str(idsArg)\n\n\nargs = demisto.args()\nids = parseIds(args['ids'])\n\
  dt = args['dt']\npollingCommand = args['pollingCommand']\npollingCommandArgName\
  \ = args['pollingCommandArgName']\ntag = args['tag']\nplaybookId = ' playbookId=\"\
  {}\"'.format(args['playbookId']) if 'playbookId' in args else ''\ninterval = int(demisto.get(args,\
  \ 'interval'))\ntimeout = int(demisto.get(args, 'timeout'))\nargs_names = ','.join(map(unicode.strip,\
  \ demisto.getArg('additionalPollingCommandArgNames').split(',')))\nargs_values =\
  \ ','.join(map(unicode.strip, demisto.getArg('additionalPollingCommandArgValues').split(',')))\n\
  \nif interval <= 0 or timeout <= 0 :\n    demisto.results({\n        'Type': entryTypes['error'],\n\
  \        'ContensFormat': formats['text'],\n        'Contents': \"Interval and timeout\
  \ must be positive numbers\"\n    })\n    sys.exit(2)\n\n# Verify correct dt path\
  \ (does not verify condition!)\nif not demisto.dt(demisto.context(), dt):\n    if\
  \ not demisto.dt(demisto.context(), re.sub('\\(.*\\)', '', dt)):\n        return_error(\"\
  Incorrect dt path: no ids found\")\n    demisto.results(\"Warning: no ids matching\
  \ the dt condition were found.\\nVerify that the condition is correct and that all\
  \ ids have finished running.\")\n\nres = demisto.executeCommand(\"ScheduleCommand\"\
  , {\n    'command': '''!GenericPollingScheduledTask pollingCommand=\"%s\" pollingCommandArgName=\"\
  %s\"%s ids=\"%s\" pendingIds=\"%s\" interval=\"%s\" timeout=\"%s\" tag=\"%s\"\n\
  \                additionalPollingCommandArgNames=\"%s\" additionalPollingCommandArgValues=\"\
  %s\"''' \\\n                % (pollingCommand, pollingCommandArgName, playbookId,\
  \ ids.replace('\"', r'\\\"'), dt.replace('\"', r'\\\"'), interval, timeout, tag,\
  \ args_names, args_values),\n    'cron': '*/{} * * * *'.format(interval),\n    'times':\
  \ 1\n})\nif isError(res[0]):\n    demisto.results(res)\n    sys.exit(1)"
scripttarget: 0
subtype: python2
tags: []
tests:
- No test
toversion: 4.1.9
type: python
