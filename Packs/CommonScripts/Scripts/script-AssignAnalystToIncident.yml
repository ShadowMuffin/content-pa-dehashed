args:
- default: true
  description: The optional list of roles we want to assign users from. Can accept
    arrays or comma separated list. Leave empty to fetch all users.
  name: roles
- auto: PREDEFINED
  description: '(default: random) You can pick how to assign the owner - by random,
    online, current, machine-learning, top-user or less-busy-user.'
  name: assignBy
  predefined:
  - random
  - machine-learning
  - top-user
  - less-busy-user
  - online
  - current
- description: When specified, the provided user will be assigned as the incident
    owner (optional).
  name: username
- description: When specified, the user of provided email will be assigned as the
    incident owner (optional)
  name: email
- auto: PREDEFINED
  defaultValue: 'false'
  description: Set to true to assign only user that is currently on shift. Requires
    Cortex XSOAR v5.5 or later.
  name: onCall
  predefined:
  - 'true'
  - 'false'
comment: 'Assign analyst to incident.

  By default,  the analyst is picked randomly from the available users, according
  to the provided roles (if no roles provided, will fetch all users).

  Otherwise, the analyst will be picked according to the ''assignBy'' arguments.

  machine-learning: DBot will calculated and decide who is the best analyst for the
  job.

  top-user: The user that is most commonly owns this type of incident

  less-busy-user: The less busy analyst will be picked to be the incident owner.

  online: The analyst is picked randomly from all online analysts, according to the
  provided roles (if no roles provided, will fetch all users).

  current: The user that executed the command'
commonfields:
  id: AssignAnalystToIncident
  version: -1
enabled: true
name: AssignAnalystToIncident
runonce: false
script: "if (args.email && args.username) {\n    throw 'Please provide either username\
  \ or email';\n}\n\nvar emailToAssign = args.email;\nvar userToAssign = args.username;\n\
  \nif (emailToAssign) {\n    userToAssign = '';\n    var res = executeCommand('getUsers',{});\n\
  \    if (res && res[0] && res[0].Contents) {\n        res[0].Contents.forEach(function(user)\
  \ {\n            if (user.email === args.email) {\n                userToAssign\
  \ = user.id;\n            }\n        });\n    }\n    if (!userToAssign) {\n    \
  \    throw 'Cannot find user with email ' + args.email;\n    }\n}\n\nassignBy =\
  \ args.assignBy || 'random';\nvar onCallArg = true ? args.onCall === 'true' : false;\n\
  \nfunction pickRandomUser(usersRes) {\n    var usersList = usersRes[0].Contents.map(function\
  \ (u) { return u.username });\n    userToAssign = usersList[Math.floor(Math.random()\
  \ * usersList.length)];\n}\n\nif (!userToAssign) {\n    switch(assignBy) {\n   \
  \     case 'online':\n            var usersRes = executeCommand('getUsers', { roles:\
  \ args.roles, online: true, onCall: onCallArg });\n            if (isError(usersRes[0]))\
  \ {\n                return usersRes[0];\n            }\n            pickRandomUser(usersRes);\n\
  \            break;\n        case 'current':\n            var usersRes = executeCommand('getUsers',\
  \ { current: true, onCall: onCallArg });\n            if (isError(usersRes[0]))\
  \ {\n                return usersRes[0];\n            }\n            pickRandomUser(usersRes);\n\
  \            break;\n        case 'random':\n            var usersRes = executeCommand('getUsers',\
  \ { roles: args.roles, onCall: onCallArg });\n            if (isError(usersRes[0]))\
  \ {\n                return usersRes[0];\n            }\n            pickRandomUser(usersRes);\n\
  \            break;\n        default:\n            res = executeCommand(\"getOwnerSuggestion\"\
  , { shiftOnly: onCallArg })[0].Contents;\n\n            switch (assignBy) {\n  \
  \              case 'machine-learning':\n                    userToAssign = res.ownerByMl;\n\
  \                    break;\n                case 'top-user':\n                \
  \    userToAssign = res.topOwner;\n                    break;\n                case\
  \ 'less-busy-user':\n                    userToAssign = res.userLeastLoad;\n   \
  \                 break;\n            }\n\n            if (!userToAssign) {\n  \
  \              var usersRes = executeCommand('getUsers', { roles: args.roles, onCall:\
  \ onCallArg });\n                if (isError(usersRes[0])) {\n                 \
  \   return usersRes[0];\n                }\n                pickRandomUser(usersRes);\n\
  \            }\n    }\n}\n\nif (userToAssign) {\n    var res = executeCommand(\"\
  setOwner\", { owner: userToAssign });\n    if (!isError(res[0])) {\n        return\
  \ 'User \\'' + userToAssign + '\\' assigned to be the incident owner.';\n    } else\
  \ {\n        return {\n          ContentsFormat: formats.text,\n          Type:\
  \ entryTypes.error,\n          Contents: 'Failed to assign user: \\'' + userToAssign\
  \ + '\\', error: ' + res[0].Contents\n        };\n    }\n} else {\n    return {\n\
  \      ContentsFormat: formats.text,\n      Type: entryTypes.error,\n      Contents:\
  \ 'No user found.'\n    };\n}\n"
scripttarget: 0
tags:
- Utility
toversion: 4.1.9
type: javascript
