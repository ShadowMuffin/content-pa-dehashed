args:
- default: true
  description: left hand parameter
  name: lh
  required: true
- description: right hand parameter
  name: rh
  required: true
- description: Math expression (+, -, >, <, ==, *, /, %)
  name: action
  required: true
- description: Regex to filter only a specific part of the right hand argument
  name: rhRegex
- description: Regex to filter only a specific part of the left hand argument
  name: lhRegex
- description: Radix for left hand value, defaults to 10
  name: lhRadix
- description: Radix for right hand value, defaults to 10
  name: rhRadix
- description: Path where to store result
  name: contextKey
comment: 'Script will run the provided mathematical action on 2 provided values and
  produce a result.

  The result can be stored on the context using the contextKey argument

  '
commonfields:
  id: MathUtil
  version: -1
dependson: {}
enabled: true
name: MathUtil
outputs:
- contextPath: MathResult
  description: The result of the *last* math action. Might be overriden by contextKey.
script: "var lh = args.lh;\nvar rh = args.rh;\nvar action = args.action;\nvar lhRegex\
  \ = args.lhRegex;\nvar rhRegex = args.rhRegex;\nvar lRadix = args.lhRadix ? args.lRadix\
  \ : 10;\nvar rRadix = args.rhRadix ? args.rRadix : 10;\nvar supportedActions = {\n\
  \    '+': function() { return lh + rh; },\n    '-': function() { return lh - rh;\
  \ },\n    '>': function() { return lh > rh; },\n    '<': function() { return lh\
  \ < rh; },\n    '*': function() { return lh * rh; },\n    '/': function() { return\
  \ lh / rh; },\n    '%': function() { return lh % rh; },\n    '==': function() {\
  \ return lh == rh; }\n}\n\nactionKeys = Object.keys(supportedActions);\n\n//verfiy\
  \ action is supported\nif (!action || actionKeys.indexOf(action) < 0 ) {\n  return\
  \ {ContentsFormat: formats.markdown, Type: entryTypes.error, Contents: '**[' + action\
  \ + ']** is not a supported action, only ' + actionKeys.join() + ' are supported'};\n\
  }\n\n\n//parse lh according to regex\nif (lhRegex) {\n    var lr = new RegExp(lhRegex,\
  \ 'i');\n    lh = lh.match(lr);\n    if (!lh) {\n        return {ContentsFormat:\
  \ formats.markdown, Type: entryTypes.error, Contents: 'lh - parsed to be an empty\
  \ value from regex **[' + lhRegex + ']**, on value **[' + args.lh + ']**'};\n  \
  \  }\n}\n\n//parse rh according to regex\nif (rhRegex) {\n    var rr = new RegExp(rhRegex,\
  \ 'i');\n    rh = rh.match(rr);\n    if (!rh) {\n        return {ContentsFormat:\
  \ formats.markdown, Type: entryTypes.error, Contents: 'rh - parsed to be an empty\
  \ value from regex **[' + rhRegex + ']**, on value **[' + args.rh + ']**'};\n  \
  \  }\n}\n\nif (isNaN(lh)) {\n    return {ContentsFormat: formats.markdown, Type:\
  \ entryTypes.error, Contents: '**[' + lh + ']** is not a number'};\n}\n\nif (isNaN(rh))\
  \ {\n    return {ContentsFormat: formats.markdown, Type: entryTypes.error, Contents:\
  \ '**[' + rh + ']** is not a number'};\n}\n\nlh = parseInt(lh, lRadix)\nrh = parseInt(rh,\
  \ rRadix)\n\n//do action on params\nvar res = supportedActions[action]();\n\n//\
  \ We need to override the context value so we use setContext\nif (args.contextKey)\
  \ {\n    setContext(args.contextKey, res);\n} else {\n    setContext('MathResult',\
  \ res);\n}\n\nreturn {ContentsFormat: formats.markdown, Type: entryTypes.note, Contents:\
  \ lh + ' ' + action + ' ' + rh + ' = ' + res};"
scripttarget: 0
tags:
- Utility
timeout: 0s
toversion: 4.1.9
type: javascript
