args:
- defaultValue: '0'
  description: Minimum number of lower case characters to include in password.
  name: min_lcase
- defaultValue: '10'
  description: Maximum number of lower case characters to include in password.
  name: max_lcase
- defaultValue: '0'
  description: Minimum number of upper case characters to include in password.
  name: min_ucase
- defaultValue: '10'
  description: Maximum number of upper case characters to include in password.
  name: max_ucase
- defaultValue: '0'
  description: Minimum number of digits to include in password.
  name: min_digits
- defaultValue: '10'
  description: Maximum number of digits to include in password.
  name: max_digits
- defaultValue: '0'
  description: Minimum number of symbols to include in password.
  name: min_symbols
- defaultValue: '10'
  description: Maximum number of symbols to include in password.
  name: max_symbols
- auto: PREDEFINED
  default: false
  defaultValue: 'false'
  description: Enable to see various values as they pass through the function.
  name: debug
  predefined:
  - 'true'
  - 'false'
comment: "This function generates a password and allows various parameters to customize\
  \ the properties of the password depending on the use case (e.g. password complexity\
  \ requirements).  The default behavior is to generate a password of  *random length*\
  \ including all four character classes (upper, lower, digits, symbols) with at least\
  \ five and at most ten characters per class. \n\nThe min_* values all default to\
  \ 0. This means that if the command is executed in this way:\n!GeneratePassword\
  \ max_lcase=10\nIt is possible that a password of length zero could be generated.\
  \ It is therefore recommended to always include a min_* parameter that matches.\
  \ \n\nThe debug parameter will print certain properties of the command into the\
  \ WarRoom for easy diagnostics."
commonfields:
  id: GeneratePassword
  version: -1
enabled: true
name: GeneratePassword
outputs:
- contextPath: NEW_PASSWORD
  description: The new password generated for the user.
script: "dArgs = {\n    'debug': args.debug = (args.debug === 'true'),\n    'max_lcase':\
  \ parseInt(args.max_lcase),\n    'min_lcase': parseInt(args.min_lcase),\n    'max_ucase':\
  \ parseInt(args.max_ucase),\n    'min_ucase': parseInt(args.min_lcase),\n    'max_digits':\
  \ parseInt(args.max_digits),\n    'min_digits': parseInt(args.min_digits),\n   \
  \ 'max_symbols': parseInt(args.max_symbols),\n    'min_symbols': parseInt(args.min_symbols)\n\
  };\n\n// randomize our selected charaters\nfunction randomSort(a, b) {\n    return\
  \ Math.random() > 0.5 ? -1 : 1;\n}\n\nfunction printCharValues(pw) {\n    var s\
  \ = [];\n    for (i = 0; i < pw.length; i++) {\n        s.push(pw.charCodeAt(i));\n\
  \    }\n    log(\"Ascii for password = \" + s.toString());\n}\n\nif(args.debug)\
  \ {\n   log(JSON.stringify(dArgs));\n}\n\n// Define the characters of our classes\n\
  var lcase   = \"abcdefghijklmnopqrstuvwxyz\";\nvar ucase   = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
  ;\nvar n       = \"0123456789\";\nvar s       = \"!@#$%^&*()[]+:\\\"?_><=';/-.,\\\
  \\|\";\n\n// randomize the amount of characters we get as per parameters\nvar numu\
  \ = dArgs.max_ucase   - dArgs.min_ucase   >= 0 ? Math.floor(Math.random() * (dArgs.max_ucase\
  \   - dArgs.min_ucase   + 1)) + dArgs.min_ucase   : 0;\nvar numl = dArgs.max_lcase\
  \   - dArgs.min_lcase   >= 0 ? Math.floor(Math.random() * (dArgs.max_lcase   - dArgs.min_lcase\
  \   + 1)) + dArgs.min_lcase   : 0;\nvar numn = dArgs.max_digits  - dArgs.min_digits\
  \  >= 0 ? Math.floor(Math.random() * (dArgs.max_digits  - dArgs.min_digits  + 1))\
  \ + dArgs.min_digits  : 0;\nvar nums = dArgs.max_symbols - dArgs.min_symbols >=\
  \ 0 ? Math.floor(Math.random() * (dArgs.max_symbols - dArgs.min_symbols + 1)) +\
  \ dArgs.min_symbols : 0;\n\nif(numu + numl + numn + nums === 0) {\n   return  {\
  \ ContentsFormat: formats.text, Type:entryTypes.error, Contents: 'error: insane\
  \ password. No character length.'};\n}\n\n// start with a blank password.\nvar pw\
  \ = \"\";\n\n// iterate through each character class and add\nfor (var i = 0; i\
  \ < numu; i++) {\n   pw += ucase[Math.floor(Math.random() * ucase.length)];\n}\n\
  for (var i = 0; i < numl; i++) {\n   pw += lcase[Math.floor(Math.random() * lcase.length)];\n\
  }\nfor (var i = 0; i < numn; i++) {\n   pw += n[Math.floor(Math.random() * n.length)];\n\
  }\nfor (var i = 0; i < nums; i++) {\n   pw += s[Math.floor(Math.random() * s.length)];\n\
  }\n\n// randomize our new password string\nvar rpw = (pw.split('').sort(randomSort)).join('');\n\
  \nif(args.debug) {\n    printCharValues(rpw);\n}\nreturn {\n        Type: entryTypes.note,\n\
  \        Contents: {\"NEW_PASSWORD\": rpw},          // used by raw_contents = true\n\
  \        ContentsFormat: formats.json,             // defines the source format\n\
  \        HumanReadable: tableToMarkdown('Newly Generated Password', {\"password\"\
  : rpw}),\n        EntryContext: {\"NEW_PASSWORD\": rpw}       // same as setcontext\n\
  };\n\n"
scripttarget: 0
tags:
- Utility
toversion: 4.1.9
type: javascript
