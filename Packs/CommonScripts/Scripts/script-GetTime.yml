args:
- default: true
  description: The date to use in the object
  name: date
- description: The date format for the result, can be ISO/GMT/UTC/Locale/Date/Year/Month/Day/DayInWeek/Hours
  name: dateFormat
- description: prefix the keys in the context for the results
  name: contextKey
- description: Will subtract minutesAgo minutes from current time
  name: minutesAgo
- description: Will subtract hoursAgo hours from current time
  name: hoursAgo
- description: Will subtract daysAgo days from current time
  name: daysAgo
- description: Will subtract monthsAgo months from current time
  name: monthsAgo
- description: Will subtract yearsAgo years from current time
  name: yearsAgo
comment: 'Retrieves the current date and time.

  '
commonfields:
  id: GetTime
  version: -1
enabled: true
name: GetTime
outputs:
- contextPath: TimeNowUnix
  description: number of milliseconds since 1970/01/01
- contextPath: TimeNow
  description: current time in ISO format
runonce: false
script: "var d = new Date();\nif (args.date){\n    if (args.date.length > 0){\n  \
  \      // args.date is string\n        d =  new Date(args.date);\n    } else {\n\
  \        // args.date is object (Time.time in Go)\n        d =  new Date(args.date.Unix()*1000);\n\
  \    }\n}\nif (args.minutesAgo){\n    d.setMinutes(d.getMinutes() - args.minutesAgo);\n\
  }\nif (args.hoursAgo){\n    d.setHours(d.getHours() - args.hoursAgo);\n}\nif (args.daysAgo){\n\
  \    d.setDate(d.getDate() - args.daysAgo);\n}\nif (args.monthsAgo){\n    d.setMonth(d.getMonth()\
  \ - args.monthsAgo);\n}\nif (args.yearsAgo){\n    d.setFullYear(d.getFullYear()\
  \ - args.yearsAgo);\n}\n\nprefix = '';\nif (args.contextKey) {\n    prefix = args.contextKey;\n\
  }\nvar timeStr = String(d);\nif ((args.dateFormat) && (args.dateFormat.length >\
  \ 0)){\n    switch(args.dateFormat.toLowerCase()) {\n        case 'iso':\n     \
  \       timeStr = d.toISOString();\n            break;\n        case 'gmt':\n  \
  \      case 'utc':\n            timeStr = d.toUTCString();\n            break;\n\
  \        case 'locale':\n            timeStr = d.toLocaleString();\n           \
  \ break;\n        case 'date':\n            timeStr = d.toDateString();\n      \
  \      break;\n        case 'year':\n            timeStr = d.getFullYear();\n  \
  \          break;\n        case 'month':\n            timeStr = d.getMonth();\n\
  \            break;\n        case 'day':\n            timeStr = d.getDate();\n \
  \           break;\n        case 'dayinweek':\n            timeStr = d.getDay();\n\
  \            break;\n        case 'hours':\n            timeStr = d.getHours();\n\
  \            break;\n        case 'utchours':\n            timeStr = d.getUTCHours();\n\
  \            break;\n        case 'minutes':\n            timeStr = d.getMinutes();\n\
  \            break;\n\n\n        default:\n            throw 'Unsupported date format:\
  \ '+args.dateFormat\n    }\n}\n\ncontext = {};\ncontext[prefix+'TimeNowUnix'] =\
  \ d.getTime();\ncontext[prefix+'TimeNow'] = timeStr;\nreturn {\n    Type : entryTypes.note,\n\
  \    Contents : timeStr,\n    ContentsFormat : formats.json,\n    HumanReadable\
  \ : timeStr,\n    EntryContext : context\n};"
scripttarget: 0
tags:
- Utility
tests:
- GetTime-Test
- GetTime-ObjectVsStringTest
toversion: 4.1.9
type: javascript
