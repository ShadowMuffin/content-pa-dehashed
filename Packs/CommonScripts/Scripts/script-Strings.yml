args:
- default: true
  description: Entry ID of a file entry to retrieve strings from
  name: entry
  required: true
- description: Number of consecutive characters to be considered a string - default
    is 4
  name: chars
- description: Display first 'size' results - default is 1024
  name: size
- description: Regex to filter the strings - compiled with ignore case
  name: filter
comment: Extract strings from a file with optional filter - similar to binutils strings
  command
commonfields:
  id: Strings
  version: -1
dependson: {}
name: Strings
script: "import re\nimport string\n# Optional arguments and default values\nchars\
  \ = 4\nif 'chars' in demisto.args():\n    chars = int(demisto.args()['chars'])\n\
  size = 1024\nif 'size' in demisto.args():\n    size = int(demisto.args()['size'])\n\
  regex = None\nif 'filter' in demisto.args():\n    regex = re.compile(demisto.args()['filter'],\
  \ re.I)\nfEntry = demisto.executeCommand('getFilePath', {'id': demisto.args()['entry']})[0]\n\
  if not isError(fEntry):\n    matches = []\n    with open(demisto.get(fEntry, 'Contents.path'),\
  \ 'rb', 1024 * 1024) as f:\n        buff = ''\n        c = f.read(1)\n        while\
  \ c != '':\n            if c in string.printable:\n                buff += c\n \
  \           else:\n                if len(buff) >= chars:\n                    if\
  \ regex:\n                        if regex.match(buff):\n                      \
  \      matches.append(buff)\n                    else:\n                       \
  \ matches.append(buff)\n                    if len(matches) >= size:\n         \
  \               break\n                buff = ''\n            c = f.read(1)\n  \
  \      if len(buff) >= chars and len(matches) < size:\n            if regex:\n \
  \               if regex.match(buff):\n                    matches.append(buff)\n\
  \            else:\n                matches.append(buff)\n    if matches:\n    \
  \    demisto.results('\\n'.join(matches))\n    else:\n        demisto.results('No\
  \ strings were found.')\nelse:\n    demisto.results(fEntry)"
scripttarget: 0
subtype: python2
system: true
tags:
- server
- file
timeout: 0s
toversion: 4.1.9
type: python
