args:
- description: List Name of Base64 item (need to be a single file in list)
  name: listname
  required: true
- description: Optional Warroom Output Filename (default filename is list name)
  name: filename
- auto: PREDEFINED
  defaultValue: 'no'
  description: Is data compressed (zip format)?
  name: isZipFile
  predefined:
  - 'yes'
  - 'no'
comment: Converts Base64 file in a list to a binary file and upload to warroom
commonfields:
  id: Base64ListToFile
  version: -1
enabled: true
name: Base64ListToFile
outputs:
- contextPath: File.Name
  description: Filename (only in case of report type=json)
- contextPath: File.Type
  description: File type e.g. "PE" (only in case of report type=json)
- contextPath: File.Size
  description: File size (only in case of report type=json)
- contextPath: File.MD5
  description: MD5 hash of the file (only in case of report type=json)
- contextPath: File.SHA1
  description: SHA1 hash of the file (only in case of report type=json)
- contextPath: File.SHA256
  description: SHA256 hash of the file (only in case of report type=json)
- contextPath: File.EntryID
  description: EntryID of the file (only in case of report type=json)
runonce: false
script: "import base64\nimport zlib\n\n\n# Output file name\nif 'filename' in demisto.args():\n\
  \    outfilename = demisto.args()['filename']\nelse:\n    outfilename = demisto.args()['listname']\n\
  \n# get the list\nres = demisto.executeCommand('getList', {'listName': demisto.args()['listname']})\n\
  res = res[0]\nif isError(res):\n  return_error(\"error reading list %s from demisto\"\
  \ % demisto.args()['listname'])\n\n# convert base64 file to binary file\nbin_file\
  \ = base64.decodestring(res['Contents'])\nif demisto.args()['isZipFile'] == 'yes':\n\
  \    bin_file = zlib.decompress(bin_file)\n\n# output file to warroom\ndemisto.results(fileResult(outfilename,\
  \ bin_file))"
scripttarget: 0
subtype: python2
tags:
- list
- Utility
toversion: 4.1.9
type: python
