args:
- default: true
  description: IP to check in ranges
  name: ip
  required: true
- description: 'A list of IP ranges to check the IP in. The list should be provided
    in CIDR notation, separated by commas. An example of a list of ranges would be:
    "172.16.0.0/12,10.0.0.0/8,192.168.0.0/16" (without quotes). If a list is not provided,
    will use default list provided in the IsIPInRanges script (the known IPv4 private
    address ranges).'
  name: ipRanges
comment: Returns yes if the IP is in one of the ranges provided, returns no otherwise.
commonfields:
  id: IsIPInRanges
  version: -1
enabled: true
name: IsIPInRanges
outputs:
- contextPath: 'yes'
  description: if given value is an IP range
- contextPath: 'no'
  description: if given value is not a IP range
- contextPath: IP.Address
  description: The IP Address
- contextPath: IP.InRange
  description: Is the IP is in the input ranges? (could be 'yes' or 'no)
runas: DBotWeakRole
runonce: false
script: "var private_subnets = [\n  '172.16.0.0/12',\n  '10.0.0.0/8',\n  '198.18.0.0/15',\n\
  \  '192.168.0.0/16',\n  '100.64.0.0/10',\n  '127.0.0.0/8',\n  '169.254.0.0/16',\n\
  \  '192.0.0.0/24',\n  '0.0.0.0/8',\n  '224.0.0.0/4',\n  '240.0.0.0/4',\n  '255.255.255.255/32'\n\
  ];\n\nvar ip = args.ip;\nvar ipranges = argToList(args.ipRanges);\n\nif (!ipranges\
  \ || ipranges.length === 0) {\n    ipranges = private_subnets;\n}\n\nvar isInRange\
  \ = ipranges.some(function(iprange) {\n    return isIPInSubnet(ip, iprange.replace(/[\\\
  s]/g, ''));\n});\n\nvar ipObj = {};\nipObj.Address = ip;\nipObj.InRange = isInRange\
  \ ? 'yes' : 'no';\n\nvar ec = {'IP(val.Address == obj.Address)' : ipObj};\n\nreturn\
  \ {\n  Type: entryTypes.note,\n  Contents: isInRange ? 'yes' : 'no',\n  ContentsFormat:\
  \ formats.text,\n  EntryContext: ec\n};\n"
scripttarget: 0
tags:
- ip
tests:
- IP Enrichment - Generic v2 - Test
toversion: 4.1.9
type: javascript
