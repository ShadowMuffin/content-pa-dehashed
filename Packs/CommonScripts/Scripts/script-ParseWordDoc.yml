args:
- default: true
  description: Docx file to parse
  name: entryID
  required: true
comment: Takes an input docx file (entryID) as an input and saves an output text file
  (file entry) with the original file's contents.
commonfields:
  id: ParseWordDoc
  version: -1
dockerimage: demisto/word-parser
enabled: true
name: ParseWordDoc
script: "from docx import Document\nfrom docx.opc.exceptions import PackageNotFoundError\n\
  \nres = []\nerrEntry = {\n    \"Type\": entryTypes[\"error\"],\n    \"ContentsFormat\"\
  : formats[\"text\"],\n    \"Contents\": \"\"\n}\n\ntry:\n    cmd_res = demisto.executeCommand('getFilePath',\
  \ {'id': demisto.args()['entryID']})\n    file_res = cmd_res[0]\n    if isError(file_res):\n\
  \        file_res[\"Contents\"] = \"Error fetching entryID: \" + file_res[\"Contents\"\
  ]\n        res = file_res\n    else:\n        file_path = file_res['Contents']['path']\n\
  \        document = Document(file_path)\n        file_data = '\\n'.join([para.text\
  \ for para in document.paragraphs])\n        file_name = file_res['Contents']['name']\n\
  \        output_file_name = file_name[0:file_name.rfind('.')] + '.txt'\n       \
  \ res = fileResult(output_file_name, file_data.encode('utf8'))\nexcept PackageNotFoundError\
  \ as e:\n    errEntry[\"Contents\"] = \"Input file is not a valid docx/doc file.\"\
  \n    res = errEntry\nexcept BaseException as e:\n    errEntry[\"Contents\"] = \"\
  Error occurred while parsing input file.\\nException info: \" + str(e)\n    res\
  \ = errEntry\n\ndemisto.results(res)\n"
scripttarget: 0
subtype: python2
tags:
- word
- docx
- doc
- parser
toversion: 4.1.9
type: python
