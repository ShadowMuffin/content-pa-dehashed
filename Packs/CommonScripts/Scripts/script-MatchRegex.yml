args:
- default: true
  description: The text date we should extract regex from
  name: data
  required: true
- description: The regex to match and extract
  name: regex
  required: true
- description: The matching group to return (if not provided the full match will be
    returned), group value should start at 1
  name: group
- description: The context key to populate with the result
  name: contextKey
- defaultValue: null
  description: The regex flags to match. Default is -gim.
  name: flags
comment: Extract regex data from given text - supports groups and looping as well.
commonfields:
  id: MatchRegex
  version: -1
enabled: true
name: MatchRegex
outputs:
- contextPath: MatchRegex.results
  description: List of Regex matches
  type: string
script: "var data = (typeof args.data) === 'string' ? args.data : JSON.stringify(args.data);\n\
  var flags = args.flags ? args.flags : 'gim';\nvar r = new RegExp(args.regex, flags);\n\
  var m;\nvar vals = [];\nwhile ((m = r.exec(data)) !== null) {\n    if (m && m.length\
  \ > 0) {\n        var val = m[0];\n        var group = parseInt(args.group);\n \
  \       if (args.group && m.length > group) {\n            val = m[group];\n   \
  \     }\n        var ec = {};\n        if (args.contextKey) {\n            ec[args.contextKey]\
  \ = val;\n        }\n        vals.push(val);\n\n        if (flags.indexOf('g') ===\
  \ -1) {\n          break;\n        }\n    }\n}\nif (vals.length == 1) {\n  setContext('MatchRegex.results',\
  \ vals[0])\n  return {Type: entryTypes.note, Contents: vals[0], ContentsFormat:\
  \ formats.text, EntryContext: ec};\n} else if (vals.length) {\n  setContext('MatchRegex.results',\
  \ vals)\n  return {Type: entryTypes.note, Contents: vals, ContentsFormat: formats.text,\
  \ EntryContext: ec};\n} else {\n  setContext('MatchRegex.results', vals)\n  return\
  \ {Type: entryTypes.note, Contents: 'Regex does not match', ContentsFormat: formats.text};\n\
  }"
scripttarget: 0
tags:
- Utility
toversion: 4.1.9
type: javascript
