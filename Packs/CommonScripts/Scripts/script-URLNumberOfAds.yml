args:
- default: true
  description: URL to load and count ads on
  name: url
  required: true
- defaultValue: https://easylist.github.io/easylist/easylist.txt
  description: Optional easylist to get ads from
  name: easylist
comment: Fetches the numbers of ads in the given url
commonfields:
  id: URLNumberOfAds
  version: -1
enabled: true
name: URLNumberOfAds
outputs:
- contextPath: Ads.URL
  description: Ad URL found
- contextPath: Ads.Count
  description: The count for the ad found
- contextPath: URL.Data
  description: The URL we are checking
- contextPath: URL.AdsCount
  description: The ads count on the URL
script: "import requests, re\n\ndef ads(html,termlist):\n    results = {}\n    tags\
  \ = re.findall(\"<[^/][^>]*>\",html)\n    for item in termlist.split('\\n'):\n \
  \       if not item.strip():\n            continue\n        if item.startswith('!')\
  \ or item.startswith('[Adbl') or item.startswith('@@'):\n            continue\n\
  \        if item.startswith('###'):\n            item = item[3:]\n        if item.startswith('||'):\n\
  \            item = item[2:item.find(\"^$\")]\n        for t in tags:\n        \
  \    if item in t:\n                results[item] = (results[item] + 1) if item\
  \ in results else 1\n    return results\n\nu = demisto.args()['url']\nr = requests.get(u)\n\
  reasy = requests.get(demisto.args()['easylist'] if 'easylist' in demisto.args()\
  \ else 'https://easylist.github.io/easylist/easylist.txt')\nres = ads(r.text, reasy.text)\n\
  nicerRes = [{'URL': k, 'Count': res[k]} for k in res]\ntotalAds = reduce(lambda\
  \ x, y: x+y['Count'], nicerRes, 0)\ndemisto.results({'Type': entryTypes['note'],\
  \ 'Contents': nicerRes, 'ContentsFormat': formats['json'], 'HumanReadable': tableToMarkdown('AD\
  \ URLs', nicerRes) + '\\nTotal: ' + str(totalAds),\n    'EntryContext': {'Ads':\
  \ nicerRes, 'URL(val.Data == obj.Data)': {'Data': u, 'AdsCount': totalAds}}})"
scripttarget: 0
subtype: python2
tags:
- Utility
toversion: 4.1.9
type: python
