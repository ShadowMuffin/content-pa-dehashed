args:
- defaultValue: '10000'
  description: Maximum number of indicators for malicious ratio calculation.
  name: maxNumberOfIndicators
- defaultValue: '3'
  description: Minimum number of investigation the indicator has to appear in.
  name: minimumNumberOfInvs
- defaultValue: '100'
  description: Maximum number of results to display.
  name: maximumNumberOfResults
comment: 'Find the top malicious ratio indicators.

  Malicious ratio is defined by the ratio between the number of "bad" incidents divided
  by the number of total number of incidents that the indicators appears in.'
commonfields:
  id: TopMaliciousRatioIndicators
  version: -1
enabled: true
fromversion: 4.0.0
name: TopMaliciousRatioIndicators
runonce: false
script: "from datetime import datetime, timedelta\nimport json, random\ndef select_indicator_columns(indicator):\n\
  \    display_indicator = {}\n    display_indicator['ID'] = indicator['id']\n   \
  \ display_indicator['Type'] = indicator['indicator_type']\n    display_indicator['Malicious\
  \ Ratio'] = '%.2f' % float(indicator['maliciousRatio'])\n    display_indicator['Value']\
  \ = indicator['value']\n    display_indicator['Last Seen'] = indicator['lastSeen']\n\
  \    return display_indicator\ndef dedup_by_value(indicators_list):\n   exist_values\
  \ = set()\n   result = []\n   for e in indicators_list:\n       value = e['value']\n\
  \       if value not in exist_values:\n           exist_values.add(value)\n    \
  \       result.append(e)\n   return result\nMAX_INDICATORS = int(demisto.args()['maxNumberOfIndicators'])\n\
  MIN_NUMBER_OF_INVS = int(demisto.args()['minimumNumberOfInvs'])\nMAX_RESULTS = int(demisto.args()['maximumNumberOfResults'])\n\
  from_date = demisto.args().get('from', '\"30 days ago\"')\nres = demisto.executeCommand(\"\
  findIndicators\", {'query':'lastSeen:>=%s' % from_date, 'size': MAX_INDICATORS})\n\
  indicators = res[0]['Contents']\nindicators = [i for i in indicators if len(i.get('investigationIDs')\
  \ or []) >= MIN_NUMBER_OF_INVS]\nindicators_map = {}\nfor i in indicators:\n   \
  \ indicators_map[i['id']] = i\nres = demisto.executeCommand(\"maliciousRatio\",\
  \ {'id': \",\".join(indicators_map.keys())})\nmalicious_ratio_result = res[0]['Contents']\n\
  for mr in malicious_ratio_result:\n    indicators_map[mr['indicatorId']]['maliciousRatio']\
  \ = mr['maliciousRatio']\n    indicators_map[mr['indicatorId']]['from_date'] = from_date\n\
  sorted_indicators = sorted(indicators_map.values(), key=lambda x: x['maliciousRatio'],\
  \ reverse=True)\nsorted_indicators = [x for x in sorted_indicators if x['maliciousRatio']\
  \ > 0]\nsorted_indicators = dedup_by_value(sorted_indicators)\nsorted_indicators\
  \ = sorted_indicators[:MAX_RESULTS]\nsorted_indicators = map(select_indicator_columns,\
  \ sorted_indicators)\nwidget_table = json.dumps({\"total\": len(sorted_indicators),\
  \ \"data\": sorted_indicators})\ndemisto.results({\n      'Type': entryTypes['note'],\n\
  \      'Contents': widget_table,\n      'ContentsFormat': formats['text'],\n   \
  \   'ReadableContentsFormat': formats['markdown'],\n      'HumanReadable': tableToMarkdown('Top\
  \ Malicious Ratio Indicators', sorted_indicators, headers=['ID', 'Malicious Ratio',\
  \ 'Type', 'Value', 'Last Seen'])\n})"
scripttarget: 0
subtype: python2
tags:
- widget
toversion: 4.1.9
type: python
