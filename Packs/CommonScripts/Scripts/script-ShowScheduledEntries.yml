args:
- default: true
  description: Incident ID to get tasks from
  name: incidentId
comment: Show all scheduled entries for specific incident.
commonfields:
  id: ShowScheduledEntries
  version: -1
enabled: true
name: ShowScheduledEntries
outputs:
- contextPath: ScheduledEntries
  description: Entire scheduled entry object
- contextPath: ScheduledEntries.id
  description: Entry ID
  type: string
- contextPath: ScheduledEntries.contents
  description: Entry contents (the scheduled command)
  type: string
- contextPath: ScheduledEntries.type
  description: Entry type
  type: number
- contextPath: ScheduledEntries.investigationID
  description: Entry's investigation ID
  type: string
- contextPath: ScheduledEntries.schedule.startDate
  description: Entry schedule start date
- contextPath: ScheduledEntries.schedule.EndingType
  description: Entry schedule ending type (by / after)
- contextPath: ScheduledEntries.schedule.Times
  description: Entry schedule times until ends (when ending type is 'by')
  type: number
- contextPath: ScheduledEntries.schedule.EndingDate
  description: Entry schedule end time (when ending type is 'after')
- contextPath: ScheduledEntries.schedule.cron
  description: Entry schedule cron
  type: string
- contextPath: ScheduledEntries.schedule.HumanCron
  description: Entry schedule settings
runonce: false
script: "var incidentId = args.incidentId;\n\nvar entries = executeCommand(\"getEntries\"\
  , { id: incidentId });\n\nvar header = 'Scheduled entries for current incident:';\n\
  if (incidentId) {\n    header = 'Scheduled entries for incident #' + incidentId\
  \ + ':';\n}\n\nvar warRoomUrl = demistoUrls().warRoom;\nvar md = '### ' + header\
  \ + '\\n';\nmd += 'Entry ID|Command\\n';\nmd += '-|-\\n';\n\nvar scheduledEntries\
  \ = [];\nentries.forEach(function (entry) {\n    if (entry.Metadata.Recurrent &&\
  \ entry.Metadata.Schedule.Scheduled) {\n        md += '['+ entry.ID + '](' + warRoomUrl\
  \ + '/' + entry.ID + ')' + '|' + entry.Contents + '\\n';\n        scheduledEntries.push({\n\
  \            id: entry.ID,\n            brand: entry.Brand,\n            type: entry.Type,\n\
  \            contents: entry.Contents,\n            contentsFormat: entry.ContentsFormat,\n\
  \            note: entry.Note,\n            evidence: entry.Evidence,\n        \
  \    tags: entry.Tags,\n            investigationID: entry.Metadata.InvestigationID,\n\
  \            schedule: entry.Metadata.Schedule\n        });\n    }\n});\n\nif (!scheduledEntries\
  \ || scheduledEntries.length === 0) {\n    if (incidentId) {\n        return 'There\
  \ are no scheduled entries for incident #' + incidentId + '.';\n    }\n    return\
  \ 'There are no scheduled entries for current incident.';\n}\n\nentryResult = {\n\
  \    Type: entryTypes.note,\n    Contents: scheduledEntries,\n    ContentsFormat:\
  \ formats.json,\n    ReadableContentsFormat: formats.markdown,\n    HumanReadable:\
  \ md,\n    EntryContext: {\n        ScheduledEntries: scheduledEntries\n    }\n\
  };\n\nreturn entryResult;\n"
scripttarget: 0
sensitive: true
tags:
- Utility
toversion: 4.1.9
type: javascript
