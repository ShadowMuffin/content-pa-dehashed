args:
- default: true
  description: ID of the war room entry containing the report file
  name: reportentryid
- description: Sections to show (comma-separated). Sections are "info", "statistics",
    "network", "dropped", "suricata", "debug", "procmemory", "signatures", "decompression",
    "malfamily", "behavior", "target", "malscore", "static", "feeds", "strings", "virustotal"
  name: sections
- description: Local file path to the report file
  name: reportfilepath
- description: 'The report to be parsed '
  name: reportdata
comment: Display the contents of a Cuckoo report file from a war room entry.
commonfields:
  id: CuckooDisplayReport
  version: -1
dependson:
  must:
  - ck-report
name: CuckooDisplayReport
script: "#ALL_SECTIONS = [\"info\",\"statistics\",\"network\",\"dropped\",\"suricata\"\
  ,\"debug\",\"procmemory\",\"signatures\",\"decompression\",\"malfamily\",\"behavior\"\
  ,\"target\",\"malscore\",\"static\",\"feeds\",\"strings\",\"virustotal\"]\nres =\
  \ []\nif 'reportentryid' not in demisto.args() and 'reportfilepath' not in demisto.args()\
  \  and 'reportdata' not in demisto.args():\n    demisto.results({ \"Type\" : entryTypes[\"\
  error\"], \"ContentsFormat\" : formats[\"text\"], \"Contents\" : 'You must provide\
  \ reportdata, reportentryid or reportfilepath. '})\n    sys.exit()\nshowAllSections\
  \ = False\nBASIC_SECTIONS = [\"info\", \"target\", \"signatures\", \"malscore\"\
  , \"strings\", \"static\"]\nshowSections = demisto.get(demisto.args(), 'sections')\n\
  if showSections and showSections.lower() != 'all':\n    showSections = argToList(showSections)\
  \ if showSections else BASIC_SECTIONS\nelse:\n    showAllSections = True\ntry:\n\
  \    report = None\n    if 'reportdata' in demisto.args():\n        report = json.loads(demisto.args()['reportdata'])\n\
  \    else:\n        try:\n            if 'reportfilepath' in demisto.args():\n \
  \               filePath = demisto.args()['reportfilepath']\n            else:\n\
  \                filePath = demisto.executeCommand('getFilePath', {'id': demisto.args()['reportentryid']})[0]['Contents']['path']\n\
  \            with open(filePath, 'rb') as jsonFile:\n                report = json.load(jsonFile)\n\
  \        except Exception as ex:\n            entry = demisto.executeCommand('getEntry',\
  \ {'id': demisto.args()['reportentryid']})[0]\n            if isError(entry):\n\
  \                demisto.results(entry)\n                sys.exit()\n          \
  \  else:\n                report = entry['Contents']\n\nexcept Exception as ex:\n\
  \    res.append({\"Type\": entryTypes[\"error\"], \"ContentsFormat\": formats[\"\
  text\"],\n                \"Contents\": \"Error occurred while loading report. Exception\
  \ info:\\n\" + str(ex) })\n\nif not report:\n    demisto.results({ \"Type\" : entryTypes[\"\
  error\"], \"ContentsFormat\" : formats[\"text\"], \"Contents\" : 'Failed to load\
  \ report JSON from the provided source argument.'})\n    sys.exit()\n\nif showAllSections:\n\
  \    showSections = report.keys()\n\nfor s in showSections:\n    try:\n        if\
  \ s not in report:\n            res.append({ \"Type\" : entryTypes[\"error\"], \"\
  ContentsFormat\" : formats[\"text\"], \"Contents\" : 'Requested section ' + s +\
  \ ' missing from report.'})\n            continue\n\n        if s == 'info':\n \
  \           t = report['info']\n            data = {k: formatCell(t[k]) for k in\
  \ t}\n            res.append({\"Type\": entryTypes[\"note\"], \"ContentsFormat\"\
  : formats[\"table\"], \"Contents\": data})\n        elif s == 'signatures':\n  \
  \          t = report['signatures']\n            data = [{k: formatCell(row[k])\
  \ for k in row} for row in t]\n            res.append({\"Type\": entryTypes[\"note\"\
  ], \"ContentsFormat\": formats[\"table\"], \"Contents\": data})\n        elif s\
  \ == 'malscore':\n            res.append({\"Type\": entryTypes[\"note\"], \"ContentsFormat\"\
  : formats[\"table\"], \"Contents\": {'Malscore': report['malscore']}})\n       \
  \ elif s == 'strings':\n            strings = demisto.get(report, 'strings')\n \
  \           if strings:\n                data = [{'Strings': s} for s in strings]\n\
  \                res.append({\"Type\": entryTypes[\"note\"], \"ContentsFormat\"\
  : formats[\"table\"], \"Contents\": data})\n        elif s == 'debug':\n       \
  \     t = demisto.get(report, 'debug')\n            if t:\n                for part\
  \ in ['errors', 'log']:\n                    if part in t and t[part]:\n       \
  \                 data = [{part: s} for s in t[part]]\n                        res.append({\"\
  Type\": entryTypes[\"note\"], \"ContentsFormat\": formats[\"table\"], \"Contents\"\
  : data})\n        elif s == 'screenshots':\n            t = demisto.get(report,\
  \ 'screenshots')\n            if t:\n                data = [{'screenshots': s}\
  \ for s in t]\n                res.append({\"Type\": entryTypes[\"note\"], \"ContentsFormat\"\
  : formats[\"table\"], \"Contents\": data})\n\n        elif s == 'statistics':\n\
  \            t = demisto.get(report, 'statistics')\n            if t and isinstance(t,\
  \ list):\n                for subtable in t:\n                    if t[subtable]:\n\
  \                        data = [{k: formatCell(row[k]) for k in row} for row in\
  \ t[subtable]]\n                        res.append({\"Type\": entryTypes[\"note\"\
  ], \"ContentsFormat\": formats[\"table\"], \"Contents\": data})\n        elif s\
  \ == 'behavior':\n            t = demisto.get(report, 'behavior')\n            if\
  \ t and isinstance(t, list):\n                for subtable in t:\n             \
  \       if t[subtable]:\n                        data = [{k: formatCell(row[k])\
  \ for k in row} for row in t[subtable]]\n                        res.append({\"\
  Type\": entryTypes[\"note\"], \"ContentsFormat\": formats[\"table\"], \"Contents\"\
  : data})\n        else:\n            data = report[s] if isinstance(report[s], list)\
  \ else [report[s]]\n            data = [{k: formatCell(row[k]) for k in row} for\
  \ row in data]\n            res.append({\"Type\": entryTypes[\"note\"], \"ContentsFormat\"\
  : formats[\"table\"], \"Contents\": data})\n            #res.append({\"Type\": entryTypes[\"\
  note\"], \"ContentsFormat\": formats[\"json\"], \"Contents\": report[s]})\n    except\
  \ Exception as ex:\n        res.append({\"Type\": entryTypes[\"error\"], \"ContentsFormat\"\
  : formats[\"text\"],\n                    \"Contents\": \"Error occurred while parsing\
  \ section \" + s + \" from report. Exception info:\\n\" + str(ex) })\ndemisto.results(res)\n"
scripttarget: 0
subtype: python2
system: true
tags:
- cuckoo
timeout: 0s
toversion: 4.1.9
type: python
