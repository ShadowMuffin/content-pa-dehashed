args:
- default: true
  description: File /EntryID to detonate
  name: file
  required: true
- description: The FireEye profiles to use (comma separated)
  name: profiles
  required: true
- defaultValue: '0'
  description: "Specify live or sandbox analysis mode. 0\u2014Sandbox, analyze suspected\
    \ malware objects in a closed, protected environment. 1 \u2014Live, analyze suspected\
    \ malware objects live within the MAS Multivector Virtual Execution (MVX) analysis\
    \ engine."
  name: analysistype
- defaultValue: '1'
  description: "Specifies whether to determine the file target based on an internal\
    \ determination rather than browsing to the target location. 0\u2014No 1\u2014\
    Yes"
  name: prefetch
comment: Detonate File or URL through FireEye
commonfields:
  id: FireEyeDetonateFile
  version: -1
dependson:
  must:
  - fe-submit
  - fe-submit-result
  - fe-submit-status
enabled: true
name: FireEyeDetonateFile
script: "import json\nfrom time import sleep\n\nres = []\ntimeout = 960\ninterval\
  \ = 10\n\nfile = demisto.get(demisto.args(),'file')\n\nfeDone = False\nfeSubmissionKeys\
  \ = {}\n\n#profiles = ['win10x64','win7-sp1','win7x64-sp1','winxp-sp3']\nprofiles\
  \ = argToList(demisto.args()['profiles'])\n\nanalysistype = demisto.args().get('analysistype',\
  \ 0)\nprefetch = demisto.args().get('prefetch', 1)\n\n### Make sure fireeye available\n\
  if demisto.executeCommand('IsIntegrationAvailable',{'brandname': 'fireeye'})[0]['Contents']\
  \ != 'yes':\n    feDone = True\n\n### Upload file and get submission_key\nif not\
  \ feDone:\n    bArgs = {'analysistype': analysistype,\n            'application':'0',\n\
  \            'force':\"true\",\n            'prefetch': prefetch,\n            'priority':\"\
  1\",\n            'timeout':\"180\",\n            'upload':file}\n\n    for profile\
  \ in profiles:\n        bArgs['profiles'] = profile\n        resp = demisto.executeCommand('fe-submit',\
  \ bArgs)\n        if isError(resp[0]):\n            demisto.results(resp)\n    \
  \        sys.exit(0)\n        else:\n            feSubmissionKey = demisto.get(resp[0],'Contents')\n\
  \            if isinstance(feSubmissionKey, str):\n                feSubmissionKey\
  \ = json.loads(feSubmissionKey)\n            feSubmissionKeys[profile] = demisto.get(feSubmissionKey[0],'ID')\n\
  else:\n    demisto.results({ \"Type\" : entryTypes[\"error\"], \"ContentsFormat\"\
  \ : formats[\"text\"], \"Contents\" : 'FireEye: Integration not available.' } )\n\
  \    sys.exit(0)\n\n############ Poll stage ############\nstatus = None\nsec = 0\n\
  stauses = {}\nwhile sec < timeout and feSubmissionKeys:\n    if not feDone:\n  \
  \      status = \"Done\"\n        ######## Get status\n        for profile in profiles:\n\
  \            resp = demisto.executeCommand('fe-submit-status',{'submission_Key':feSubmissionKeys[profile]})\n\
  \            if isError(resp[0]):\n                demisto.results(resp)\n     \
  \           sys.exit(0)\n\n            stauses[profile] = demisto.get(resp[0],'Contents.submissionStatus')\n\
  \            if stauses[profile] in [\"In Progress\"]:\n                status =\
  \ \"In Progress\"\n\n        ##### find status\n        if status in [\"In Progress\"\
  ]:\n            sec += interval\n            sleep(interval)\n            ### continue\
  \ loop\n        else:\n            ## loop done failed\n            feDone = True\n\
  \    else:\n        break\n\n\n############ Get results ############\nif not feDone:\n\
  \    demisto.results( { \"Type\" : entryTypes[\"error\"], \"ContentsFormat\" : formats[\"\
  text\"], \"Contents\" : 'Could not retrieve results from FireEye (may be due to\
  \ timeout).' } )\n\nfor profile in profiles:\n    status = stauses[profile]\n  \
  \  if status in [\"Done\"]:\n        resp = demisto.executeCommand('fe-submit-result\
  \ ',{'submission_Key':feSubmissionKeys[profile]})\n        if isError(resp[0]):\n\
  \            demisto.results(resp)\n        else:\n            data = demisto.get(resp[0],\
  \ \"Contents.alerts.alert\")\n            if data:\n                data = data\
  \ if isinstance(data, list) else [data]\n                data = [{k: formatCell(row[k]).replace(\"\
  \\n\",\"<br>\") for k in row} for row in data]\n                data = tblToMd(profile,data)\n\
  \                demisto.results({\"ContentsFormat\": formats[\"markdown\"], \"\
  Type\": entryTypes[\"note\"], \"Contents\": data} )\n            else:\n       \
  \         demisto.results(\"No results.\")\n    else:\n        demisto.results({\
  \ \"Type\" : entryTypes[\"error\"], \"ContentsFormat\" : formats[\"text\"], \"Contents\"\
  \ : 'FireEye: Failed to detonate file {0}, exit status = {1}'.format(file,status)\
  \ })\n\n"
scripttarget: 0
subtype: python2
tags:
- fireeye
- file
- enhancement
tests:
- No test
timeout: 960ns
toversion: 4.1.9
type: python
